/*
 * This is a generated file
 * Do not edit manually.
 */

import { PoolClient } from 'pg';
import * as fns from '../migrate-functions';

// prettier-ignore
export async function run(client: PoolClient): Promise<void> {
  const results: { name: string; durationMs: number }[] = []
  await fns.query(client, results, `CREATE FUNCTION token_array_to_text(text[])
    RETURNS text LANGUAGE sql IMMUTABLE
    AS $function$SELECT e'\x03'||array_to_string($1, e'\x03')||e'\x03'$function$`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Account" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "owner" TEXT,
  "patient" TEXT[],
  "period" TIMESTAMPTZ,
  "status" TEXT,
  "subject" TEXT[],
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__ownerIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Account_id_idx" ON "Account" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_lastUpdated_idx" ON "Account" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_projectId_lastUpdated_idx" ON "Account" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_projectId_idx" ON "Account" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account__source_idx" ON "Account" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account__profile_idx" ON "Account" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___version_idx" ON "Account" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_compartments_idx" ON "Account" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___sharedTokens_idx" ON "Account" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___sharedTokensTextTrgm_idx" ON "Account" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account____tag_idx" ON "Account" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account____tagTextTrgm_idx" ON "Account" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___idnt_idx" ON "Account" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___idntTextTrgm_idx" ON "Account" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_name_idx" ON "Account" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_owner_idx" ON "Account" ("owner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_patient_idx" ON "Account" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_period_idx" ON "Account" ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_status_idx" ON "Account" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_subject_idx" ON "Account" USING gin ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___type_idx" ON "Account" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account___typeTextTrgm_idx" ON "Account" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Account_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_History_id_idx" ON "Account_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_History_lastUpdated_idx" ON "Account_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Account_History_versionId_idx" ON "Account_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Account_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Account_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Account_Refs_resourceId_targetId_code_idx" ON "Account_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Account_Refs_targetId_code_idx" ON "Account_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ActivityDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_id_idx" ON "ActivityDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_lastUpdated_idx" ON "ActivityDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_projectId_lastUpdated_idx" ON "ActivityDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_projectId_idx" ON "ActivityDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition__source_idx" ON "ActivityDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition__profile_idx" ON "ActivityDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___version_idx" ON "ActivityDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_compartments_idx" ON "ActivityDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___sharedTokens_idx" ON "ActivityDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___sharedTokensTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition____tag_idx" ON "ActivityDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition____tagTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_composedOf_idx" ON "ActivityDefinition" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___context_idx" ON "ActivityDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___contextTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_contextQuantity_idx" ON "ActivityDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___contextType_idx" ON "ActivityDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___contextTypeTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_date_idx" ON "ActivityDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_projectId_date_idx" ON "ActivityDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_dependsOn_idx" ON "ActivityDefinition" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_derivedFrom_idx" ON "ActivityDefinition" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_description_idx" ON "ActivityDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_effective_idx" ON "ActivityDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___idnt_idx" ON "ActivityDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___idntTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___jurisdiction_idx" ON "ActivityDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___jurisdictionTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_name_idx" ON "ActivityDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_predecessor_idx" ON "ActivityDefinition" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_publisher_idx" ON "ActivityDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_status_idx" ON "ActivityDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_successor_idx" ON "ActivityDefinition" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_title_idx" ON "ActivityDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___topic_idx" ON "ActivityDefinition" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition___topicTextTrgm_idx" ON "ActivityDefinition" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_url_idx" ON "ActivityDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_version_idx" ON "ActivityDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ActivityDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_History_id_idx" ON "ActivityDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_History_lastUpdated_idx" ON "ActivityDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_History_versionId_idx" ON "ActivityDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ActivityDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ActivityDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_Refs_resourceId_targetId_code_idx" ON "ActivityDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ActivityDefinition_Refs_targetId_code_idx" ON "ActivityDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AdverseEvent" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "actuality" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "date" TIMESTAMPTZ,
  "__event" UUID[],
  "__eventText" TEXT[],
  "__eventSort" TEXT,
  "location" TEXT,
  "recorder" TEXT,
  "resultingcondition" TEXT[],
  "__seriousness" UUID[],
  "__seriousnessText" TEXT[],
  "__seriousnessSort" TEXT,
  "__severity" UUID[],
  "__severityText" TEXT[],
  "__severitySort" TEXT,
  "study" TEXT[],
  "subject" TEXT,
  "substance" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__recorderIdentifierSort" TEXT,
  "__resultingconditionIdentifierSort" TEXT,
  "__studyIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT,
  "__substanceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_id_idx" ON "AdverseEvent" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_lastUpdated_idx" ON "AdverseEvent" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_projectId_lastUpdated_idx" ON "AdverseEvent" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_projectId_idx" ON "AdverseEvent" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent__source_idx" ON "AdverseEvent" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent__profile_idx" ON "AdverseEvent" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___version_idx" ON "AdverseEvent" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_compartments_idx" ON "AdverseEvent" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___sharedTokens_idx" ON "AdverseEvent" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___sharedTokensTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent____tag_idx" ON "AdverseEvent" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent____tagTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_actuality_idx" ON "AdverseEvent" ("actuality")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___category_idx" ON "AdverseEvent" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___categoryTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_date_idx" ON "AdverseEvent" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_projectId_date_idx" ON "AdverseEvent" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___event_idx" ON "AdverseEvent" USING gin ("__event")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___eventTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("__eventText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_location_idx" ON "AdverseEvent" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_recorder_idx" ON "AdverseEvent" ("recorder")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_resultingcondition_idx" ON "AdverseEvent" USING gin ("resultingcondition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___seriousness_idx" ON "AdverseEvent" USING gin ("__seriousness")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___seriousnessTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("__seriousnessText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___severity_idx" ON "AdverseEvent" USING gin ("__severity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent___severityTextTrgm_idx" ON "AdverseEvent" USING gin (token_array_to_text("__severityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_study_idx" ON "AdverseEvent" USING gin ("study")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_subject_idx" ON "AdverseEvent" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_substance_idx" ON "AdverseEvent" USING gin ("substance")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AdverseEvent_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_History_id_idx" ON "AdverseEvent_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_History_lastUpdated_idx" ON "AdverseEvent_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_History_versionId_idx" ON "AdverseEvent_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AdverseEvent_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AdverseEvent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_Refs_resourceId_targetId_code_idx" ON "AdverseEvent_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AdverseEvent_Refs_targetId_code_idx" ON "AdverseEvent_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AllergyIntolerance" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "asserter" TEXT,
  "category" TEXT[],
  "__clinicalStatus" UUID[],
  "__clinicalStatusText" TEXT[],
  "__clinicalStatusSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "criticality" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "lastDate" TIMESTAMPTZ,
  "__manifestation" UUID[],
  "__manifestationText" TEXT[],
  "__manifestationSort" TEXT,
  "onset" TIMESTAMPTZ[],
  "patient" TEXT,
  "recorder" TEXT,
  "__route" UUID[],
  "__routeText" TEXT[],
  "__routeSort" TEXT,
  "severity" TEXT[],
  "type" TEXT,
  "__verificationStatus" UUID[],
  "__verificationStatusText" TEXT[],
  "__verificationStatusSort" TEXT,
  "encounter" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__asserterIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__recorderIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_id_idx" ON "AllergyIntolerance" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_lastUpdated_idx" ON "AllergyIntolerance" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_projectId_lastUpdated_idx" ON "AllergyIntolerance" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_projectId_idx" ON "AllergyIntolerance" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance__source_idx" ON "AllergyIntolerance" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance__profile_idx" ON "AllergyIntolerance" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___version_idx" ON "AllergyIntolerance" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_compartments_idx" ON "AllergyIntolerance" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___sharedTokens_idx" ON "AllergyIntolerance" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___sharedTokensTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance____tag_idx" ON "AllergyIntolerance" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance____tagTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_asserter_idx" ON "AllergyIntolerance" ("asserter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_category_idx" ON "AllergyIntolerance" USING gin ("category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___clinicalStatus_idx" ON "AllergyIntolerance" USING gin ("__clinicalStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___clinicalStatusTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__clinicalStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___code_idx" ON "AllergyIntolerance" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___codeTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_criticality_idx" ON "AllergyIntolerance" ("criticality")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_date_idx" ON "AllergyIntolerance" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_projectId_date_idx" ON "AllergyIntolerance" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___idnt_idx" ON "AllergyIntolerance" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___idntTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_lastDate_idx" ON "AllergyIntolerance" ("lastDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___manifestation_idx" ON "AllergyIntolerance" USING gin ("__manifestation")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___manifestationTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__manifestationText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_onset_idx" ON "AllergyIntolerance" USING gin ("onset")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_patient_idx" ON "AllergyIntolerance" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_recorder_idx" ON "AllergyIntolerance" ("recorder")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___route_idx" ON "AllergyIntolerance" USING gin ("__route")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___routeTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__routeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_severity_idx" ON "AllergyIntolerance" USING gin ("severity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_type_idx" ON "AllergyIntolerance" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___verificationStatus_idx" ON "AllergyIntolerance" USING gin ("__verificationStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance___verificationStatusTextTrgm_idx" ON "AllergyIntolerance" USING gin (token_array_to_text("__verificationStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_encounter_idx" ON "AllergyIntolerance" ("encounter")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AllergyIntolerance_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_History_id_idx" ON "AllergyIntolerance_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_History_lastUpdated_idx" ON "AllergyIntolerance_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_History_versionId_idx" ON "AllergyIntolerance_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AllergyIntolerance_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AllergyIntolerance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_Refs_resourceId_targetId_code_idx" ON "AllergyIntolerance_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AllergyIntolerance_Refs_targetId_code_idx" ON "AllergyIntolerance_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Appointment" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "actor" TEXT[],
  "__appointmentType" UUID[],
  "__appointmentTypeText" TEXT[],
  "__appointmentTypeSort" TEXT,
  "basedOn" TEXT[],
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT[],
  "partStatus" TEXT[],
  "patient" TEXT[],
  "practitioner" TEXT[],
  "__reasonCodeSort" TEXT,
  "reasonReference" TEXT[],
  "__serviceCategory" UUID[],
  "__serviceCategoryText" TEXT[],
  "__serviceCategorySort" TEXT,
  "__serviceType" UUID[],
  "__serviceTypeText" TEXT[],
  "__serviceTypeSort" TEXT,
  "slot" TEXT[],
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "status" TEXT,
  "supportingInfo" TEXT[],
  "end" TIMESTAMPTZ,
  "___compartmentIdentifierSort" TEXT,
  "__actorIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__practitionerIdentifierSort" TEXT,
  "__reasonReferenceIdentifierSort" TEXT,
  "__slotIdentifierSort" TEXT,
  "__supportingInfoIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_id_idx" ON "Appointment" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_lastUpdated_idx" ON "Appointment" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_projectId_lastUpdated_idx" ON "Appointment" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_projectId_idx" ON "Appointment" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment__source_idx" ON "Appointment" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment__profile_idx" ON "Appointment" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___version_idx" ON "Appointment" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_compartments_idx" ON "Appointment" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___sharedTokens_idx" ON "Appointment" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___sharedTokensTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment____tag_idx" ON "Appointment" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment____tagTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_actor_idx" ON "Appointment" USING gin ("actor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___appointmentType_idx" ON "Appointment" USING gin ("__appointmentType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___appointmentTypeTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__appointmentTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_basedOn_idx" ON "Appointment" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_date_idx" ON "Appointment" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_projectId_date_idx" ON "Appointment" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___idnt_idx" ON "Appointment" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___idntTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_location_idx" ON "Appointment" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_partStatus_idx" ON "Appointment" USING gin ("partStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_patient_idx" ON "Appointment" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_practitioner_idx" ON "Appointment" USING gin ("practitioner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_reasonReference_idx" ON "Appointment" USING gin ("reasonReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___serviceCategory_idx" ON "Appointment" USING gin ("__serviceCategory")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___serviceCategoryTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__serviceCategoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___serviceType_idx" ON "Appointment" USING gin ("__serviceType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___serviceTypeTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__serviceTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_slot_idx" ON "Appointment" USING gin ("slot")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___specialty_idx" ON "Appointment" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment___specialtyTextTrgm_idx" ON "Appointment" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_status_idx" ON "Appointment" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_supportingInfo_idx" ON "Appointment" USING gin ("supportingInfo")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_end_idx" ON "Appointment" ("end")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Appointment_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_History_id_idx" ON "Appointment_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_History_lastUpdated_idx" ON "Appointment_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_History_versionId_idx" ON "Appointment_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Appointment_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Appointment_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_Refs_resourceId_targetId_code_idx" ON "Appointment_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Appointment_Refs_targetId_code_idx" ON "Appointment_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AppointmentResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "actor" TEXT,
  "appointment" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT,
  "partStatus" TEXT,
  "patient" TEXT,
  "practitioner" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__actorIdentifierSort" TEXT,
  "__appointmentIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__practitionerIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_id_idx" ON "AppointmentResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_lastUpdated_idx" ON "AppointmentResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_projectId_lastUpdated_idx" ON "AppointmentResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_projectId_idx" ON "AppointmentResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse__source_idx" ON "AppointmentResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse__profile_idx" ON "AppointmentResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse___version_idx" ON "AppointmentResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_compartments_idx" ON "AppointmentResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse___sharedTokens_idx" ON "AppointmentResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse___sharedTokensTextTrgm_idx" ON "AppointmentResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse____tag_idx" ON "AppointmentResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse____tagTextTrgm_idx" ON "AppointmentResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_actor_idx" ON "AppointmentResponse" ("actor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_appointment_idx" ON "AppointmentResponse" ("appointment")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse___idnt_idx" ON "AppointmentResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse___idntTextTrgm_idx" ON "AppointmentResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_location_idx" ON "AppointmentResponse" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_partStatus_idx" ON "AppointmentResponse" ("partStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_patient_idx" ON "AppointmentResponse" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_practitioner_idx" ON "AppointmentResponse" ("practitioner")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AppointmentResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_History_id_idx" ON "AppointmentResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_History_lastUpdated_idx" ON "AppointmentResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_History_versionId_idx" ON "AppointmentResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AppointmentResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AppointmentResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_Refs_resourceId_targetId_code_idx" ON "AppointmentResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AppointmentResponse_Refs_targetId_code_idx" ON "AppointmentResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AuditEvent" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tagSort" TEXT,
  "action" TEXT,
  "address" TEXT[],
  "agent" TEXT[],
  "agentName" TEXT[],
  "__agentRoleSort" TEXT,
  "altid" TEXT[],
  "date" TIMESTAMPTZ,
  "entity" TEXT[],
  "entityName" TEXT[],
  "__entityRole" UUID[],
  "__entityRoleText" TEXT[],
  "__entityRoleSort" TEXT,
  "__entityTypeSort" TEXT,
  "outcome" TEXT,
  "patient" TEXT[],
  "policy" TEXT[],
  "site" TEXT,
  "source" TEXT,
  "__subtypeSort" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__agentIdentifierSort" TEXT,
  "__entityIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_id_idx" ON "AuditEvent" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_lastUpdated_idx" ON "AuditEvent" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_projectId_lastUpdated_idx" ON "AuditEvent" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_projectId_idx" ON "AuditEvent" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent__source_idx" ON "AuditEvent" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent__profile_idx" ON "AuditEvent" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___version_idx" ON "AuditEvent" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_compartments_idx" ON "AuditEvent" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___sharedTokens_idx" ON "AuditEvent" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___sharedTokensTextTrgm_idx" ON "AuditEvent" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_action_idx" ON "AuditEvent" ("action")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_address_idx" ON "AuditEvent" USING gin ("address")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_agent_idx" ON "AuditEvent" USING gin ("agent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_agentName_idx" ON "AuditEvent" USING gin ("agentName")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_altid_idx" ON "AuditEvent" USING gin ("altid")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_date_idx" ON "AuditEvent" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_projectId_date_idx" ON "AuditEvent" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_entity_idx" ON "AuditEvent" USING gin ("entity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_entityName_idx" ON "AuditEvent" USING gin ("entityName")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___entityRole_idx" ON "AuditEvent" USING gin ("__entityRole")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___entityRoleTextTrgm_idx" ON "AuditEvent" USING gin (token_array_to_text("__entityRoleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_outcome_idx" ON "AuditEvent" ("outcome")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_patient_idx" ON "AuditEvent" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_policy_idx" ON "AuditEvent" USING gin ("policy")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_site_idx" ON "AuditEvent" ("site")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_source_idx" ON "AuditEvent" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___type_idx" ON "AuditEvent" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent___typeTextTrgm_idx" ON "AuditEvent" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AuditEvent_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_History_id_idx" ON "AuditEvent_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_History_lastUpdated_idx" ON "AuditEvent_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_History_versionId_idx" ON "AuditEvent_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AuditEvent_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AuditEvent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_Refs_resourceId_targetId_code_idx" ON "AuditEvent_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AuditEvent_Refs_targetId_code_idx" ON "AuditEvent_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Basic" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "author" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "created" DATE,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Basic_id_idx" ON "Basic" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_lastUpdated_idx" ON "Basic" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_projectId_lastUpdated_idx" ON "Basic" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_projectId_idx" ON "Basic" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic__source_idx" ON "Basic" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic__profile_idx" ON "Basic" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___version_idx" ON "Basic" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_compartments_idx" ON "Basic" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___sharedTokens_idx" ON "Basic" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___sharedTokensTextTrgm_idx" ON "Basic" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic____tag_idx" ON "Basic" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic____tagTextTrgm_idx" ON "Basic" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_author_idx" ON "Basic" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___code_idx" ON "Basic" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___codeTextTrgm_idx" ON "Basic" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_created_idx" ON "Basic" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___idnt_idx" ON "Basic" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic___idntTextTrgm_idx" ON "Basic" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_patient_idx" ON "Basic" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_subject_idx" ON "Basic" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Basic_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_History_id_idx" ON "Basic_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_History_lastUpdated_idx" ON "Basic_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Basic_History_versionId_idx" ON "Basic_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Basic_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Basic_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Basic_Refs_resourceId_targetId_code_idx" ON "Basic_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Basic_Refs_targetId_code_idx" ON "Basic_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Binary" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[]
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Binary_id_idx" ON "Binary" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_lastUpdated_idx" ON "Binary" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_projectId_lastUpdated_idx" ON "Binary" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_projectId_idx" ON "Binary" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary__source_idx" ON "Binary" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary__profile_idx" ON "Binary" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary___version_idx" ON "Binary" ("__version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Binary_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_History_id_idx" ON "Binary_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_History_lastUpdated_idx" ON "Binary_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Binary_History_versionId_idx" ON "Binary_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Binary_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Binary_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Binary_Refs_resourceId_targetId_code_idx" ON "Binary_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Binary_Refs_targetId_code_idx" ON "Binary_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_id_idx" ON "BiologicallyDerivedProduct" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_lastUpdated_idx" ON "BiologicallyDerivedProduct" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_projectId_lastUpdated_idx" ON "BiologicallyDerivedProduct" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_projectId_idx" ON "BiologicallyDerivedProduct" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct__source_idx" ON "BiologicallyDerivedProduct" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct__profile_idx" ON "BiologicallyDerivedProduct" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct___version_idx" ON "BiologicallyDerivedProduct" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_compartments_idx" ON "BiologicallyDerivedProduct" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct___sharedTokens_idx" ON "BiologicallyDerivedProduct" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct___sharedTokensTextTrgm_idx" ON "BiologicallyDerivedProduct" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct____tag_idx" ON "BiologicallyDerivedProduct" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct____tagTextTrgm_idx" ON "BiologicallyDerivedProduct" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_History_id_idx" ON "BiologicallyDerivedProduct_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_History_lastUpdated_idx" ON "BiologicallyDerivedProduct_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_History_versionId_idx" ON "BiologicallyDerivedProduct_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BiologicallyDerivedProduct_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "BiologicallyDerivedProduct_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_Refs_resourceId_targetId_code_idx" ON "BiologicallyDerivedProduct_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BiologicallyDerivedProduct_Refs_targetId_code_idx" ON "BiologicallyDerivedProduct_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BodyStructure" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__location" UUID[],
  "__locationText" TEXT[],
  "__locationSort" TEXT,
  "__morphology" UUID[],
  "__morphologyText" TEXT[],
  "__morphologySort" TEXT,
  "patient" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_id_idx" ON "BodyStructure" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_lastUpdated_idx" ON "BodyStructure" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_projectId_lastUpdated_idx" ON "BodyStructure" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_projectId_idx" ON "BodyStructure" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure__source_idx" ON "BodyStructure" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure__profile_idx" ON "BodyStructure" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___version_idx" ON "BodyStructure" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_compartments_idx" ON "BodyStructure" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___sharedTokens_idx" ON "BodyStructure" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___sharedTokensTextTrgm_idx" ON "BodyStructure" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure____tag_idx" ON "BodyStructure" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure____tagTextTrgm_idx" ON "BodyStructure" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___idnt_idx" ON "BodyStructure" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___idntTextTrgm_idx" ON "BodyStructure" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___location_idx" ON "BodyStructure" USING gin ("__location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___locationTextTrgm_idx" ON "BodyStructure" USING gin (token_array_to_text("__locationText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___morphology_idx" ON "BodyStructure" USING gin ("__morphology")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure___morphologyTextTrgm_idx" ON "BodyStructure" USING gin (token_array_to_text("__morphologyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_patient_idx" ON "BodyStructure" ("patient")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BodyStructure_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_History_id_idx" ON "BodyStructure_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_History_lastUpdated_idx" ON "BodyStructure_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_History_versionId_idx" ON "BodyStructure_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BodyStructure_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "BodyStructure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_Refs_resourceId_targetId_code_idx" ON "BodyStructure_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BodyStructure_Refs_targetId_code_idx" ON "BodyStructure_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bundle" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composition" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "message" TEXT,
  "timestamp" TIMESTAMPTZ,
  "type" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__compositionIdentifierSort" TEXT,
  "__messageIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_id_idx" ON "Bundle" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_lastUpdated_idx" ON "Bundle" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_projectId_lastUpdated_idx" ON "Bundle" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_projectId_idx" ON "Bundle" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle__source_idx" ON "Bundle" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle__profile_idx" ON "Bundle" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle___version_idx" ON "Bundle" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_compartments_idx" ON "Bundle" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle___sharedTokens_idx" ON "Bundle" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle___sharedTokensTextTrgm_idx" ON "Bundle" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle____tag_idx" ON "Bundle" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle____tagTextTrgm_idx" ON "Bundle" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_composition_idx" ON "Bundle" ("composition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle___idnt_idx" ON "Bundle" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle___idntTextTrgm_idx" ON "Bundle" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_message_idx" ON "Bundle" ("message")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_timestamp_idx" ON "Bundle" ("timestamp")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_type_idx" ON "Bundle" ("type")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bundle_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_History_id_idx" ON "Bundle_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_History_lastUpdated_idx" ON "Bundle_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_History_versionId_idx" ON "Bundle_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bundle_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Bundle_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_Refs_resourceId_targetId_code_idx" ON "Bundle_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bundle_Refs_targetId_code_idx" ON "Bundle_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CapabilityStatement" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "fhirversion" TEXT,
  "format" TEXT[],
  "guide" TEXT[],
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "mode" TEXT[],
  "name" TEXT,
  "publisher" TEXT,
  "resource" TEXT[],
  "resourceProfile" TEXT[],
  "__securityService" UUID[],
  "__securityServiceText" TEXT[],
  "__securityServiceSort" TEXT,
  "software" TEXT,
  "status" TEXT,
  "supportedProfile" TEXT[],
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__guideIdentifierSort" TEXT,
  "__resourceProfileIdentifierSort" TEXT,
  "__supportedProfileIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_id_idx" ON "CapabilityStatement" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_lastUpdated_idx" ON "CapabilityStatement" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_projectId_lastUpdated_idx" ON "CapabilityStatement" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_projectId_idx" ON "CapabilityStatement" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement__source_idx" ON "CapabilityStatement" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement__profile_idx" ON "CapabilityStatement" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___version_idx" ON "CapabilityStatement" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_compartments_idx" ON "CapabilityStatement" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___sharedTokens_idx" ON "CapabilityStatement" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___sharedTokensTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement____tag_idx" ON "CapabilityStatement" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement____tagTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___context_idx" ON "CapabilityStatement" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___contextTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_contextQuantity_idx" ON "CapabilityStatement" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___contextType_idx" ON "CapabilityStatement" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___contextTypeTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_date_idx" ON "CapabilityStatement" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_projectId_date_idx" ON "CapabilityStatement" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_description_idx" ON "CapabilityStatement" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_fhirversion_idx" ON "CapabilityStatement" ("fhirversion")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_format_idx" ON "CapabilityStatement" USING gin ("format")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_guide_idx" ON "CapabilityStatement" USING gin ("guide")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___jurisdiction_idx" ON "CapabilityStatement" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___jurisdictionTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_mode_idx" ON "CapabilityStatement" USING gin ("mode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_name_idx" ON "CapabilityStatement" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_publisher_idx" ON "CapabilityStatement" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_resource_idx" ON "CapabilityStatement" USING gin ("resource")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_resourceProfile_idx" ON "CapabilityStatement" USING gin ("resourceProfile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___securityService_idx" ON "CapabilityStatement" USING gin ("__securityService")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement___securityServiceTextTrgm_idx" ON "CapabilityStatement" USING gin (token_array_to_text("__securityServiceText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_software_idx" ON "CapabilityStatement" ("software")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_status_idx" ON "CapabilityStatement" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_supportedProfile_idx" ON "CapabilityStatement" USING gin ("supportedProfile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_title_idx" ON "CapabilityStatement" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_url_idx" ON "CapabilityStatement" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_version_idx" ON "CapabilityStatement" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CapabilityStatement_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_History_id_idx" ON "CapabilityStatement_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_History_lastUpdated_idx" ON "CapabilityStatement_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_History_versionId_idx" ON "CapabilityStatement_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CapabilityStatement_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CapabilityStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_Refs_resourceId_targetId_code_idx" ON "CapabilityStatement_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CapabilityStatement_Refs_targetId_code_idx" ON "CapabilityStatement_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CarePlan" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__activityCode" UUID[],
  "__activityCodeText" TEXT[],
  "__activityCodeSort" TEXT,
  "activityDate" TIMESTAMPTZ[],
  "activityReference" TEXT[],
  "basedOn" TEXT[],
  "careTeam" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "condition" TEXT[],
  "encounter" TEXT,
  "goal" TEXT[],
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "intent" TEXT,
  "partOf" TEXT[],
  "performer" TEXT[],
  "replaces" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__activityReferenceIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__careTeamIdentifierSort" TEXT,
  "__conditionIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__goalIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__replacesIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_id_idx" ON "CarePlan" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_lastUpdated_idx" ON "CarePlan" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_projectId_lastUpdated_idx" ON "CarePlan" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_projectId_idx" ON "CarePlan" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan__source_idx" ON "CarePlan" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan__profile_idx" ON "CarePlan" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___version_idx" ON "CarePlan" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_compartments_idx" ON "CarePlan" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___sharedTokens_idx" ON "CarePlan" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___sharedTokensTextTrgm_idx" ON "CarePlan" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan____tag_idx" ON "CarePlan" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan____tagTextTrgm_idx" ON "CarePlan" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_date_idx" ON "CarePlan" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_projectId_date_idx" ON "CarePlan" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___idnt_idx" ON "CarePlan" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___idntTextTrgm_idx" ON "CarePlan" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_patient_idx" ON "CarePlan" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___activityCode_idx" ON "CarePlan" USING gin ("__activityCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___activityCodeTextTrgm_idx" ON "CarePlan" USING gin (token_array_to_text("__activityCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_activityDate_idx" ON "CarePlan" USING gin ("activityDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_activityReference_idx" ON "CarePlan" USING gin ("activityReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_basedOn_idx" ON "CarePlan" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_careTeam_idx" ON "CarePlan" USING gin ("careTeam")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___category_idx" ON "CarePlan" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan___categoryTextTrgm_idx" ON "CarePlan" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_condition_idx" ON "CarePlan" USING gin ("condition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_encounter_idx" ON "CarePlan" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_goal_idx" ON "CarePlan" USING gin ("goal")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_instantiatesCanonical_idx" ON "CarePlan" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_instantiatesUri_idx" ON "CarePlan" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_intent_idx" ON "CarePlan" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_partOf_idx" ON "CarePlan" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_performer_idx" ON "CarePlan" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_replaces_idx" ON "CarePlan" USING gin ("replaces")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_status_idx" ON "CarePlan" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_subject_idx" ON "CarePlan" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CarePlan_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_History_id_idx" ON "CarePlan_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_History_lastUpdated_idx" ON "CarePlan_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_History_versionId_idx" ON "CarePlan_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CarePlan_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CarePlan_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_Refs_resourceId_targetId_code_idx" ON "CarePlan_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CarePlan_Refs_targetId_code_idx" ON "CarePlan_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CareTeam" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "encounter" TEXT,
  "participant" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "name" TEXT,
  "__role" UUID[],
  "__roleText" TEXT[],
  "__roleSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__participantIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_id_idx" ON "CareTeam" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_lastUpdated_idx" ON "CareTeam" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_projectId_lastUpdated_idx" ON "CareTeam" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_projectId_idx" ON "CareTeam" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam__source_idx" ON "CareTeam" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam__profile_idx" ON "CareTeam" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___version_idx" ON "CareTeam" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_compartments_idx" ON "CareTeam" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___sharedTokens_idx" ON "CareTeam" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___sharedTokensTextTrgm_idx" ON "CareTeam" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam____tag_idx" ON "CareTeam" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam____tagTextTrgm_idx" ON "CareTeam" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_date_idx" ON "CareTeam" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_projectId_date_idx" ON "CareTeam" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___idnt_idx" ON "CareTeam" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___idntTextTrgm_idx" ON "CareTeam" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_patient_idx" ON "CareTeam" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___category_idx" ON "CareTeam" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___categoryTextTrgm_idx" ON "CareTeam" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_encounter_idx" ON "CareTeam" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_participant_idx" ON "CareTeam" USING gin ("participant")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_status_idx" ON "CareTeam" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_subject_idx" ON "CareTeam" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_name_idx" ON "CareTeam" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___role_idx" ON "CareTeam" USING gin ("__role")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam___roleTextTrgm_idx" ON "CareTeam" USING gin (token_array_to_text("__roleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CareTeam_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_History_id_idx" ON "CareTeam_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_History_lastUpdated_idx" ON "CareTeam_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_History_versionId_idx" ON "CareTeam_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CareTeam_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CareTeam_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_Refs_resourceId_targetId_code_idx" ON "CareTeam_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CareTeam_Refs_targetId_code_idx" ON "CareTeam_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CatalogEntry" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_id_idx" ON "CatalogEntry" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_lastUpdated_idx" ON "CatalogEntry" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_projectId_lastUpdated_idx" ON "CatalogEntry" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_projectId_idx" ON "CatalogEntry" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry__source_idx" ON "CatalogEntry" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry__profile_idx" ON "CatalogEntry" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry___version_idx" ON "CatalogEntry" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_compartments_idx" ON "CatalogEntry" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry___sharedTokens_idx" ON "CatalogEntry" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry___sharedTokensTextTrgm_idx" ON "CatalogEntry" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry____tag_idx" ON "CatalogEntry" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry____tagTextTrgm_idx" ON "CatalogEntry" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CatalogEntry_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_History_id_idx" ON "CatalogEntry_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_History_lastUpdated_idx" ON "CatalogEntry_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_History_versionId_idx" ON "CatalogEntry_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CatalogEntry_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CatalogEntry_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_Refs_resourceId_targetId_code_idx" ON "CatalogEntry_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CatalogEntry_Refs_targetId_code_idx" ON "CatalogEntry_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItem" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "account" TEXT[],
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "context" TEXT,
  "enteredDate" TIMESTAMPTZ,
  "enterer" TEXT,
  "factorOverride" DOUBLE PRECISION,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "occurrence" TIMESTAMPTZ,
  "patient" TEXT,
  "performerActor" TEXT[],
  "__performerFunction" UUID[],
  "__performerFunctionText" TEXT[],
  "__performerFunctionSort" TEXT,
  "performingOrganization" TEXT,
  "priceOverride" DOUBLE PRECISION,
  "quantity" DOUBLE PRECISION,
  "requestingOrganization" TEXT,
  "service" TEXT[],
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__accountIdentifierSort" TEXT,
  "__contextIdentifierSort" TEXT,
  "__entererIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__performerActorIdentifierSort" TEXT,
  "__performingOrganizationIdentifierSort" TEXT,
  "__requestingOrganizationIdentifierSort" TEXT,
  "__serviceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_id_idx" ON "ChargeItem" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_lastUpdated_idx" ON "ChargeItem" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_projectId_lastUpdated_idx" ON "ChargeItem" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_projectId_idx" ON "ChargeItem" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem__source_idx" ON "ChargeItem" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem__profile_idx" ON "ChargeItem" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___version_idx" ON "ChargeItem" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_compartments_idx" ON "ChargeItem" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___sharedTokens_idx" ON "ChargeItem" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___sharedTokensTextTrgm_idx" ON "ChargeItem" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem____tag_idx" ON "ChargeItem" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem____tagTextTrgm_idx" ON "ChargeItem" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_account_idx" ON "ChargeItem" USING gin ("account")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___code_idx" ON "ChargeItem" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___codeTextTrgm_idx" ON "ChargeItem" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_context_idx" ON "ChargeItem" ("context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_enteredDate_idx" ON "ChargeItem" ("enteredDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_enterer_idx" ON "ChargeItem" ("enterer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_factorOverride_idx" ON "ChargeItem" ("factorOverride")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___idnt_idx" ON "ChargeItem" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___idntTextTrgm_idx" ON "ChargeItem" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_occurrence_idx" ON "ChargeItem" ("occurrence")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_patient_idx" ON "ChargeItem" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_performerActor_idx" ON "ChargeItem" USING gin ("performerActor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___performerFunction_idx" ON "ChargeItem" USING gin ("__performerFunction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem___performerFunctionTextTrgm_idx" ON "ChargeItem" USING gin (token_array_to_text("__performerFunctionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_performingOrganization_idx" ON "ChargeItem" ("performingOrganization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_priceOverride_idx" ON "ChargeItem" ("priceOverride")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_quantity_idx" ON "ChargeItem" ("quantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_requestingOrganization_idx" ON "ChargeItem" ("requestingOrganization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_service_idx" ON "ChargeItem" USING gin ("service")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_subject_idx" ON "ChargeItem" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItem_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_History_id_idx" ON "ChargeItem_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_History_lastUpdated_idx" ON "ChargeItem_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_History_versionId_idx" ON "ChargeItem_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItem_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ChargeItem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_Refs_resourceId_targetId_code_idx" ON "ChargeItem_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItem_Refs_targetId_code_idx" ON "ChargeItem_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItemDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_id_idx" ON "ChargeItemDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_lastUpdated_idx" ON "ChargeItemDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_projectId_lastUpdated_idx" ON "ChargeItemDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_projectId_idx" ON "ChargeItemDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition__source_idx" ON "ChargeItemDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition__profile_idx" ON "ChargeItemDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___version_idx" ON "ChargeItemDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_compartments_idx" ON "ChargeItemDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___sharedTokens_idx" ON "ChargeItemDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___sharedTokensTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition____tag_idx" ON "ChargeItemDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition____tagTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___context_idx" ON "ChargeItemDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___contextTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_contextQuantity_idx" ON "ChargeItemDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___contextType_idx" ON "ChargeItemDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___contextTypeTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_date_idx" ON "ChargeItemDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_projectId_date_idx" ON "ChargeItemDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_description_idx" ON "ChargeItemDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_effective_idx" ON "ChargeItemDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___idnt_idx" ON "ChargeItemDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___idntTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___jurisdiction_idx" ON "ChargeItemDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition___jurisdictionTextTrgm_idx" ON "ChargeItemDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_publisher_idx" ON "ChargeItemDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_status_idx" ON "ChargeItemDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_title_idx" ON "ChargeItemDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_url_idx" ON "ChargeItemDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_version_idx" ON "ChargeItemDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItemDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_History_id_idx" ON "ChargeItemDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_History_lastUpdated_idx" ON "ChargeItemDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_History_versionId_idx" ON "ChargeItemDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ChargeItemDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ChargeItemDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_Refs_resourceId_targetId_code_idx" ON "ChargeItemDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ChargeItemDefinition_Refs_targetId_code_idx" ON "ChargeItemDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Claim" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "careTeam" TEXT[],
  "created" TIMESTAMPTZ,
  "detailUdi" TEXT[],
  "encounter" TEXT[],
  "enterer" TEXT,
  "facility" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "insurer" TEXT,
  "itemUdi" TEXT[],
  "patient" TEXT,
  "payee" TEXT,
  "__priority" UUID[],
  "__priorityText" TEXT[],
  "__prioritySort" TEXT,
  "procedureUdi" TEXT[],
  "provider" TEXT,
  "status" TEXT,
  "subdetailUdi" TEXT[],
  "use" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__careTeamIdentifierSort" TEXT,
  "__detailUdiIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__entererIdentifierSort" TEXT,
  "__facilityIdentifierSort" TEXT,
  "__insurerIdentifierSort" TEXT,
  "__itemUdiIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__payeeIdentifierSort" TEXT,
  "__procedureUdiIdentifierSort" TEXT,
  "__providerIdentifierSort" TEXT,
  "__subdetailUdiIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Claim_id_idx" ON "Claim" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_lastUpdated_idx" ON "Claim" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_projectId_lastUpdated_idx" ON "Claim" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_projectId_idx" ON "Claim" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim__source_idx" ON "Claim" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim__profile_idx" ON "Claim" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___version_idx" ON "Claim" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_compartments_idx" ON "Claim" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___sharedTokens_idx" ON "Claim" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___sharedTokensTextTrgm_idx" ON "Claim" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim____tag_idx" ON "Claim" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim____tagTextTrgm_idx" ON "Claim" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_careTeam_idx" ON "Claim" USING gin ("careTeam")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_created_idx" ON "Claim" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_detailUdi_idx" ON "Claim" USING gin ("detailUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_encounter_idx" ON "Claim" USING gin ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_enterer_idx" ON "Claim" ("enterer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_facility_idx" ON "Claim" ("facility")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___idnt_idx" ON "Claim" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___idntTextTrgm_idx" ON "Claim" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_insurer_idx" ON "Claim" ("insurer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_itemUdi_idx" ON "Claim" USING gin ("itemUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_patient_idx" ON "Claim" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_payee_idx" ON "Claim" ("payee")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___priority_idx" ON "Claim" USING gin ("__priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim___priorityTextTrgm_idx" ON "Claim" USING gin (token_array_to_text("__priorityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_procedureUdi_idx" ON "Claim" USING gin ("procedureUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_provider_idx" ON "Claim" ("provider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_status_idx" ON "Claim" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_subdetailUdi_idx" ON "Claim" USING gin ("subdetailUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_use_idx" ON "Claim" ("use")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Claim_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_History_id_idx" ON "Claim_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_History_lastUpdated_idx" ON "Claim_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Claim_History_versionId_idx" ON "Claim_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Claim_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Claim_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Claim_Refs_resourceId_targetId_code_idx" ON "Claim_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Claim_Refs_targetId_code_idx" ON "Claim_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClaimResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "created" TIMESTAMPTZ,
  "disposition" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "insurer" TEXT,
  "outcome" TEXT,
  "patient" TEXT,
  "paymentDate" DATE,
  "request" TEXT,
  "requestor" TEXT,
  "status" TEXT,
  "use" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__insurerIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT,
  "__requestorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_id_idx" ON "ClaimResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_lastUpdated_idx" ON "ClaimResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_projectId_lastUpdated_idx" ON "ClaimResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_projectId_idx" ON "ClaimResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse__source_idx" ON "ClaimResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse__profile_idx" ON "ClaimResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse___version_idx" ON "ClaimResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_compartments_idx" ON "ClaimResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse___sharedTokens_idx" ON "ClaimResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse___sharedTokensTextTrgm_idx" ON "ClaimResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse____tag_idx" ON "ClaimResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse____tagTextTrgm_idx" ON "ClaimResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_created_idx" ON "ClaimResponse" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_disposition_idx" ON "ClaimResponse" ("disposition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse___idnt_idx" ON "ClaimResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse___idntTextTrgm_idx" ON "ClaimResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_insurer_idx" ON "ClaimResponse" ("insurer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_outcome_idx" ON "ClaimResponse" ("outcome")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_patient_idx" ON "ClaimResponse" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_paymentDate_idx" ON "ClaimResponse" ("paymentDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_request_idx" ON "ClaimResponse" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_requestor_idx" ON "ClaimResponse" ("requestor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_status_idx" ON "ClaimResponse" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_use_idx" ON "ClaimResponse" ("use")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClaimResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_History_id_idx" ON "ClaimResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_History_lastUpdated_idx" ON "ClaimResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_History_versionId_idx" ON "ClaimResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClaimResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ClaimResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_Refs_resourceId_targetId_code_idx" ON "ClaimResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClaimResponse_Refs_targetId_code_idx" ON "ClaimResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClinicalImpression" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "patient" TEXT,
  "assessor" TEXT,
  "encounter" TEXT,
  "__findingCode" UUID[],
  "__findingCodeText" TEXT[],
  "__findingCodeSort" TEXT,
  "findingRef" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "investigation" TEXT[],
  "previous" TEXT,
  "problem" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "supportingInfo" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__assessorIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__findingRefIdentifierSort" TEXT,
  "__investigationIdentifierSort" TEXT,
  "__previousIdentifierSort" TEXT,
  "__problemIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT,
  "__supportingInfoIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_id_idx" ON "ClinicalImpression" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_lastUpdated_idx" ON "ClinicalImpression" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_projectId_lastUpdated_idx" ON "ClinicalImpression" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_projectId_idx" ON "ClinicalImpression" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression__source_idx" ON "ClinicalImpression" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression__profile_idx" ON "ClinicalImpression" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___version_idx" ON "ClinicalImpression" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_compartments_idx" ON "ClinicalImpression" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___sharedTokens_idx" ON "ClinicalImpression" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___sharedTokensTextTrgm_idx" ON "ClinicalImpression" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression____tag_idx" ON "ClinicalImpression" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression____tagTextTrgm_idx" ON "ClinicalImpression" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_date_idx" ON "ClinicalImpression" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_projectId_date_idx" ON "ClinicalImpression" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_patient_idx" ON "ClinicalImpression" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_assessor_idx" ON "ClinicalImpression" ("assessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_encounter_idx" ON "ClinicalImpression" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___findingCode_idx" ON "ClinicalImpression" USING gin ("__findingCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___findingCodeTextTrgm_idx" ON "ClinicalImpression" USING gin (token_array_to_text("__findingCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_findingRef_idx" ON "ClinicalImpression" USING gin ("findingRef")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___idnt_idx" ON "ClinicalImpression" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression___idntTextTrgm_idx" ON "ClinicalImpression" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_investigation_idx" ON "ClinicalImpression" USING gin ("investigation")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_previous_idx" ON "ClinicalImpression" ("previous")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_problem_idx" ON "ClinicalImpression" USING gin ("problem")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_status_idx" ON "ClinicalImpression" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_subject_idx" ON "ClinicalImpression" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_supportingInfo_idx" ON "ClinicalImpression" USING gin ("supportingInfo")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClinicalImpression_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_History_id_idx" ON "ClinicalImpression_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_History_lastUpdated_idx" ON "ClinicalImpression_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_History_versionId_idx" ON "ClinicalImpression_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClinicalImpression_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ClinicalImpression_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_Refs_resourceId_targetId_code_idx" ON "ClinicalImpression_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClinicalImpression_Refs_targetId_code_idx" ON "ClinicalImpression_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CodeSystem" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "code" TEXT[],
  "contentMode" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "language" TEXT[],
  "supplements" TEXT,
  "system" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__supplementsIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_id_idx" ON "CodeSystem" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_lastUpdated_idx" ON "CodeSystem" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_projectId_lastUpdated_idx" ON "CodeSystem" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_projectId_idx" ON "CodeSystem" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem__source_idx" ON "CodeSystem" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem__profile_idx" ON "CodeSystem" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___version_idx" ON "CodeSystem" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_compartments_idx" ON "CodeSystem" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___sharedTokens_idx" ON "CodeSystem" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___sharedTokensTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem____tag_idx" ON "CodeSystem" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem____tagTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___context_idx" ON "CodeSystem" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___contextTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_contextQuantity_idx" ON "CodeSystem" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___contextType_idx" ON "CodeSystem" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___contextTypeTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_date_idx" ON "CodeSystem" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_projectId_date_idx" ON "CodeSystem" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_description_idx" ON "CodeSystem" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___jurisdiction_idx" ON "CodeSystem" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___jurisdictionTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_name_idx" ON "CodeSystem" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_publisher_idx" ON "CodeSystem" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_status_idx" ON "CodeSystem" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_title_idx" ON "CodeSystem" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_url_idx" ON "CodeSystem" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_version_idx" ON "CodeSystem" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_code_idx" ON "CodeSystem" USING gin ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_contentMode_idx" ON "CodeSystem" ("contentMode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___idnt_idx" ON "CodeSystem" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem___idntTextTrgm_idx" ON "CodeSystem" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_language_idx" ON "CodeSystem" USING gin ("language")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_supplements_idx" ON "CodeSystem" ("supplements")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_system_idx" ON "CodeSystem" ("system")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CodeSystem_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_History_id_idx" ON "CodeSystem_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_History_lastUpdated_idx" ON "CodeSystem_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_History_versionId_idx" ON "CodeSystem_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CodeSystem_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CodeSystem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_Refs_resourceId_targetId_code_idx" ON "CodeSystem_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_Refs_targetId_code_idx" ON "CodeSystem_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Communication" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "basedOn" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "encounter" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "__medium" UUID[],
  "__mediumText" TEXT[],
  "__mediumSort" TEXT,
  "partOf" TEXT[],
  "patient" TEXT,
  "received" TIMESTAMPTZ,
  "recipient" TEXT[],
  "sender" TEXT,
  "sent" TIMESTAMPTZ,
  "status" TEXT,
  "subject" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__recipientIdentifierSort" TEXT,
  "__senderIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Communication_id_idx" ON "Communication" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_lastUpdated_idx" ON "Communication" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_projectId_lastUpdated_idx" ON "Communication" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_projectId_idx" ON "Communication" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication__source_idx" ON "Communication" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication__profile_idx" ON "Communication" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___version_idx" ON "Communication" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_compartments_idx" ON "Communication" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___sharedTokens_idx" ON "Communication" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___sharedTokensTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication____tag_idx" ON "Communication" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication____tagTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_basedOn_idx" ON "Communication" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___category_idx" ON "Communication" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___categoryTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_encounter_idx" ON "Communication" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___idnt_idx" ON "Communication" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___idntTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_instantiatesCanonical_idx" ON "Communication" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_instantiatesUri_idx" ON "Communication" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___medium_idx" ON "Communication" USING gin ("__medium")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___mediumTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("__mediumText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_partOf_idx" ON "Communication" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_patient_idx" ON "Communication" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_received_idx" ON "Communication" ("received")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_recipient_idx" ON "Communication" USING gin ("recipient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_sender_idx" ON "Communication" ("sender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_sent_idx" ON "Communication" ("sent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_projectId_sent_idx" ON "Communication" ("projectId", "sent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_status_idx" ON "Communication" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_subject_idx" ON "Communication" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___topic_idx" ON "Communication" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication___topicTextTrgm_idx" ON "Communication" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Communication_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_History_id_idx" ON "Communication_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_History_lastUpdated_idx" ON "Communication_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Communication_History_versionId_idx" ON "Communication_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Communication_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Communication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Communication_Refs_resourceId_targetId_code_idx" ON "Communication_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Communication_Refs_targetId_code_idx" ON "Communication_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CommunicationRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "authored" TIMESTAMPTZ,
  "basedOn" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "encounter" TEXT,
  "__groupIdentifier" UUID[],
  "__groupIdentifierText" TEXT[],
  "__groupIdentifierSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__medium" UUID[],
  "__mediumText" TEXT[],
  "__mediumSort" TEXT,
  "occurrence" TIMESTAMPTZ,
  "patient" TEXT,
  "priority" TEXT,
  "recipient" TEXT[],
  "replaces" TEXT[],
  "requester" TEXT,
  "sender" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "priorityOrder" INTEGER,
  "___compartmentIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__recipientIdentifierSort" TEXT,
  "__replacesIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__senderIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_id_idx" ON "CommunicationRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_lastUpdated_idx" ON "CommunicationRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_projectId_lastUpdated_idx" ON "CommunicationRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_projectId_idx" ON "CommunicationRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest__source_idx" ON "CommunicationRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest__profile_idx" ON "CommunicationRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___version_idx" ON "CommunicationRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_compartments_idx" ON "CommunicationRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___sharedTokens_idx" ON "CommunicationRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___sharedTokensTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest____tag_idx" ON "CommunicationRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest____tagTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_authored_idx" ON "CommunicationRequest" ("authored")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_basedOn_idx" ON "CommunicationRequest" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___category_idx" ON "CommunicationRequest" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___categoryTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_encounter_idx" ON "CommunicationRequest" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___groupIdnt_idx" ON "CommunicationRequest" USING gin ("__groupIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___groupIdntTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("__groupIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___idnt_idx" ON "CommunicationRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___idntTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___medium_idx" ON "CommunicationRequest" USING gin ("__medium")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest___mediumTextTrgm_idx" ON "CommunicationRequest" USING gin (token_array_to_text("__mediumText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_occurrence_idx" ON "CommunicationRequest" ("occurrence")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_patient_idx" ON "CommunicationRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_priority_idx" ON "CommunicationRequest" ("priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_recipient_idx" ON "CommunicationRequest" USING gin ("recipient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_replaces_idx" ON "CommunicationRequest" USING gin ("replaces")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_requester_idx" ON "CommunicationRequest" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_sender_idx" ON "CommunicationRequest" ("sender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_status_idx" ON "CommunicationRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_subject_idx" ON "CommunicationRequest" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_priorityOrder_idx" ON "CommunicationRequest" ("priorityOrder")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CommunicationRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_History_id_idx" ON "CommunicationRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_History_lastUpdated_idx" ON "CommunicationRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_History_versionId_idx" ON "CommunicationRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CommunicationRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CommunicationRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_Refs_resourceId_targetId_code_idx" ON "CommunicationRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CommunicationRequest_Refs_targetId_code_idx" ON "CommunicationRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CompartmentDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "url" TEXT,
  "version" TEXT,
  "code" TEXT,
  "resource" TEXT[],
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_id_idx" ON "CompartmentDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_lastUpdated_idx" ON "CompartmentDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_projectId_lastUpdated_idx" ON "CompartmentDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_projectId_idx" ON "CompartmentDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition__source_idx" ON "CompartmentDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition__profile_idx" ON "CompartmentDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___version_idx" ON "CompartmentDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_compartments_idx" ON "CompartmentDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___sharedTokens_idx" ON "CompartmentDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___sharedTokensTextTrgm_idx" ON "CompartmentDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition____tag_idx" ON "CompartmentDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition____tagTextTrgm_idx" ON "CompartmentDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___context_idx" ON "CompartmentDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___contextTextTrgm_idx" ON "CompartmentDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_contextQuantity_idx" ON "CompartmentDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___contextType_idx" ON "CompartmentDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition___contextTypeTextTrgm_idx" ON "CompartmentDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_date_idx" ON "CompartmentDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_projectId_date_idx" ON "CompartmentDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_description_idx" ON "CompartmentDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_name_idx" ON "CompartmentDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_publisher_idx" ON "CompartmentDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_status_idx" ON "CompartmentDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_url_idx" ON "CompartmentDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_version_idx" ON "CompartmentDefinition" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_code_idx" ON "CompartmentDefinition" ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_resource_idx" ON "CompartmentDefinition" USING gin ("resource")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CompartmentDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_History_id_idx" ON "CompartmentDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_History_lastUpdated_idx" ON "CompartmentDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_History_versionId_idx" ON "CompartmentDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CompartmentDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CompartmentDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_Refs_resourceId_targetId_code_idx" ON "CompartmentDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CompartmentDefinition_Refs_targetId_code_idx" ON "CompartmentDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Composition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "attester" TEXT[],
  "author" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "confidentiality" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "encounter" TEXT,
  "entry" TEXT[],
  "period" TIMESTAMPTZ[],
  "__relatedId" UUID[],
  "__relatedIdText" TEXT[],
  "__relatedIdSort" TEXT,
  "relatedRef" TEXT[],
  "__section" UUID[],
  "__sectionText" TEXT[],
  "__sectionSort" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "title" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__attesterIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__entryIdentifierSort" TEXT,
  "__relatedRefIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Composition_id_idx" ON "Composition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_lastUpdated_idx" ON "Composition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_projectId_lastUpdated_idx" ON "Composition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_projectId_idx" ON "Composition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition__source_idx" ON "Composition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition__profile_idx" ON "Composition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___version_idx" ON "Composition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_compartments_idx" ON "Composition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___sharedTokens_idx" ON "Composition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___sharedTokensTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition____tag_idx" ON "Composition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition____tagTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_date_idx" ON "Composition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_projectId_date_idx" ON "Composition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___idnt_idx" ON "Composition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___idntTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_patient_idx" ON "Composition" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___type_idx" ON "Composition" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___typeTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_attester_idx" ON "Composition" USING gin ("attester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_author_idx" ON "Composition" USING gin ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___category_idx" ON "Composition" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___categoryTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_confidentiality_idx" ON "Composition" ("confidentiality")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___context_idx" ON "Composition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___contextTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_encounter_idx" ON "Composition" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_entry_idx" ON "Composition" USING gin ("entry")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_period_idx" ON "Composition" USING gin ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___relatedId_idx" ON "Composition" USING gin ("__relatedId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___relatedIdTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__relatedIdText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_relatedRef_idx" ON "Composition" USING gin ("relatedRef")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___section_idx" ON "Composition" USING gin ("__section")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition___sectionTextTrgm_idx" ON "Composition" USING gin (token_array_to_text("__sectionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_status_idx" ON "Composition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_subject_idx" ON "Composition" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_title_idx" ON "Composition" ("title")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Composition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_History_id_idx" ON "Composition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_History_lastUpdated_idx" ON "Composition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Composition_History_versionId_idx" ON "Composition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Composition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Composition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Composition_Refs_resourceId_targetId_code_idx" ON "Composition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Composition_Refs_targetId_code_idx" ON "Composition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ConceptMap" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "dependson" TEXT[],
  "other" TEXT[],
  "product" TEXT[],
  "source" TEXT,
  "sourceCode" TEXT[],
  "sourceSystem" TEXT[],
  "sourceUri" TEXT,
  "target" TEXT,
  "targetCode" TEXT[],
  "targetSystem" TEXT[],
  "targetUri" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__otherIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT,
  "__sourceUriIdentifierSort" TEXT,
  "__targetIdentifierSort" TEXT,
  "__targetUriIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_id_idx" ON "ConceptMap" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_lastUpdated_idx" ON "ConceptMap" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_projectId_lastUpdated_idx" ON "ConceptMap" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_projectId_idx" ON "ConceptMap" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap__source_idx" ON "ConceptMap" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap__profile_idx" ON "ConceptMap" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___version_idx" ON "ConceptMap" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_compartments_idx" ON "ConceptMap" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___sharedTokens_idx" ON "ConceptMap" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___sharedTokensTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap____tag_idx" ON "ConceptMap" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap____tagTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___context_idx" ON "ConceptMap" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___contextTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_contextQuantity_idx" ON "ConceptMap" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___contextType_idx" ON "ConceptMap" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___contextTypeTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_date_idx" ON "ConceptMap" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_projectId_date_idx" ON "ConceptMap" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_description_idx" ON "ConceptMap" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___jurisdiction_idx" ON "ConceptMap" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___jurisdictionTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_name_idx" ON "ConceptMap" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_publisher_idx" ON "ConceptMap" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_status_idx" ON "ConceptMap" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_title_idx" ON "ConceptMap" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_url_idx" ON "ConceptMap" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_version_idx" ON "ConceptMap" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___idnt_idx" ON "ConceptMap" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap___idntTextTrgm_idx" ON "ConceptMap" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_dependson_idx" ON "ConceptMap" USING gin ("dependson")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_other_idx" ON "ConceptMap" USING gin ("other")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_product_idx" ON "ConceptMap" USING gin ("product")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_source_idx" ON "ConceptMap" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_sourceCode_idx" ON "ConceptMap" USING gin ("sourceCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_sourceSystem_idx" ON "ConceptMap" USING gin ("sourceSystem")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_sourceUri_idx" ON "ConceptMap" ("sourceUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_target_idx" ON "ConceptMap" ("target")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_targetCode_idx" ON "ConceptMap" USING gin ("targetCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_targetSystem_idx" ON "ConceptMap" USING gin ("targetSystem")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_targetUri_idx" ON "ConceptMap" ("targetUri")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ConceptMap_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_History_id_idx" ON "ConceptMap_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_History_lastUpdated_idx" ON "ConceptMap_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_History_versionId_idx" ON "ConceptMap_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ConceptMap_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ConceptMap_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_Refs_resourceId_targetId_code_idx" ON "ConceptMap_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ConceptMap_Refs_targetId_code_idx" ON "ConceptMap_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Condition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "abatementAge" DOUBLE PRECISION,
  "abatementDate" TIMESTAMPTZ,
  "abatementString" TEXT,
  "asserter" TEXT,
  "__bodySiteSort" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "__clinicalStatus" UUID[],
  "__clinicalStatusText" TEXT[],
  "__clinicalStatusSort" TEXT,
  "encounter" TEXT,
  "__evidenceSort" TEXT,
  "evidenceDetail" TEXT[],
  "onsetAge" DOUBLE PRECISION,
  "onsetDate" TIMESTAMPTZ,
  "onsetInfo" TEXT,
  "recordedDate" TIMESTAMPTZ,
  "__severity" UUID[],
  "__severityText" TEXT[],
  "__severitySort" TEXT,
  "__stage" UUID[],
  "__stageText" TEXT[],
  "__stageSort" TEXT,
  "subject" TEXT,
  "__verificationStatus" UUID[],
  "__verificationStatusText" TEXT[],
  "__verificationStatusSort" TEXT,
  "assertedDate" TIMESTAMPTZ,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__asserterIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__evidenceDetailIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Condition_id_idx" ON "Condition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_lastUpdated_idx" ON "Condition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_projectId_lastUpdated_idx" ON "Condition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_projectId_idx" ON "Condition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition__source_idx" ON "Condition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition__profile_idx" ON "Condition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___version_idx" ON "Condition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_compartments_idx" ON "Condition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___sharedTokens_idx" ON "Condition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___sharedTokensTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition____tag_idx" ON "Condition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition____tagTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___code_idx" ON "Condition" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___codeTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___idnt_idx" ON "Condition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___idntTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_patient_idx" ON "Condition" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_abatementAge_idx" ON "Condition" ("abatementAge")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_abatementDate_idx" ON "Condition" ("abatementDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_abatementString_idx" ON "Condition" ("abatementString")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_asserter_idx" ON "Condition" ("asserter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___category_idx" ON "Condition" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___categoryTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___clinicalStatus_idx" ON "Condition" USING gin ("__clinicalStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___clinicalStatusTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__clinicalStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_encounter_idx" ON "Condition" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_evidenceDetail_idx" ON "Condition" USING gin ("evidenceDetail")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_onsetAge_idx" ON "Condition" ("onsetAge")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_onsetDate_idx" ON "Condition" ("onsetDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_onsetInfo_idx" ON "Condition" ("onsetInfo")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_recordedDate_idx" ON "Condition" ("recordedDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___severity_idx" ON "Condition" USING gin ("__severity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___severityTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__severityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___stage_idx" ON "Condition" USING gin ("__stage")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___stageTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__stageText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_subject_idx" ON "Condition" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___verificationStatus_idx" ON "Condition" USING gin ("__verificationStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition___verificationStatusTextTrgm_idx" ON "Condition" USING gin (token_array_to_text("__verificationStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_assertedDate_idx" ON "Condition" ("assertedDate")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Condition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_History_id_idx" ON "Condition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_History_lastUpdated_idx" ON "Condition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Condition_History_versionId_idx" ON "Condition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Condition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Condition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Condition_Refs_resourceId_targetId_code_idx" ON "Condition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Condition_Refs_targetId_code_idx" ON "Condition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Consent" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__action" UUID[],
  "__actionText" TEXT[],
  "__actionSort" TEXT,
  "actor" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "consentor" TEXT[],
  "data" TEXT[],
  "organization" TEXT[],
  "period" TIMESTAMPTZ,
  "__purpose" UUID[],
  "__purposeText" TEXT[],
  "__purposeSort" TEXT,
  "__scope" UUID[],
  "__scopeText" TEXT[],
  "__scopeSort" TEXT,
  "__securityLabel" UUID[],
  "__securityLabelText" TEXT[],
  "__securityLabelSort" TEXT,
  "sourceReference" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__actorIdentifierSort" TEXT,
  "__consentorIdentifierSort" TEXT,
  "__dataIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT,
  "__sourceReferenceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Consent_id_idx" ON "Consent" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_lastUpdated_idx" ON "Consent" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_projectId_lastUpdated_idx" ON "Consent" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_projectId_idx" ON "Consent" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent__source_idx" ON "Consent" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent__profile_idx" ON "Consent" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___version_idx" ON "Consent" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_compartments_idx" ON "Consent" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___sharedTokens_idx" ON "Consent" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___sharedTokensTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent____tag_idx" ON "Consent" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent____tagTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_date_idx" ON "Consent" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_projectId_date_idx" ON "Consent" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___idnt_idx" ON "Consent" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___idntTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_patient_idx" ON "Consent" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___action_idx" ON "Consent" USING gin ("__action")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___actionTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__actionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_actor_idx" ON "Consent" USING gin ("actor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___category_idx" ON "Consent" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___categoryTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_consentor_idx" ON "Consent" USING gin ("consentor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_data_idx" ON "Consent" USING gin ("data")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_organization_idx" ON "Consent" USING gin ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_period_idx" ON "Consent" ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___purpose_idx" ON "Consent" USING gin ("__purpose")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___purposeTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__purposeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___scope_idx" ON "Consent" USING gin ("__scope")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___scopeTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__scopeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___securityLabel_idx" ON "Consent" USING gin ("__securityLabel")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent___securityLabelTextTrgm_idx" ON "Consent" USING gin (token_array_to_text("__securityLabelText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_sourceReference_idx" ON "Consent" ("sourceReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_status_idx" ON "Consent" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Consent_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_History_id_idx" ON "Consent_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_History_lastUpdated_idx" ON "Consent_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Consent_History_versionId_idx" ON "Consent_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Consent_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Consent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Consent_Refs_resourceId_targetId_code_idx" ON "Consent_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Consent_Refs_targetId_code_idx" ON "Consent_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Contract" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "authority" TEXT[],
  "domain" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "instantiates" TEXT,
  "issued" TIMESTAMPTZ,
  "patient" TEXT[],
  "signer" TEXT[],
  "status" TEXT,
  "subject" TEXT[],
  "url" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__authorityIdentifierSort" TEXT,
  "__domainIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__signerIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Contract_id_idx" ON "Contract" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_lastUpdated_idx" ON "Contract" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_projectId_lastUpdated_idx" ON "Contract" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_projectId_idx" ON "Contract" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract__source_idx" ON "Contract" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract__profile_idx" ON "Contract" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract___version_idx" ON "Contract" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_compartments_idx" ON "Contract" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract___sharedTokens_idx" ON "Contract" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract___sharedTokensTextTrgm_idx" ON "Contract" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract____tag_idx" ON "Contract" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract____tagTextTrgm_idx" ON "Contract" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_authority_idx" ON "Contract" USING gin ("authority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_domain_idx" ON "Contract" USING gin ("domain")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract___idnt_idx" ON "Contract" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract___idntTextTrgm_idx" ON "Contract" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_instantiates_idx" ON "Contract" ("instantiates")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_issued_idx" ON "Contract" ("issued")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_patient_idx" ON "Contract" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_signer_idx" ON "Contract" USING gin ("signer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_status_idx" ON "Contract" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_subject_idx" ON "Contract" USING gin ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_url_idx" ON "Contract" ("url")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Contract_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_History_id_idx" ON "Contract_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_History_lastUpdated_idx" ON "Contract_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Contract_History_versionId_idx" ON "Contract_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Contract_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Contract_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Contract_Refs_resourceId_targetId_code_idx" ON "Contract_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Contract_Refs_targetId_code_idx" ON "Contract_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Coverage" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "beneficiary" TEXT,
  "__classType" UUID[],
  "__classTypeText" TEXT[],
  "__classTypeSort" TEXT,
  "classValue" TEXT[],
  "dependent" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "payor" TEXT[],
  "policyHolder" TEXT,
  "status" TEXT,
  "subscriber" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__beneficiaryIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__payorIdentifierSort" TEXT,
  "__policyHolderIdentifierSort" TEXT,
  "__subscriberIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_id_idx" ON "Coverage" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_lastUpdated_idx" ON "Coverage" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_projectId_lastUpdated_idx" ON "Coverage" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_projectId_idx" ON "Coverage" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage__source_idx" ON "Coverage" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage__profile_idx" ON "Coverage" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___version_idx" ON "Coverage" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_compartments_idx" ON "Coverage" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___sharedTokens_idx" ON "Coverage" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___sharedTokensTextTrgm_idx" ON "Coverage" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage____tag_idx" ON "Coverage" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage____tagTextTrgm_idx" ON "Coverage" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_beneficiary_idx" ON "Coverage" ("beneficiary")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___classType_idx" ON "Coverage" USING gin ("__classType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___classTypeTextTrgm_idx" ON "Coverage" USING gin (token_array_to_text("__classTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_classValue_idx" ON "Coverage" USING gin ("classValue")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_dependent_idx" ON "Coverage" ("dependent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___idnt_idx" ON "Coverage" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___idntTextTrgm_idx" ON "Coverage" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_patient_idx" ON "Coverage" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_payor_idx" ON "Coverage" USING gin ("payor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_policyHolder_idx" ON "Coverage" ("policyHolder")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_status_idx" ON "Coverage" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_subscriber_idx" ON "Coverage" ("subscriber")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___type_idx" ON "Coverage" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage___typeTextTrgm_idx" ON "Coverage" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Coverage_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_History_id_idx" ON "Coverage_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_History_lastUpdated_idx" ON "Coverage_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_History_versionId_idx" ON "Coverage_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Coverage_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Coverage_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_Refs_resourceId_targetId_code_idx" ON "Coverage_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coverage_Refs_targetId_code_idx" ON "Coverage_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "created" TIMESTAMPTZ,
  "enterer" TEXT,
  "facility" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "provider" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__entererIdentifierSort" TEXT,
  "__facilityIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__providerIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_id_idx" ON "CoverageEligibilityRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_lastUpdated_idx" ON "CoverageEligibilityRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_projectId_lastUpdated_idx" ON "CoverageEligibilityRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_projectId_idx" ON "CoverageEligibilityRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest__source_idx" ON "CoverageEligibilityRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest__profile_idx" ON "CoverageEligibilityRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest___version_idx" ON "CoverageEligibilityRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_compartments_idx" ON "CoverageEligibilityRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest___sharedTokens_idx" ON "CoverageEligibilityRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest___sharedTokensTextTrgm_idx" ON "CoverageEligibilityRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest____tag_idx" ON "CoverageEligibilityRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest____tagTextTrgm_idx" ON "CoverageEligibilityRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_created_idx" ON "CoverageEligibilityRequest" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_enterer_idx" ON "CoverageEligibilityRequest" ("enterer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_facility_idx" ON "CoverageEligibilityRequest" ("facility")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest___idnt_idx" ON "CoverageEligibilityRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest___idntTextTrgm_idx" ON "CoverageEligibilityRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_patient_idx" ON "CoverageEligibilityRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_provider_idx" ON "CoverageEligibilityRequest" ("provider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_status_idx" ON "CoverageEligibilityRequest" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_History_id_idx" ON "CoverageEligibilityRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_History_lastUpdated_idx" ON "CoverageEligibilityRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_History_versionId_idx" ON "CoverageEligibilityRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CoverageEligibilityRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_Refs_resourceId_targetId_code_idx" ON "CoverageEligibilityRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityRequest_Refs_targetId_code_idx" ON "CoverageEligibilityRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "created" TIMESTAMPTZ,
  "disposition" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "insurer" TEXT,
  "outcome" TEXT,
  "patient" TEXT,
  "request" TEXT,
  "requestor" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__insurerIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT,
  "__requestorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_id_idx" ON "CoverageEligibilityResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_lastUpdated_idx" ON "CoverageEligibilityResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_projectId_lastUpdated_idx" ON "CoverageEligibilityResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_projectId_idx" ON "CoverageEligibilityResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse__source_idx" ON "CoverageEligibilityResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse__profile_idx" ON "CoverageEligibilityResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse___version_idx" ON "CoverageEligibilityResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_compartments_idx" ON "CoverageEligibilityResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse___sharedTokens_idx" ON "CoverageEligibilityResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse___sharedTokensTextTrgm_idx" ON "CoverageEligibilityResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse____tag_idx" ON "CoverageEligibilityResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse____tagTextTrgm_idx" ON "CoverageEligibilityResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_created_idx" ON "CoverageEligibilityResponse" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_disposition_idx" ON "CoverageEligibilityResponse" ("disposition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse___idnt_idx" ON "CoverageEligibilityResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse___idntTextTrgm_idx" ON "CoverageEligibilityResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_insurer_idx" ON "CoverageEligibilityResponse" ("insurer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_outcome_idx" ON "CoverageEligibilityResponse" ("outcome")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_patient_idx" ON "CoverageEligibilityResponse" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_request_idx" ON "CoverageEligibilityResponse" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_requestor_idx" ON "CoverageEligibilityResponse" ("requestor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_status_idx" ON "CoverageEligibilityResponse" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_History_id_idx" ON "CoverageEligibilityResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_History_lastUpdated_idx" ON "CoverageEligibilityResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_History_versionId_idx" ON "CoverageEligibilityResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CoverageEligibilityResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "CoverageEligibilityResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_Refs_resourceId_targetId_code_idx" ON "CoverageEligibilityResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "CoverageEligibilityResponse_Refs_targetId_code_idx" ON "CoverageEligibilityResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DetectedIssue" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "author" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "identified" TIMESTAMPTZ,
  "implicated" TEXT[],
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__implicatedIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_id_idx" ON "DetectedIssue" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_lastUpdated_idx" ON "DetectedIssue" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_projectId_lastUpdated_idx" ON "DetectedIssue" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_projectId_idx" ON "DetectedIssue" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue__source_idx" ON "DetectedIssue" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue__profile_idx" ON "DetectedIssue" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___version_idx" ON "DetectedIssue" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_compartments_idx" ON "DetectedIssue" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___sharedTokens_idx" ON "DetectedIssue" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___sharedTokensTextTrgm_idx" ON "DetectedIssue" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue____tag_idx" ON "DetectedIssue" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue____tagTextTrgm_idx" ON "DetectedIssue" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___idnt_idx" ON "DetectedIssue" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___idntTextTrgm_idx" ON "DetectedIssue" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_patient_idx" ON "DetectedIssue" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_author_idx" ON "DetectedIssue" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___code_idx" ON "DetectedIssue" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue___codeTextTrgm_idx" ON "DetectedIssue" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_identified_idx" ON "DetectedIssue" ("identified")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_implicated_idx" ON "DetectedIssue" USING gin ("implicated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_status_idx" ON "DetectedIssue" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DetectedIssue_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_History_id_idx" ON "DetectedIssue_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_History_lastUpdated_idx" ON "DetectedIssue_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_History_versionId_idx" ON "DetectedIssue_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DetectedIssue_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DetectedIssue_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_Refs_resourceId_targetId_code_idx" ON "DetectedIssue_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DetectedIssue_Refs_targetId_code_idx" ON "DetectedIssue_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Device" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "deviceName" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT,
  "manufacturer" TEXT,
  "model" TEXT,
  "organization" TEXT,
  "patient" TEXT,
  "status" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "udiCarrier" TEXT[],
  "udiDi" TEXT[],
  "url" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Device_id_idx" ON "Device" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_lastUpdated_idx" ON "Device" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_projectId_lastUpdated_idx" ON "Device" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_projectId_idx" ON "Device" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device__source_idx" ON "Device" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device__profile_idx" ON "Device" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___version_idx" ON "Device" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_compartments_idx" ON "Device" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___sharedTokens_idx" ON "Device" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___sharedTokensTextTrgm_idx" ON "Device" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device____tag_idx" ON "Device" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device____tagTextTrgm_idx" ON "Device" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_deviceName_idx" ON "Device" USING gin ("deviceName")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___idnt_idx" ON "Device" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___idntTextTrgm_idx" ON "Device" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_location_idx" ON "Device" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_manufacturer_idx" ON "Device" ("manufacturer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_model_idx" ON "Device" ("model")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_organization_idx" ON "Device" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_patient_idx" ON "Device" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_status_idx" ON "Device" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___type_idx" ON "Device" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device___typeTextTrgm_idx" ON "Device" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_udiCarrier_idx" ON "Device" USING gin ("udiCarrier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_udiDi_idx" ON "Device" USING gin ("udiDi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_url_idx" ON "Device" ("url")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Device_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_History_id_idx" ON "Device_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_History_lastUpdated_idx" ON "Device_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Device_History_versionId_idx" ON "Device_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Device_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Device_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Device_Refs_resourceId_targetId_code_idx" ON "Device_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Device_Refs_targetId_code_idx" ON "Device_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "parent" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "__classification" UUID[],
  "__classificationText" TEXT[],
  "__classificationSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__parentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_id_idx" ON "DeviceDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_lastUpdated_idx" ON "DeviceDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_projectId_lastUpdated_idx" ON "DeviceDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_projectId_idx" ON "DeviceDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition__source_idx" ON "DeviceDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition__profile_idx" ON "DeviceDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___version_idx" ON "DeviceDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_compartments_idx" ON "DeviceDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___sharedTokens_idx" ON "DeviceDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___sharedTokensTextTrgm_idx" ON "DeviceDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition____tag_idx" ON "DeviceDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition____tagTextTrgm_idx" ON "DeviceDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___idnt_idx" ON "DeviceDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___idntTextTrgm_idx" ON "DeviceDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_parent_idx" ON "DeviceDefinition" ("parent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___type_idx" ON "DeviceDefinition" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___typeTextTrgm_idx" ON "DeviceDefinition" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___classification_idx" ON "DeviceDefinition" USING gin ("__classification")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition___classificationTextTrgm_idx" ON "DeviceDefinition" USING gin (token_array_to_text("__classificationText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_History_id_idx" ON "DeviceDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_History_lastUpdated_idx" ON "DeviceDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_History_versionId_idx" ON "DeviceDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DeviceDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_Refs_resourceId_targetId_code_idx" ON "DeviceDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceDefinition_Refs_targetId_code_idx" ON "DeviceDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceMetric" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "category" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "parent" TEXT,
  "source" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__parentIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_id_idx" ON "DeviceMetric" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_lastUpdated_idx" ON "DeviceMetric" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_projectId_lastUpdated_idx" ON "DeviceMetric" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_projectId_idx" ON "DeviceMetric" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric__source_idx" ON "DeviceMetric" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric__profile_idx" ON "DeviceMetric" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___version_idx" ON "DeviceMetric" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_compartments_idx" ON "DeviceMetric" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___sharedTokens_idx" ON "DeviceMetric" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___sharedTokensTextTrgm_idx" ON "DeviceMetric" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric____tag_idx" ON "DeviceMetric" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric____tagTextTrgm_idx" ON "DeviceMetric" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_category_idx" ON "DeviceMetric" ("category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___idnt_idx" ON "DeviceMetric" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___idntTextTrgm_idx" ON "DeviceMetric" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_parent_idx" ON "DeviceMetric" ("parent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_source_idx" ON "DeviceMetric" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___type_idx" ON "DeviceMetric" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric___typeTextTrgm_idx" ON "DeviceMetric" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceMetric_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_History_id_idx" ON "DeviceMetric_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_History_lastUpdated_idx" ON "DeviceMetric_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_History_versionId_idx" ON "DeviceMetric_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceMetric_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DeviceMetric_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_Refs_resourceId_targetId_code_idx" ON "DeviceMetric_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceMetric_Refs_targetId_code_idx" ON "DeviceMetric_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "authoredOn" TIMESTAMPTZ,
  "basedOn" TEXT[],
  "device" TEXT,
  "eventDate" TIMESTAMPTZ,
  "__groupIdentifier" UUID[],
  "__groupIdentifierText" TEXT[],
  "__groupIdentifierSort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "insurance" TEXT[],
  "intent" TEXT,
  "performer" TEXT,
  "priorRequest" TEXT[],
  "requester" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__deviceIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__insuranceIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__priorRequestIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_id_idx" ON "DeviceRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_lastUpdated_idx" ON "DeviceRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_projectId_lastUpdated_idx" ON "DeviceRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_projectId_idx" ON "DeviceRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest__source_idx" ON "DeviceRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest__profile_idx" ON "DeviceRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___version_idx" ON "DeviceRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_compartments_idx" ON "DeviceRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___sharedTokens_idx" ON "DeviceRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___sharedTokensTextTrgm_idx" ON "DeviceRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest____tag_idx" ON "DeviceRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest____tagTextTrgm_idx" ON "DeviceRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___code_idx" ON "DeviceRequest" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___codeTextTrgm_idx" ON "DeviceRequest" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___idnt_idx" ON "DeviceRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___idntTextTrgm_idx" ON "DeviceRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_patient_idx" ON "DeviceRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_encounter_idx" ON "DeviceRequest" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_authoredOn_idx" ON "DeviceRequest" ("authoredOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_basedOn_idx" ON "DeviceRequest" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_device_idx" ON "DeviceRequest" ("device")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_eventDate_idx" ON "DeviceRequest" ("eventDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___groupIdnt_idx" ON "DeviceRequest" USING gin ("__groupIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest___groupIdntTextTrgm_idx" ON "DeviceRequest" USING gin (token_array_to_text("__groupIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_instantiatesCanonical_idx" ON "DeviceRequest" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_instantiatesUri_idx" ON "DeviceRequest" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_insurance_idx" ON "DeviceRequest" USING gin ("insurance")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_intent_idx" ON "DeviceRequest" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_performer_idx" ON "DeviceRequest" ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_priorRequest_idx" ON "DeviceRequest" USING gin ("priorRequest")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_requester_idx" ON "DeviceRequest" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_status_idx" ON "DeviceRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_subject_idx" ON "DeviceRequest" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_History_id_idx" ON "DeviceRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_History_lastUpdated_idx" ON "DeviceRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_History_versionId_idx" ON "DeviceRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DeviceRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_Refs_resourceId_targetId_code_idx" ON "DeviceRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceRequest_Refs_targetId_code_idx" ON "DeviceRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceUseStatement" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "patient" TEXT,
  "device" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__deviceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_id_idx" ON "DeviceUseStatement" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_lastUpdated_idx" ON "DeviceUseStatement" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_projectId_lastUpdated_idx" ON "DeviceUseStatement" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_projectId_idx" ON "DeviceUseStatement" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement__source_idx" ON "DeviceUseStatement" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement__profile_idx" ON "DeviceUseStatement" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement___version_idx" ON "DeviceUseStatement" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_compartments_idx" ON "DeviceUseStatement" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement___sharedTokens_idx" ON "DeviceUseStatement" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement___sharedTokensTextTrgm_idx" ON "DeviceUseStatement" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement____tag_idx" ON "DeviceUseStatement" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement____tagTextTrgm_idx" ON "DeviceUseStatement" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_patient_idx" ON "DeviceUseStatement" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_device_idx" ON "DeviceUseStatement" ("device")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement___idnt_idx" ON "DeviceUseStatement" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement___idntTextTrgm_idx" ON "DeviceUseStatement" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_subject_idx" ON "DeviceUseStatement" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceUseStatement_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_History_id_idx" ON "DeviceUseStatement_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_History_lastUpdated_idx" ON "DeviceUseStatement_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_History_versionId_idx" ON "DeviceUseStatement_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DeviceUseStatement_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DeviceUseStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_Refs_resourceId_targetId_code_idx" ON "DeviceUseStatement_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DeviceUseStatement_Refs_targetId_code_idx" ON "DeviceUseStatement_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DiagnosticReport" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "basedOn" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "__conclusionSort" TEXT,
  "issued" TIMESTAMPTZ,
  "media" TEXT[],
  "performer" TEXT[],
  "result" TEXT[],
  "resultsInterpreter" TEXT[],
  "specimen" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "study" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__mediaIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__resultIdentifier" UUID[],
  "__resultIdentifierText" TEXT[],
  "__resultIdentifierSort" TEXT,
  "__resultsInterpreterIdentifierSort" TEXT,
  "__specimenIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT,
  "__studyIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_id_idx" ON "DiagnosticReport" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_lastUpdated_idx" ON "DiagnosticReport" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_projectId_lastUpdated_idx" ON "DiagnosticReport" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_projectId_idx" ON "DiagnosticReport" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport__source_idx" ON "DiagnosticReport" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport__profile_idx" ON "DiagnosticReport" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___version_idx" ON "DiagnosticReport" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_compartments_idx" ON "DiagnosticReport" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___sharedTokens_idx" ON "DiagnosticReport" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___sharedTokensTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport____tag_idx" ON "DiagnosticReport" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport____tagTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___code_idx" ON "DiagnosticReport" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___codeTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_date_idx" ON "DiagnosticReport" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_projectId_date_idx" ON "DiagnosticReport" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___idnt_idx" ON "DiagnosticReport" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___idntTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_patient_idx" ON "DiagnosticReport" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_encounter_idx" ON "DiagnosticReport" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_basedOn_idx" ON "DiagnosticReport" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___category_idx" ON "DiagnosticReport" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___categoryTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_issued_idx" ON "DiagnosticReport" ("issued")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_media_idx" ON "DiagnosticReport" USING gin ("media")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_performer_idx" ON "DiagnosticReport" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_result_idx" ON "DiagnosticReport" USING gin ("result")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_resultsInterpreter_idx" ON "DiagnosticReport" USING gin ("resultsInterpreter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_specimen_idx" ON "DiagnosticReport" USING gin ("specimen")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_status_idx" ON "DiagnosticReport" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_subject_idx" ON "DiagnosticReport" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_study_idx" ON "DiagnosticReport" USING gin ("study")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___resultIdnt_idx" ON "DiagnosticReport" USING gin ("__resultIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport___resultIdntTextTrgm_idx" ON "DiagnosticReport" USING gin (token_array_to_text("__resultIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DiagnosticReport_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_History_id_idx" ON "DiagnosticReport_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_History_lastUpdated_idx" ON "DiagnosticReport_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_History_versionId_idx" ON "DiagnosticReport_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DiagnosticReport_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DiagnosticReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_Refs_resourceId_targetId_code_idx" ON "DiagnosticReport_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DiagnosticReport_Refs_targetId_code_idx" ON "DiagnosticReport_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentManifest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "author" TEXT[],
  "created" TIMESTAMPTZ,
  "description" TEXT,
  "item" TEXT[],
  "recipient" TEXT[],
  "__relatedId" UUID[],
  "__relatedIdText" TEXT[],
  "__relatedIdSort" TEXT,
  "relatedRef" TEXT[],
  "source" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__itemIdentifierSort" TEXT,
  "__recipientIdentifierSort" TEXT,
  "__relatedRefIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_id_idx" ON "DocumentManifest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_lastUpdated_idx" ON "DocumentManifest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_projectId_lastUpdated_idx" ON "DocumentManifest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_projectId_idx" ON "DocumentManifest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest__source_idx" ON "DocumentManifest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest__profile_idx" ON "DocumentManifest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___version_idx" ON "DocumentManifest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_compartments_idx" ON "DocumentManifest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___sharedTokens_idx" ON "DocumentManifest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___sharedTokensTextTrgm_idx" ON "DocumentManifest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest____tag_idx" ON "DocumentManifest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest____tagTextTrgm_idx" ON "DocumentManifest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___idnt_idx" ON "DocumentManifest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___idntTextTrgm_idx" ON "DocumentManifest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_patient_idx" ON "DocumentManifest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___type_idx" ON "DocumentManifest" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___typeTextTrgm_idx" ON "DocumentManifest" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_author_idx" ON "DocumentManifest" USING gin ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_created_idx" ON "DocumentManifest" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_description_idx" ON "DocumentManifest" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_item_idx" ON "DocumentManifest" USING gin ("item")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_recipient_idx" ON "DocumentManifest" USING gin ("recipient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___relatedId_idx" ON "DocumentManifest" USING gin ("__relatedId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest___relatedIdTextTrgm_idx" ON "DocumentManifest" USING gin (token_array_to_text("__relatedIdText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_relatedRef_idx" ON "DocumentManifest" USING gin ("relatedRef")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_source_idx" ON "DocumentManifest" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_status_idx" ON "DocumentManifest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_subject_idx" ON "DocumentManifest" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentManifest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_History_id_idx" ON "DocumentManifest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_History_lastUpdated_idx" ON "DocumentManifest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_History_versionId_idx" ON "DocumentManifest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentManifest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DocumentManifest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_Refs_resourceId_targetId_code_idx" ON "DocumentManifest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentManifest_Refs_targetId_code_idx" ON "DocumentManifest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentReference" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "encounter" TEXT[],
  "authenticator" TEXT,
  "author" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "contenttype" TEXT[],
  "custodian" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__eventSort" TEXT,
  "__facility" UUID[],
  "__facilityText" TEXT[],
  "__facilitySort" TEXT,
  "__format" UUID[],
  "__formatText" TEXT[],
  "__formatSort" TEXT,
  "language" TEXT[],
  "location" TEXT[],
  "period" TIMESTAMPTZ,
  "related" TEXT[],
  "relatesto" TEXT[],
  "relation" TEXT[],
  "__securityLabel" UUID[],
  "__securityLabelText" TEXT[],
  "__securityLabelSort" TEXT,
  "__settingSort" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__authenticatorIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__custodianIdentifierSort" TEXT,
  "__relatedIdentifierSort" TEXT,
  "__relatestoIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_id_idx" ON "DocumentReference" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_lastUpdated_idx" ON "DocumentReference" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_projectId_lastUpdated_idx" ON "DocumentReference" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_projectId_idx" ON "DocumentReference" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference__source_idx" ON "DocumentReference" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference__profile_idx" ON "DocumentReference" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___version_idx" ON "DocumentReference" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_compartments_idx" ON "DocumentReference" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___sharedTokens_idx" ON "DocumentReference" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___sharedTokensTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference____tag_idx" ON "DocumentReference" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference____tagTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___idnt_idx" ON "DocumentReference" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___idntTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_patient_idx" ON "DocumentReference" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___type_idx" ON "DocumentReference" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___typeTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_encounter_idx" ON "DocumentReference" USING gin ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_authenticator_idx" ON "DocumentReference" ("authenticator")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_author_idx" ON "DocumentReference" USING gin ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___category_idx" ON "DocumentReference" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___categoryTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_contenttype_idx" ON "DocumentReference" USING gin ("contenttype")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_custodian_idx" ON "DocumentReference" ("custodian")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_date_idx" ON "DocumentReference" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_projectId_date_idx" ON "DocumentReference" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_description_idx" ON "DocumentReference" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___facility_idx" ON "DocumentReference" USING gin ("__facility")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___facilityTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__facilityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___format_idx" ON "DocumentReference" USING gin ("__format")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___formatTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__formatText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_language_idx" ON "DocumentReference" USING gin ("language")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_location_idx" ON "DocumentReference" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_period_idx" ON "DocumentReference" ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_related_idx" ON "DocumentReference" USING gin ("related")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_relatesto_idx" ON "DocumentReference" USING gin ("relatesto")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_relation_idx" ON "DocumentReference" USING gin ("relation")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___securityLabel_idx" ON "DocumentReference" USING gin ("__securityLabel")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference___securityLabelTextTrgm_idx" ON "DocumentReference" USING gin (token_array_to_text("__securityLabelText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_status_idx" ON "DocumentReference" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_subject_idx" ON "DocumentReference" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentReference_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_History_id_idx" ON "DocumentReference_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_History_lastUpdated_idx" ON "DocumentReference_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_History_versionId_idx" ON "DocumentReference_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DocumentReference_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DocumentReference_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_Refs_resourceId_targetId_code_idx" ON "DocumentReference_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DocumentReference_Refs_targetId_code_idx" ON "DocumentReference_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_id_idx" ON "EffectEvidenceSynthesis" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_lastUpdated_idx" ON "EffectEvidenceSynthesis" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_projectId_lastUpdated_idx" ON "EffectEvidenceSynthesis" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_projectId_idx" ON "EffectEvidenceSynthesis" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis__source_idx" ON "EffectEvidenceSynthesis" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis__profile_idx" ON "EffectEvidenceSynthesis" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___version_idx" ON "EffectEvidenceSynthesis" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_compartments_idx" ON "EffectEvidenceSynthesis" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___sharedTokens_idx" ON "EffectEvidenceSynthesis" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___sharedTokensTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis____tag_idx" ON "EffectEvidenceSynthesis" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis____tagTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___context_idx" ON "EffectEvidenceSynthesis" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___contextTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_contextQuantity_idx" ON "EffectEvidenceSynthesis" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___contextType_idx" ON "EffectEvidenceSynthesis" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___contextTypeTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_date_idx" ON "EffectEvidenceSynthesis" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_projectId_date_idx" ON "EffectEvidenceSynthesis" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_description_idx" ON "EffectEvidenceSynthesis" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_effective_idx" ON "EffectEvidenceSynthesis" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___idnt_idx" ON "EffectEvidenceSynthesis" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___idntTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___jurisdiction_idx" ON "EffectEvidenceSynthesis" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis___jurisdictionTextTrgm_idx" ON "EffectEvidenceSynthesis" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_name_idx" ON "EffectEvidenceSynthesis" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_publisher_idx" ON "EffectEvidenceSynthesis" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_status_idx" ON "EffectEvidenceSynthesis" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_title_idx" ON "EffectEvidenceSynthesis" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_url_idx" ON "EffectEvidenceSynthesis" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_version_idx" ON "EffectEvidenceSynthesis" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_History_id_idx" ON "EffectEvidenceSynthesis_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_History_lastUpdated_idx" ON "EffectEvidenceSynthesis_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_History_versionId_idx" ON "EffectEvidenceSynthesis_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EffectEvidenceSynthesis_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EffectEvidenceSynthesis_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_Refs_resourceId_targetId_code_idx" ON "EffectEvidenceSynthesis_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EffectEvidenceSynthesis_Refs_targetId_code_idx" ON "EffectEvidenceSynthesis_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Encounter" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "account" TEXT[],
  "appointment" TEXT[],
  "basedOn" TEXT[],
  "__class" UUID[],
  "__classText" TEXT[],
  "__classSort" TEXT,
  "diagnosis" TEXT[],
  "episodeOfCare" TEXT[],
  "length" DOUBLE PRECISION,
  "location" TEXT[],
  "locationPeriod" TIMESTAMPTZ[],
  "partOf" TEXT,
  "participant" TEXT[],
  "__participantType" UUID[],
  "__participantTypeText" TEXT[],
  "__participantTypeSort" TEXT,
  "practitioner" TEXT[],
  "__reasonCode" UUID[],
  "__reasonCodeText" TEXT[],
  "__reasonCodeSort" TEXT,
  "reasonReference" TEXT[],
  "serviceProvider" TEXT,
  "__specialArrangementSort" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "__dischargeDisposition" UUID[],
  "__dischargeDispositionText" TEXT[],
  "__dischargeDispositionSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__accountIdentifierSort" TEXT,
  "__appointmentIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__diagnosisIdentifierSort" TEXT,
  "__episodeOfCareIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__participantIdentifierSort" TEXT,
  "__practitionerIdentifierSort" TEXT,
  "__reasonReferenceIdentifierSort" TEXT,
  "__serviceProviderIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_id_idx" ON "Encounter" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_lastUpdated_idx" ON "Encounter" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_projectId_lastUpdated_idx" ON "Encounter" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_projectId_idx" ON "Encounter" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter__source_idx" ON "Encounter" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter__profile_idx" ON "Encounter" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___version_idx" ON "Encounter" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_compartments_idx" ON "Encounter" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___sharedTokens_idx" ON "Encounter" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___sharedTokensTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter____tag_idx" ON "Encounter" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter____tagTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_date_idx" ON "Encounter" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_projectId_date_idx" ON "Encounter" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___idnt_idx" ON "Encounter" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___idntTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_patient_idx" ON "Encounter" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___type_idx" ON "Encounter" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___typeTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_account_idx" ON "Encounter" USING gin ("account")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_appointment_idx" ON "Encounter" USING gin ("appointment")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_basedOn_idx" ON "Encounter" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___class_idx" ON "Encounter" USING gin ("__class")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___classTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__classText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_diagnosis_idx" ON "Encounter" USING gin ("diagnosis")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_episodeOfCare_idx" ON "Encounter" USING gin ("episodeOfCare")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_length_idx" ON "Encounter" ("length")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_location_idx" ON "Encounter" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_locationPeriod_idx" ON "Encounter" USING gin ("locationPeriod")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_partOf_idx" ON "Encounter" ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_participant_idx" ON "Encounter" USING gin ("participant")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___participantType_idx" ON "Encounter" USING gin ("__participantType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___participantTypeTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__participantTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_practitioner_idx" ON "Encounter" USING gin ("practitioner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___reasonCode_idx" ON "Encounter" USING gin ("__reasonCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___reasonCodeTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__reasonCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_reasonReference_idx" ON "Encounter" USING gin ("reasonReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_serviceProvider_idx" ON "Encounter" ("serviceProvider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_status_idx" ON "Encounter" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_subject_idx" ON "Encounter" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___dischargeDisposition_idx" ON "Encounter" USING gin ("__dischargeDisposition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter___dischargeDispositionTextTrgm_idx" ON "Encounter" USING gin (token_array_to_text("__dischargeDispositionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_compartments_deleted_appointment_idx" ON "Encounter" USING gin ("compartments", "deleted", "appointment")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Encounter_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_History_id_idx" ON "Encounter_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_History_lastUpdated_idx" ON "Encounter_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_History_versionId_idx" ON "Encounter_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Encounter_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Encounter_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_Refs_resourceId_targetId_code_idx" ON "Encounter_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Encounter_Refs_targetId_code_idx" ON "Encounter_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Endpoint" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__connectionType" UUID[],
  "__connectionTypeText" TEXT[],
  "__connectionTypeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "organization" TEXT,
  "__payloadType" UUID[],
  "__payloadTypeText" TEXT[],
  "__payloadTypeSort" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_id_idx" ON "Endpoint" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_lastUpdated_idx" ON "Endpoint" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_projectId_lastUpdated_idx" ON "Endpoint" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_projectId_idx" ON "Endpoint" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint__source_idx" ON "Endpoint" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint__profile_idx" ON "Endpoint" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___version_idx" ON "Endpoint" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_compartments_idx" ON "Endpoint" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___sharedTokens_idx" ON "Endpoint" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___sharedTokensTextTrgm_idx" ON "Endpoint" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint____tag_idx" ON "Endpoint" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint____tagTextTrgm_idx" ON "Endpoint" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___connectionType_idx" ON "Endpoint" USING gin ("__connectionType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___connectionTypeTextTrgm_idx" ON "Endpoint" USING gin (token_array_to_text("__connectionTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___idnt_idx" ON "Endpoint" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___idntTextTrgm_idx" ON "Endpoint" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_name_idx" ON "Endpoint" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_organization_idx" ON "Endpoint" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___payloadType_idx" ON "Endpoint" USING gin ("__payloadType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint___payloadTypeTextTrgm_idx" ON "Endpoint" USING gin (token_array_to_text("__payloadTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_status_idx" ON "Endpoint" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Endpoint_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_History_id_idx" ON "Endpoint_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_History_lastUpdated_idx" ON "Endpoint_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_History_versionId_idx" ON "Endpoint_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Endpoint_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Endpoint_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_Refs_resourceId_targetId_code_idx" ON "Endpoint_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Endpoint_Refs_targetId_code_idx" ON "Endpoint_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_id_idx" ON "EnrollmentRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_lastUpdated_idx" ON "EnrollmentRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_projectId_lastUpdated_idx" ON "EnrollmentRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_projectId_idx" ON "EnrollmentRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest__source_idx" ON "EnrollmentRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest__profile_idx" ON "EnrollmentRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest___version_idx" ON "EnrollmentRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_compartments_idx" ON "EnrollmentRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest___sharedTokens_idx" ON "EnrollmentRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest___sharedTokensTextTrgm_idx" ON "EnrollmentRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest____tag_idx" ON "EnrollmentRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest____tagTextTrgm_idx" ON "EnrollmentRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest___idnt_idx" ON "EnrollmentRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest___idntTextTrgm_idx" ON "EnrollmentRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_patient_idx" ON "EnrollmentRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_status_idx" ON "EnrollmentRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_subject_idx" ON "EnrollmentRequest" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_History_id_idx" ON "EnrollmentRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_History_lastUpdated_idx" ON "EnrollmentRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_History_versionId_idx" ON "EnrollmentRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EnrollmentRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_Refs_resourceId_targetId_code_idx" ON "EnrollmentRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentRequest_Refs_targetId_code_idx" ON "EnrollmentRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "request" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_id_idx" ON "EnrollmentResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_lastUpdated_idx" ON "EnrollmentResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_projectId_lastUpdated_idx" ON "EnrollmentResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_projectId_idx" ON "EnrollmentResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse__source_idx" ON "EnrollmentResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse__profile_idx" ON "EnrollmentResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse___version_idx" ON "EnrollmentResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_compartments_idx" ON "EnrollmentResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse___sharedTokens_idx" ON "EnrollmentResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse___sharedTokensTextTrgm_idx" ON "EnrollmentResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse____tag_idx" ON "EnrollmentResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse____tagTextTrgm_idx" ON "EnrollmentResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse___idnt_idx" ON "EnrollmentResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse___idntTextTrgm_idx" ON "EnrollmentResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_request_idx" ON "EnrollmentResponse" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_status_idx" ON "EnrollmentResponse" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_History_id_idx" ON "EnrollmentResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_History_lastUpdated_idx" ON "EnrollmentResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_History_versionId_idx" ON "EnrollmentResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EnrollmentResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EnrollmentResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_Refs_resourceId_targetId_code_idx" ON "EnrollmentResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EnrollmentResponse_Refs_targetId_code_idx" ON "EnrollmentResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EpisodeOfCare" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "careManager" TEXT,
  "condition" TEXT[],
  "incomingReferral" TEXT[],
  "organization" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__careManagerIdentifierSort" TEXT,
  "__conditionIdentifierSort" TEXT,
  "__incomingReferralIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_id_idx" ON "EpisodeOfCare" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_lastUpdated_idx" ON "EpisodeOfCare" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_projectId_lastUpdated_idx" ON "EpisodeOfCare" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_projectId_idx" ON "EpisodeOfCare" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare__source_idx" ON "EpisodeOfCare" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare__profile_idx" ON "EpisodeOfCare" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___version_idx" ON "EpisodeOfCare" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_compartments_idx" ON "EpisodeOfCare" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___sharedTokens_idx" ON "EpisodeOfCare" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___sharedTokensTextTrgm_idx" ON "EpisodeOfCare" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare____tag_idx" ON "EpisodeOfCare" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare____tagTextTrgm_idx" ON "EpisodeOfCare" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_date_idx" ON "EpisodeOfCare" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_projectId_date_idx" ON "EpisodeOfCare" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___idnt_idx" ON "EpisodeOfCare" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___idntTextTrgm_idx" ON "EpisodeOfCare" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_patient_idx" ON "EpisodeOfCare" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___type_idx" ON "EpisodeOfCare" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare___typeTextTrgm_idx" ON "EpisodeOfCare" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_careManager_idx" ON "EpisodeOfCare" ("careManager")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_condition_idx" ON "EpisodeOfCare" USING gin ("condition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_incomingReferral_idx" ON "EpisodeOfCare" USING gin ("incomingReferral")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_organization_idx" ON "EpisodeOfCare" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_status_idx" ON "EpisodeOfCare" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EpisodeOfCare_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_History_id_idx" ON "EpisodeOfCare_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_History_lastUpdated_idx" ON "EpisodeOfCare_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_History_versionId_idx" ON "EpisodeOfCare_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EpisodeOfCare_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EpisodeOfCare_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_Refs_resourceId_targetId_code_idx" ON "EpisodeOfCare_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EpisodeOfCare_Refs_targetId_code_idx" ON "EpisodeOfCare_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EventDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_id_idx" ON "EventDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_lastUpdated_idx" ON "EventDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_projectId_lastUpdated_idx" ON "EventDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_projectId_idx" ON "EventDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition__source_idx" ON "EventDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition__profile_idx" ON "EventDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___version_idx" ON "EventDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_compartments_idx" ON "EventDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___sharedTokens_idx" ON "EventDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___sharedTokensTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition____tag_idx" ON "EventDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition____tagTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_composedOf_idx" ON "EventDefinition" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___context_idx" ON "EventDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___contextTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_contextQuantity_idx" ON "EventDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___contextType_idx" ON "EventDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___contextTypeTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_date_idx" ON "EventDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_projectId_date_idx" ON "EventDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_dependsOn_idx" ON "EventDefinition" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_derivedFrom_idx" ON "EventDefinition" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_description_idx" ON "EventDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_effective_idx" ON "EventDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___idnt_idx" ON "EventDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___idntTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___jurisdiction_idx" ON "EventDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___jurisdictionTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_name_idx" ON "EventDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_predecessor_idx" ON "EventDefinition" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_publisher_idx" ON "EventDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_status_idx" ON "EventDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_successor_idx" ON "EventDefinition" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_title_idx" ON "EventDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___topic_idx" ON "EventDefinition" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition___topicTextTrgm_idx" ON "EventDefinition" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_url_idx" ON "EventDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_version_idx" ON "EventDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EventDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_History_id_idx" ON "EventDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_History_lastUpdated_idx" ON "EventDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_History_versionId_idx" ON "EventDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EventDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EventDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_Refs_resourceId_targetId_code_idx" ON "EventDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EventDefinition_Refs_targetId_code_idx" ON "EventDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Evidence" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_id_idx" ON "Evidence" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_lastUpdated_idx" ON "Evidence" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_projectId_lastUpdated_idx" ON "Evidence" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_projectId_idx" ON "Evidence" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence__source_idx" ON "Evidence" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence__profile_idx" ON "Evidence" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___version_idx" ON "Evidence" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_compartments_idx" ON "Evidence" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___sharedTokens_idx" ON "Evidence" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___sharedTokensTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence____tag_idx" ON "Evidence" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence____tagTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_composedOf_idx" ON "Evidence" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___context_idx" ON "Evidence" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___contextTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_contextQuantity_idx" ON "Evidence" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___contextType_idx" ON "Evidence" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___contextTypeTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_date_idx" ON "Evidence" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_projectId_date_idx" ON "Evidence" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_dependsOn_idx" ON "Evidence" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_derivedFrom_idx" ON "Evidence" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_description_idx" ON "Evidence" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_effective_idx" ON "Evidence" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___idnt_idx" ON "Evidence" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___idntTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___jurisdiction_idx" ON "Evidence" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___jurisdictionTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_name_idx" ON "Evidence" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_predecessor_idx" ON "Evidence" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_publisher_idx" ON "Evidence" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_status_idx" ON "Evidence" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_successor_idx" ON "Evidence" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_title_idx" ON "Evidence" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___topic_idx" ON "Evidence" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence___topicTextTrgm_idx" ON "Evidence" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_url_idx" ON "Evidence" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_version_idx" ON "Evidence" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Evidence_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_History_id_idx" ON "Evidence_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_History_lastUpdated_idx" ON "Evidence_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_History_versionId_idx" ON "Evidence_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Evidence_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Evidence_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_Refs_resourceId_targetId_code_idx" ON "Evidence_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Evidence_Refs_targetId_code_idx" ON "Evidence_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EvidenceVariable" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__characteristicType" UUID[],
  "__characteristicTypeText" TEXT[],
  "__characteristicTypeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_id_idx" ON "EvidenceVariable" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_lastUpdated_idx" ON "EvidenceVariable" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_projectId_lastUpdated_idx" ON "EvidenceVariable" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_projectId_idx" ON "EvidenceVariable" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable__source_idx" ON "EvidenceVariable" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable__profile_idx" ON "EvidenceVariable" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___version_idx" ON "EvidenceVariable" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_compartments_idx" ON "EvidenceVariable" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___sharedTokens_idx" ON "EvidenceVariable" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___sharedTokensTextTrgm_idx" ON "EvidenceVariable" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable____tag_idx" ON "EvidenceVariable" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable____tagTextTrgm_idx" ON "EvidenceVariable" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_composedOf_idx" ON "EvidenceVariable" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_contextQuantity_idx" ON "EvidenceVariable" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_date_idx" ON "EvidenceVariable" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_projectId_date_idx" ON "EvidenceVariable" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_dependsOn_idx" ON "EvidenceVariable" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_derivedFrom_idx" ON "EvidenceVariable" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_description_idx" ON "EvidenceVariable" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_effective_idx" ON "EvidenceVariable" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___idnt_idx" ON "EvidenceVariable" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___idntTextTrgm_idx" ON "EvidenceVariable" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_name_idx" ON "EvidenceVariable" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_predecessor_idx" ON "EvidenceVariable" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_publisher_idx" ON "EvidenceVariable" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_status_idx" ON "EvidenceVariable" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_successor_idx" ON "EvidenceVariable" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_title_idx" ON "EvidenceVariable" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_url_idx" ON "EvidenceVariable" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_version_idx" ON "EvidenceVariable" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___characteristicType_idx" ON "EvidenceVariable" USING gin ("__characteristicType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable___characteristicTypeTextTrgm_idx" ON "EvidenceVariable" USING gin (token_array_to_text("__characteristicTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EvidenceVariable_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_History_id_idx" ON "EvidenceVariable_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_History_lastUpdated_idx" ON "EvidenceVariable_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_History_versionId_idx" ON "EvidenceVariable_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "EvidenceVariable_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "EvidenceVariable_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_Refs_resourceId_targetId_code_idx" ON "EvidenceVariable_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "EvidenceVariable_Refs_targetId_code_idx" ON "EvidenceVariable_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExampleScenario" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_id_idx" ON "ExampleScenario" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_lastUpdated_idx" ON "ExampleScenario" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_projectId_lastUpdated_idx" ON "ExampleScenario" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_projectId_idx" ON "ExampleScenario" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario__source_idx" ON "ExampleScenario" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario__profile_idx" ON "ExampleScenario" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___version_idx" ON "ExampleScenario" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_compartments_idx" ON "ExampleScenario" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___sharedTokens_idx" ON "ExampleScenario" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___sharedTokensTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario____tag_idx" ON "ExampleScenario" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario____tagTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___context_idx" ON "ExampleScenario" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___contextTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_contextQuantity_idx" ON "ExampleScenario" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___contextType_idx" ON "ExampleScenario" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___contextTypeTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_date_idx" ON "ExampleScenario" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_projectId_date_idx" ON "ExampleScenario" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___idnt_idx" ON "ExampleScenario" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___idntTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___jurisdiction_idx" ON "ExampleScenario" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario___jurisdictionTextTrgm_idx" ON "ExampleScenario" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_name_idx" ON "ExampleScenario" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_publisher_idx" ON "ExampleScenario" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_status_idx" ON "ExampleScenario" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_url_idx" ON "ExampleScenario" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_version_idx" ON "ExampleScenario" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExampleScenario_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_History_id_idx" ON "ExampleScenario_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_History_lastUpdated_idx" ON "ExampleScenario_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_History_versionId_idx" ON "ExampleScenario_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExampleScenario_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ExampleScenario_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_Refs_resourceId_targetId_code_idx" ON "ExampleScenario_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExampleScenario_Refs_targetId_code_idx" ON "ExampleScenario_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "careTeam" TEXT[],
  "claim" TEXT,
  "coverage" TEXT[],
  "created" TIMESTAMPTZ,
  "detailUdi" TEXT[],
  "disposition" TEXT,
  "encounter" TEXT[],
  "enterer" TEXT,
  "facility" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "itemUdi" TEXT[],
  "patient" TEXT,
  "payee" TEXT,
  "procedureUdi" TEXT[],
  "provider" TEXT,
  "status" TEXT,
  "subdetailUdi" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__careTeamIdentifierSort" TEXT,
  "__claimIdentifierSort" TEXT,
  "__coverageIdentifierSort" TEXT,
  "__detailUdiIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__entererIdentifierSort" TEXT,
  "__facilityIdentifierSort" TEXT,
  "__itemUdiIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__payeeIdentifierSort" TEXT,
  "__procedureUdiIdentifierSort" TEXT,
  "__providerIdentifierSort" TEXT,
  "__subdetailUdiIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_id_idx" ON "ExplanationOfBenefit" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_lastUpdated_idx" ON "ExplanationOfBenefit" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_projectId_lastUpdated_idx" ON "ExplanationOfBenefit" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_projectId_idx" ON "ExplanationOfBenefit" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit__source_idx" ON "ExplanationOfBenefit" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit__profile_idx" ON "ExplanationOfBenefit" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit___version_idx" ON "ExplanationOfBenefit" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_compartments_idx" ON "ExplanationOfBenefit" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit___sharedTokens_idx" ON "ExplanationOfBenefit" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit___sharedTokensTextTrgm_idx" ON "ExplanationOfBenefit" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit____tag_idx" ON "ExplanationOfBenefit" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit____tagTextTrgm_idx" ON "ExplanationOfBenefit" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_careTeam_idx" ON "ExplanationOfBenefit" USING gin ("careTeam")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_claim_idx" ON "ExplanationOfBenefit" ("claim")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_coverage_idx" ON "ExplanationOfBenefit" USING gin ("coverage")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_created_idx" ON "ExplanationOfBenefit" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_detailUdi_idx" ON "ExplanationOfBenefit" USING gin ("detailUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_disposition_idx" ON "ExplanationOfBenefit" ("disposition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_encounter_idx" ON "ExplanationOfBenefit" USING gin ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_enterer_idx" ON "ExplanationOfBenefit" ("enterer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_facility_idx" ON "ExplanationOfBenefit" ("facility")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit___idnt_idx" ON "ExplanationOfBenefit" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit___idntTextTrgm_idx" ON "ExplanationOfBenefit" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_itemUdi_idx" ON "ExplanationOfBenefit" USING gin ("itemUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_patient_idx" ON "ExplanationOfBenefit" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_payee_idx" ON "ExplanationOfBenefit" ("payee")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_procedureUdi_idx" ON "ExplanationOfBenefit" USING gin ("procedureUdi")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_provider_idx" ON "ExplanationOfBenefit" ("provider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_status_idx" ON "ExplanationOfBenefit" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_subdetailUdi_idx" ON "ExplanationOfBenefit" USING gin ("subdetailUdi")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_History_id_idx" ON "ExplanationOfBenefit_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_History_lastUpdated_idx" ON "ExplanationOfBenefit_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_History_versionId_idx" ON "ExplanationOfBenefit_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ExplanationOfBenefit_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ExplanationOfBenefit_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_Refs_resourceId_targetId_code_idx" ON "ExplanationOfBenefit_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ExplanationOfBenefit_Refs_targetId_code_idx" ON "ExplanationOfBenefit_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "FamilyMemberHistory" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "__relationship" UUID[],
  "__relationshipText" TEXT[],
  "__relationshipSort" TEXT,
  "__sex" UUID[],
  "__sexText" TEXT[],
  "__sexSort" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_id_idx" ON "FamilyMemberHistory" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_lastUpdated_idx" ON "FamilyMemberHistory" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_projectId_lastUpdated_idx" ON "FamilyMemberHistory" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_projectId_idx" ON "FamilyMemberHistory" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory__source_idx" ON "FamilyMemberHistory" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory__profile_idx" ON "FamilyMemberHistory" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___version_idx" ON "FamilyMemberHistory" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_compartments_idx" ON "FamilyMemberHistory" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___sharedTokens_idx" ON "FamilyMemberHistory" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___sharedTokensTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory____tag_idx" ON "FamilyMemberHistory" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory____tagTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___code_idx" ON "FamilyMemberHistory" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___codeTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_date_idx" ON "FamilyMemberHistory" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_projectId_date_idx" ON "FamilyMemberHistory" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___idnt_idx" ON "FamilyMemberHistory" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___idntTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_patient_idx" ON "FamilyMemberHistory" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_instantiatesCanonical_idx" ON "FamilyMemberHistory" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_instantiatesUri_idx" ON "FamilyMemberHistory" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___relationship_idx" ON "FamilyMemberHistory" USING gin ("__relationship")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___relationshipTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("__relationshipText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___sex_idx" ON "FamilyMemberHistory" USING gin ("__sex")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory___sexTextTrgm_idx" ON "FamilyMemberHistory" USING gin (token_array_to_text("__sexText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_status_idx" ON "FamilyMemberHistory" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "FamilyMemberHistory_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_History_id_idx" ON "FamilyMemberHistory_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_History_lastUpdated_idx" ON "FamilyMemberHistory_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_History_versionId_idx" ON "FamilyMemberHistory_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "FamilyMemberHistory_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "FamilyMemberHistory_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_Refs_resourceId_targetId_code_idx" ON "FamilyMemberHistory_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "FamilyMemberHistory_Refs_targetId_code_idx" ON "FamilyMemberHistory_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Flag" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "patient" TEXT,
  "encounter" TEXT,
  "author" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "subject" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Flag_id_idx" ON "Flag" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_lastUpdated_idx" ON "Flag" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_projectId_lastUpdated_idx" ON "Flag" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_projectId_idx" ON "Flag" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag__source_idx" ON "Flag" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag__profile_idx" ON "Flag" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___version_idx" ON "Flag" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_compartments_idx" ON "Flag" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___sharedTokens_idx" ON "Flag" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___sharedTokensTextTrgm_idx" ON "Flag" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag____tag_idx" ON "Flag" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag____tagTextTrgm_idx" ON "Flag" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_date_idx" ON "Flag" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_projectId_date_idx" ON "Flag" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_patient_idx" ON "Flag" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_encounter_idx" ON "Flag" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_author_idx" ON "Flag" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___idnt_idx" ON "Flag" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___idntTextTrgm_idx" ON "Flag" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_subject_idx" ON "Flag" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___category_idx" ON "Flag" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag___categoryTextTrgm_idx" ON "Flag" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_status_idx" ON "Flag" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Flag_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_History_id_idx" ON "Flag_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_History_lastUpdated_idx" ON "Flag_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Flag_History_versionId_idx" ON "Flag_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Flag_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Flag_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Flag_Refs_resourceId_targetId_code_idx" ON "Flag_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Flag_Refs_targetId_code_idx" ON "Flag_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Goal" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__achievementStatus" UUID[],
  "__achievementStatusText" TEXT[],
  "__achievementStatusSort" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "lifecycleStatus" TEXT,
  "startDate" DATE,
  "subject" TEXT,
  "targetDate" DATE[],
  "__description" UUID[],
  "__descriptionText" TEXT[],
  "__descriptionSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Goal_id_idx" ON "Goal" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_lastUpdated_idx" ON "Goal" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_projectId_lastUpdated_idx" ON "Goal" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_projectId_idx" ON "Goal" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal__source_idx" ON "Goal" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal__profile_idx" ON "Goal" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___version_idx" ON "Goal" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_compartments_idx" ON "Goal" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___sharedTokens_idx" ON "Goal" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___sharedTokensTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal____tag_idx" ON "Goal" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal____tagTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___idnt_idx" ON "Goal" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___idntTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_patient_idx" ON "Goal" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___achievementStatus_idx" ON "Goal" USING gin ("__achievementStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___achievementStatusTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("__achievementStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___category_idx" ON "Goal" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___categoryTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_lifecycleStatus_idx" ON "Goal" ("lifecycleStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_startDate_idx" ON "Goal" ("startDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_subject_idx" ON "Goal" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_targetDate_idx" ON "Goal" USING gin ("targetDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___description_idx" ON "Goal" USING gin ("__description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal___descriptionTextTrgm_idx" ON "Goal" USING gin (token_array_to_text("__descriptionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Goal_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_History_id_idx" ON "Goal_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_History_lastUpdated_idx" ON "Goal_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Goal_History_versionId_idx" ON "Goal_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Goal_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Goal_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Goal_Refs_resourceId_targetId_code_idx" ON "Goal_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Goal_Refs_targetId_code_idx" ON "Goal_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GraphDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "url" TEXT,
  "version" TEXT,
  "start" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_id_idx" ON "GraphDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_lastUpdated_idx" ON "GraphDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_projectId_lastUpdated_idx" ON "GraphDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_projectId_idx" ON "GraphDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition__source_idx" ON "GraphDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition__profile_idx" ON "GraphDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___version_idx" ON "GraphDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_compartments_idx" ON "GraphDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___sharedTokens_idx" ON "GraphDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___sharedTokensTextTrgm_idx" ON "GraphDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition____tag_idx" ON "GraphDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition____tagTextTrgm_idx" ON "GraphDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___context_idx" ON "GraphDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___contextTextTrgm_idx" ON "GraphDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_contextQuantity_idx" ON "GraphDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___contextType_idx" ON "GraphDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___contextTypeTextTrgm_idx" ON "GraphDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_date_idx" ON "GraphDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_projectId_date_idx" ON "GraphDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_description_idx" ON "GraphDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___jurisdiction_idx" ON "GraphDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition___jurisdictionTextTrgm_idx" ON "GraphDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_name_idx" ON "GraphDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_publisher_idx" ON "GraphDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_status_idx" ON "GraphDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_url_idx" ON "GraphDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_version_idx" ON "GraphDefinition" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_start_idx" ON "GraphDefinition" ("start")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GraphDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_History_id_idx" ON "GraphDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_History_lastUpdated_idx" ON "GraphDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_History_versionId_idx" ON "GraphDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GraphDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "GraphDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_Refs_resourceId_targetId_code_idx" ON "GraphDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GraphDefinition_Refs_targetId_code_idx" ON "GraphDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Group" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "actual" BOOLEAN,
  "__characteristic" UUID[],
  "__characteristicText" TEXT[],
  "__characteristicSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "exclude" BOOLEAN[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "managingEntity" TEXT,
  "member" TEXT[],
  "type" TEXT,
  "__value" UUID[],
  "__valueText" TEXT[],
  "__valueSort" TEXT,
  "name" TEXT,
  "characteristicRange" DOUBLE PRECISION[],
  "characteristicReference" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__managingEntityIdentifierSort" TEXT,
  "__memberIdentifierSort" TEXT,
  "__characteristicReferenceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Group_id_idx" ON "Group" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_lastUpdated_idx" ON "Group" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_projectId_lastUpdated_idx" ON "Group" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_projectId_idx" ON "Group" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group__source_idx" ON "Group" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group__profile_idx" ON "Group" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___version_idx" ON "Group" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_compartments_idx" ON "Group" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___sharedTokens_idx" ON "Group" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___sharedTokensTextTrgm_idx" ON "Group" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group____tag_idx" ON "Group" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group____tagTextTrgm_idx" ON "Group" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_actual_idx" ON "Group" ("actual")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___characteristic_idx" ON "Group" USING gin ("__characteristic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___characteristicTextTrgm_idx" ON "Group" USING gin (token_array_to_text("__characteristicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___code_idx" ON "Group" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___codeTextTrgm_idx" ON "Group" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_exclude_idx" ON "Group" USING gin ("exclude")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___idnt_idx" ON "Group" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___idntTextTrgm_idx" ON "Group" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_managingEntity_idx" ON "Group" ("managingEntity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_member_idx" ON "Group" USING gin ("member")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_type_idx" ON "Group" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___value_idx" ON "Group" USING gin ("__value")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group___valueTextTrgm_idx" ON "Group" USING gin (token_array_to_text("__valueText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_name_idx" ON "Group" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_characteristicRange_idx" ON "Group" USING gin ("characteristicRange")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_characteristicReference_idx" ON "Group" USING gin ("characteristicReference")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Group_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_History_id_idx" ON "Group_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_History_lastUpdated_idx" ON "Group_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Group_History_versionId_idx" ON "Group_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Group_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Group_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Group_Refs_resourceId_targetId_code_idx" ON "Group_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Group_Refs_targetId_code_idx" ON "Group_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GuidanceResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__request" UUID[],
  "__requestText" TEXT[],
  "__requestSort" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_id_idx" ON "GuidanceResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_lastUpdated_idx" ON "GuidanceResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_projectId_lastUpdated_idx" ON "GuidanceResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_projectId_idx" ON "GuidanceResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse__source_idx" ON "GuidanceResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse__profile_idx" ON "GuidanceResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___version_idx" ON "GuidanceResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_compartments_idx" ON "GuidanceResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___sharedTokens_idx" ON "GuidanceResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___sharedTokensTextTrgm_idx" ON "GuidanceResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse____tag_idx" ON "GuidanceResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse____tagTextTrgm_idx" ON "GuidanceResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___idnt_idx" ON "GuidanceResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___idntTextTrgm_idx" ON "GuidanceResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_patient_idx" ON "GuidanceResponse" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___request_idx" ON "GuidanceResponse" USING gin ("__request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse___requestTextTrgm_idx" ON "GuidanceResponse" USING gin (token_array_to_text("__requestText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_subject_idx" ON "GuidanceResponse" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GuidanceResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_History_id_idx" ON "GuidanceResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_History_lastUpdated_idx" ON "GuidanceResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_History_versionId_idx" ON "GuidanceResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "GuidanceResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "GuidanceResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_Refs_resourceId_targetId_code_idx" ON "GuidanceResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "GuidanceResponse_Refs_targetId_code_idx" ON "GuidanceResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "HealthcareService" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "__characteristic" UUID[],
  "__characteristicText" TEXT[],
  "__characteristicSort" TEXT,
  "coverageArea" TEXT[],
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT[],
  "name" TEXT,
  "organization" TEXT,
  "__program" UUID[],
  "__programText" TEXT[],
  "__programSort" TEXT,
  "__serviceCategory" UUID[],
  "__serviceCategoryText" TEXT[],
  "__serviceCategorySort" TEXT,
  "__serviceType" UUID[],
  "__serviceTypeText" TEXT[],
  "__serviceTypeSort" TEXT,
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__coverageAreaIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_id_idx" ON "HealthcareService" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_lastUpdated_idx" ON "HealthcareService" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_projectId_lastUpdated_idx" ON "HealthcareService" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_projectId_idx" ON "HealthcareService" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService__source_idx" ON "HealthcareService" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService__profile_idx" ON "HealthcareService" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___version_idx" ON "HealthcareService" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_compartments_idx" ON "HealthcareService" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___sharedTokens_idx" ON "HealthcareService" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___sharedTokensTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService____tag_idx" ON "HealthcareService" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService____tagTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_active_idx" ON "HealthcareService" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___characteristic_idx" ON "HealthcareService" USING gin ("__characteristic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___characteristicTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__characteristicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_coverageArea_idx" ON "HealthcareService" USING gin ("coverageArea")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_endpoint_idx" ON "HealthcareService" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___idnt_idx" ON "HealthcareService" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___idntTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_location_idx" ON "HealthcareService" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_name_idx" ON "HealthcareService" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_organization_idx" ON "HealthcareService" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___program_idx" ON "HealthcareService" USING gin ("__program")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___programTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__programText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___serviceCategory_idx" ON "HealthcareService" USING gin ("__serviceCategory")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___serviceCategoryTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__serviceCategoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___serviceType_idx" ON "HealthcareService" USING gin ("__serviceType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___serviceTypeTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__serviceTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___specialty_idx" ON "HealthcareService" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService___specialtyTextTrgm_idx" ON "HealthcareService" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "HealthcareService_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_History_id_idx" ON "HealthcareService_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_History_lastUpdated_idx" ON "HealthcareService_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_History_versionId_idx" ON "HealthcareService_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "HealthcareService_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "HealthcareService_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_Refs_resourceId_targetId_code_idx" ON "HealthcareService_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HealthcareService_Refs_targetId_code_idx" ON "HealthcareService_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImagingStudy" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "basedon" TEXT[],
  "__bodysite" UUID[],
  "__bodysiteText" TEXT[],
  "__bodysiteSort" TEXT,
  "__dicomClass" UUID[],
  "__dicomClassText" TEXT[],
  "__dicomClassSort" TEXT,
  "encounter" TEXT,
  "endpoint" TEXT[],
  "instance" TEXT[],
  "interpreter" TEXT[],
  "__modality" UUID[],
  "__modalityText" TEXT[],
  "__modalitySort" TEXT,
  "performer" TEXT[],
  "__reason" UUID[],
  "__reasonText" TEXT[],
  "__reasonSort" TEXT,
  "referrer" TEXT,
  "series" TEXT[],
  "started" TIMESTAMPTZ,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__basedonIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__interpreterIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__referrerIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_id_idx" ON "ImagingStudy" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_lastUpdated_idx" ON "ImagingStudy" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_projectId_lastUpdated_idx" ON "ImagingStudy" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_projectId_idx" ON "ImagingStudy" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy__source_idx" ON "ImagingStudy" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy__profile_idx" ON "ImagingStudy" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___version_idx" ON "ImagingStudy" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_compartments_idx" ON "ImagingStudy" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___sharedTokens_idx" ON "ImagingStudy" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___sharedTokensTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy____tag_idx" ON "ImagingStudy" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy____tagTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___idnt_idx" ON "ImagingStudy" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___idntTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_patient_idx" ON "ImagingStudy" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_basedon_idx" ON "ImagingStudy" USING gin ("basedon")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___bodysite_idx" ON "ImagingStudy" USING gin ("__bodysite")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___bodysiteTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__bodysiteText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___dicomClass_idx" ON "ImagingStudy" USING gin ("__dicomClass")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___dicomClassTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__dicomClassText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_encounter_idx" ON "ImagingStudy" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_endpoint_idx" ON "ImagingStudy" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_instance_idx" ON "ImagingStudy" USING gin ("instance")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_interpreter_idx" ON "ImagingStudy" USING gin ("interpreter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___modality_idx" ON "ImagingStudy" USING gin ("__modality")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___modalityTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__modalityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_performer_idx" ON "ImagingStudy" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___reason_idx" ON "ImagingStudy" USING gin ("__reason")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy___reasonTextTrgm_idx" ON "ImagingStudy" USING gin (token_array_to_text("__reasonText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_referrer_idx" ON "ImagingStudy" ("referrer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_series_idx" ON "ImagingStudy" USING gin ("series")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_started_idx" ON "ImagingStudy" ("started")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_status_idx" ON "ImagingStudy" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_subject_idx" ON "ImagingStudy" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImagingStudy_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_History_id_idx" ON "ImagingStudy_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_History_lastUpdated_idx" ON "ImagingStudy_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_History_versionId_idx" ON "ImagingStudy_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImagingStudy_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ImagingStudy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_Refs_resourceId_targetId_code_idx" ON "ImagingStudy_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImagingStudy_Refs_targetId_code_idx" ON "ImagingStudy_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Immunization" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "location" TEXT,
  "lotNumber" TEXT,
  "manufacturer" TEXT,
  "performer" TEXT[],
  "reaction" TEXT[],
  "reactionDate" TIMESTAMPTZ[],
  "__reasonCode" UUID[],
  "__reasonCodeText" TEXT[],
  "__reasonCodeSort" TEXT,
  "reasonReference" TEXT[],
  "series" TEXT[],
  "status" TEXT,
  "__statusReason" UUID[],
  "__statusReasonText" TEXT[],
  "__statusReasonSort" TEXT,
  "__targetDisease" UUID[],
  "__targetDiseaseText" TEXT[],
  "__targetDiseaseSort" TEXT,
  "__vaccineCode" UUID[],
  "__vaccineCodeText" TEXT[],
  "__vaccineCodeSort" TEXT,
  "encounter" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__manufacturerIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__reactionIdentifierSort" TEXT,
  "__reasonReferenceIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_id_idx" ON "Immunization" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_lastUpdated_idx" ON "Immunization" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_projectId_lastUpdated_idx" ON "Immunization" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_projectId_idx" ON "Immunization" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization__source_idx" ON "Immunization" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization__profile_idx" ON "Immunization" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___version_idx" ON "Immunization" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_compartments_idx" ON "Immunization" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___sharedTokens_idx" ON "Immunization" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___sharedTokensTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization____tag_idx" ON "Immunization" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization____tagTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_date_idx" ON "Immunization" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_projectId_date_idx" ON "Immunization" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___idnt_idx" ON "Immunization" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___idntTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_patient_idx" ON "Immunization" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_location_idx" ON "Immunization" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_lotNumber_idx" ON "Immunization" ("lotNumber")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_manufacturer_idx" ON "Immunization" ("manufacturer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_performer_idx" ON "Immunization" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_reaction_idx" ON "Immunization" USING gin ("reaction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_reactionDate_idx" ON "Immunization" USING gin ("reactionDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___reasonCode_idx" ON "Immunization" USING gin ("__reasonCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___reasonCodeTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__reasonCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_reasonReference_idx" ON "Immunization" USING gin ("reasonReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_series_idx" ON "Immunization" USING gin ("series")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_status_idx" ON "Immunization" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___statusReason_idx" ON "Immunization" USING gin ("__statusReason")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___statusReasonTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__statusReasonText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___targetDisease_idx" ON "Immunization" USING gin ("__targetDisease")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___targetDiseaseTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__targetDiseaseText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___vaccineCode_idx" ON "Immunization" USING gin ("__vaccineCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization___vaccineCodeTextTrgm_idx" ON "Immunization" USING gin (token_array_to_text("__vaccineCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_encounter_idx" ON "Immunization" ("encounter")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Immunization_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_History_id_idx" ON "Immunization_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_History_lastUpdated_idx" ON "Immunization_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_History_versionId_idx" ON "Immunization_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Immunization_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Immunization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_Refs_resourceId_targetId_code_idx" ON "Immunization_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Immunization_Refs_targetId_code_idx" ON "Immunization_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__doseStatus" UUID[],
  "__doseStatusText" TEXT[],
  "__doseStatusSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "immunizationEvent" TEXT,
  "patient" TEXT,
  "status" TEXT,
  "__targetDisease" UUID[],
  "__targetDiseaseText" TEXT[],
  "__targetDiseaseSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__immunizationEventIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_id_idx" ON "ImmunizationEvaluation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_lastUpdated_idx" ON "ImmunizationEvaluation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_projectId_lastUpdated_idx" ON "ImmunizationEvaluation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_projectId_idx" ON "ImmunizationEvaluation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation__source_idx" ON "ImmunizationEvaluation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation__profile_idx" ON "ImmunizationEvaluation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___version_idx" ON "ImmunizationEvaluation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_compartments_idx" ON "ImmunizationEvaluation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___sharedTokens_idx" ON "ImmunizationEvaluation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___sharedTokensTextTrgm_idx" ON "ImmunizationEvaluation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation____tag_idx" ON "ImmunizationEvaluation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation____tagTextTrgm_idx" ON "ImmunizationEvaluation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_date_idx" ON "ImmunizationEvaluation" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_projectId_date_idx" ON "ImmunizationEvaluation" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___doseStatus_idx" ON "ImmunizationEvaluation" USING gin ("__doseStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___doseStatusTextTrgm_idx" ON "ImmunizationEvaluation" USING gin (token_array_to_text("__doseStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___idnt_idx" ON "ImmunizationEvaluation" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___idntTextTrgm_idx" ON "ImmunizationEvaluation" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_immEvent_idx" ON "ImmunizationEvaluation" ("immunizationEvent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_patient_idx" ON "ImmunizationEvaluation" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_status_idx" ON "ImmunizationEvaluation" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___targetDisease_idx" ON "ImmunizationEvaluation" USING gin ("__targetDisease")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation___targetDiseaseTextTrgm_idx" ON "ImmunizationEvaluation" USING gin (token_array_to_text("__targetDiseaseText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_History_id_idx" ON "ImmunizationEvaluation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_History_lastUpdated_idx" ON "ImmunizationEvaluation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_History_versionId_idx" ON "ImmunizationEvaluation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationEvaluation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ImmunizationEvaluation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_Refs_resourceId_targetId_code_idx" ON "ImmunizationEvaluation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationEvaluation_Refs_targetId_code_idx" ON "ImmunizationEvaluation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "information" TEXT[],
  "patient" TEXT,
  "__status" UUID[],
  "__statusText" TEXT[],
  "__statusSort" TEXT,
  "support" TEXT[],
  "__targetDisease" UUID[],
  "__targetDiseaseText" TEXT[],
  "__targetDiseaseSort" TEXT,
  "__vaccineType" UUID[],
  "__vaccineTypeText" TEXT[],
  "__vaccineTypeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__informationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__supportIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_id_idx" ON "ImmunizationRecommendation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_lastUpdated_idx" ON "ImmunizationRecommendation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_projectId_lastUpdated_idx" ON "ImmunizationRecommendation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_projectId_idx" ON "ImmunizationRecommendation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation__source_idx" ON "ImmunizationRecommendation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation__profile_idx" ON "ImmunizationRecommendation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___version_idx" ON "ImmunizationRecommendation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_compartments_idx" ON "ImmunizationRecommendation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___sharedTokens_idx" ON "ImmunizationRecommendation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___sharedTokensTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation____tag_idx" ON "ImmunizationRecommendation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation____tagTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_date_idx" ON "ImmunizationRecommendation" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_projectId_date_idx" ON "ImmunizationRecommendation" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___idnt_idx" ON "ImmunizationRecommendation" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___idntTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_information_idx" ON "ImmunizationRecommendation" USING gin ("information")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_patient_idx" ON "ImmunizationRecommendation" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___status_idx" ON "ImmunizationRecommendation" USING gin ("__status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___statusTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("__statusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_support_idx" ON "ImmunizationRecommendation" USING gin ("support")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___targetDisease_idx" ON "ImmunizationRecommendation" USING gin ("__targetDisease")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___targetDiseaseTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("__targetDiseaseText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___vaccineType_idx" ON "ImmunizationRecommendation" USING gin ("__vaccineType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation___vaccineTypeTextTrgm_idx" ON "ImmunizationRecommendation" USING gin (token_array_to_text("__vaccineTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_History_id_idx" ON "ImmunizationRecommendation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_History_lastUpdated_idx" ON "ImmunizationRecommendation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_History_versionId_idx" ON "ImmunizationRecommendation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImmunizationRecommendation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ImmunizationRecommendation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_Refs_resourceId_targetId_code_idx" ON "ImmunizationRecommendation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImmunizationRecommendation_Refs_targetId_code_idx" ON "ImmunizationRecommendation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImplementationGuide" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "dependsOn" TEXT[],
  "experimental" BOOLEAN,
  "global" TEXT[],
  "resource" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__globalIdentifierSort" TEXT,
  "__resourceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_id_idx" ON "ImplementationGuide" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_lastUpdated_idx" ON "ImplementationGuide" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_projectId_lastUpdated_idx" ON "ImplementationGuide" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_projectId_idx" ON "ImplementationGuide" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide__source_idx" ON "ImplementationGuide" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide__profile_idx" ON "ImplementationGuide" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___version_idx" ON "ImplementationGuide" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_compartments_idx" ON "ImplementationGuide" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___sharedTokens_idx" ON "ImplementationGuide" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___sharedTokensTextTrgm_idx" ON "ImplementationGuide" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide____tag_idx" ON "ImplementationGuide" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide____tagTextTrgm_idx" ON "ImplementationGuide" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___context_idx" ON "ImplementationGuide" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___contextTextTrgm_idx" ON "ImplementationGuide" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_contextQuantity_idx" ON "ImplementationGuide" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___contextType_idx" ON "ImplementationGuide" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___contextTypeTextTrgm_idx" ON "ImplementationGuide" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_date_idx" ON "ImplementationGuide" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_projectId_date_idx" ON "ImplementationGuide" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_description_idx" ON "ImplementationGuide" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___jurisdiction_idx" ON "ImplementationGuide" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide___jurisdictionTextTrgm_idx" ON "ImplementationGuide" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_name_idx" ON "ImplementationGuide" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_publisher_idx" ON "ImplementationGuide" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_status_idx" ON "ImplementationGuide" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_title_idx" ON "ImplementationGuide" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_url_idx" ON "ImplementationGuide" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_version_idx" ON "ImplementationGuide" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_dependsOn_idx" ON "ImplementationGuide" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_experimental_idx" ON "ImplementationGuide" ("experimental")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_global_idx" ON "ImplementationGuide" USING gin ("global")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_resource_idx" ON "ImplementationGuide" USING gin ("resource")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImplementationGuide_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_History_id_idx" ON "ImplementationGuide_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_History_lastUpdated_idx" ON "ImplementationGuide_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_History_versionId_idx" ON "ImplementationGuide_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ImplementationGuide_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ImplementationGuide_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_Refs_resourceId_targetId_code_idx" ON "ImplementationGuide_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ImplementationGuide_Refs_targetId_code_idx" ON "ImplementationGuide_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "InsurancePlan" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "administeredBy" TEXT,
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "ownedBy" TEXT,
  "phonetic" TEXT,
  "status" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__administeredByIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__ownedByIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_id_idx" ON "InsurancePlan" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_lastUpdated_idx" ON "InsurancePlan" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_projectId_lastUpdated_idx" ON "InsurancePlan" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_projectId_idx" ON "InsurancePlan" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan__source_idx" ON "InsurancePlan" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan__profile_idx" ON "InsurancePlan" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___version_idx" ON "InsurancePlan" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_compartments_idx" ON "InsurancePlan" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___sharedTokens_idx" ON "InsurancePlan" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___sharedTokensTextTrgm_idx" ON "InsurancePlan" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan____tag_idx" ON "InsurancePlan" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan____tagTextTrgm_idx" ON "InsurancePlan" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_administeredBy_idx" ON "InsurancePlan" ("administeredBy")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_endpoint_idx" ON "InsurancePlan" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___idnt_idx" ON "InsurancePlan" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___idntTextTrgm_idx" ON "InsurancePlan" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_name_idx" ON "InsurancePlan" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_ownedBy_idx" ON "InsurancePlan" ("ownedBy")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_phonetic_idx" ON "InsurancePlan" ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_status_idx" ON "InsurancePlan" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___type_idx" ON "InsurancePlan" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan___typeTextTrgm_idx" ON "InsurancePlan" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "InsurancePlan_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_History_id_idx" ON "InsurancePlan_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_History_lastUpdated_idx" ON "InsurancePlan_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_History_versionId_idx" ON "InsurancePlan_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "InsurancePlan_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "InsurancePlan_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_Refs_resourceId_targetId_code_idx" ON "InsurancePlan_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "InsurancePlan_Refs_targetId_code_idx" ON "InsurancePlan_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Invoice" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "account" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "issuer" TEXT,
  "participant" TEXT[],
  "__participantRole" UUID[],
  "__participantRoleText" TEXT[],
  "__participantRoleSort" TEXT,
  "patient" TEXT,
  "recipient" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "totalgross" DOUBLE PRECISION,
  "totalnet" DOUBLE PRECISION,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__accountIdentifierSort" TEXT,
  "__issuerIdentifierSort" TEXT,
  "__participantIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__recipientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_id_idx" ON "Invoice" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_lastUpdated_idx" ON "Invoice" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_projectId_lastUpdated_idx" ON "Invoice" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_projectId_idx" ON "Invoice" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice__source_idx" ON "Invoice" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice__profile_idx" ON "Invoice" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___version_idx" ON "Invoice" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_compartments_idx" ON "Invoice" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___sharedTokens_idx" ON "Invoice" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___sharedTokensTextTrgm_idx" ON "Invoice" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice____tag_idx" ON "Invoice" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice____tagTextTrgm_idx" ON "Invoice" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_account_idx" ON "Invoice" ("account")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_date_idx" ON "Invoice" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_projectId_date_idx" ON "Invoice" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___idnt_idx" ON "Invoice" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___idntTextTrgm_idx" ON "Invoice" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_issuer_idx" ON "Invoice" ("issuer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_participant_idx" ON "Invoice" USING gin ("participant")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___participantRole_idx" ON "Invoice" USING gin ("__participantRole")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___participantRoleTextTrgm_idx" ON "Invoice" USING gin (token_array_to_text("__participantRoleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_patient_idx" ON "Invoice" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_recipient_idx" ON "Invoice" ("recipient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_status_idx" ON "Invoice" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_subject_idx" ON "Invoice" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_totalgross_idx" ON "Invoice" ("totalgross")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_totalnet_idx" ON "Invoice" ("totalnet")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___type_idx" ON "Invoice" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice___typeTextTrgm_idx" ON "Invoice" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Invoice_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_History_id_idx" ON "Invoice_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_History_lastUpdated_idx" ON "Invoice_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_History_versionId_idx" ON "Invoice_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Invoice_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Invoice_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_Refs_resourceId_targetId_code_idx" ON "Invoice_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Invoice_Refs_targetId_code_idx" ON "Invoice_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Library" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "contentType" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Library_id_idx" ON "Library" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_lastUpdated_idx" ON "Library" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_projectId_lastUpdated_idx" ON "Library" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_projectId_idx" ON "Library" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library__source_idx" ON "Library" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library__profile_idx" ON "Library" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___version_idx" ON "Library" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_compartments_idx" ON "Library" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___sharedTokens_idx" ON "Library" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___sharedTokensTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library____tag_idx" ON "Library" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library____tagTextTrgm_idx" ON "Library" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_composedOf_idx" ON "Library" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_contentType_idx" ON "Library" USING gin ("contentType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___context_idx" ON "Library" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___contextTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_contextQuantity_idx" ON "Library" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___contextType_idx" ON "Library" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___contextTypeTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_date_idx" ON "Library" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_projectId_date_idx" ON "Library" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_dependsOn_idx" ON "Library" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_derivedFrom_idx" ON "Library" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_description_idx" ON "Library" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_effective_idx" ON "Library" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___idnt_idx" ON "Library" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___idntTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___jurisdiction_idx" ON "Library" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___jurisdictionTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_name_idx" ON "Library" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_predecessor_idx" ON "Library" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_publisher_idx" ON "Library" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_status_idx" ON "Library" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_successor_idx" ON "Library" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_title_idx" ON "Library" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___topic_idx" ON "Library" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___topicTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___type_idx" ON "Library" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library___typeTextTrgm_idx" ON "Library" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_url_idx" ON "Library" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_version_idx" ON "Library" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Library_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_History_id_idx" ON "Library_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_History_lastUpdated_idx" ON "Library_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Library_History_versionId_idx" ON "Library_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Library_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Library_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Library_Refs_resourceId_targetId_code_idx" ON "Library_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Library_Refs_targetId_code_idx" ON "Library_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Linkage" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "author" TEXT,
  "item" TEXT[],
  "source" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__itemIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_id_idx" ON "Linkage" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_lastUpdated_idx" ON "Linkage" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_projectId_lastUpdated_idx" ON "Linkage" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_projectId_idx" ON "Linkage" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage__source_idx" ON "Linkage" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage__profile_idx" ON "Linkage" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage___version_idx" ON "Linkage" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_compartments_idx" ON "Linkage" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage___sharedTokens_idx" ON "Linkage" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage___sharedTokensTextTrgm_idx" ON "Linkage" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage____tag_idx" ON "Linkage" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage____tagTextTrgm_idx" ON "Linkage" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_author_idx" ON "Linkage" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_item_idx" ON "Linkage" USING gin ("item")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_source_idx" ON "Linkage" USING gin ("source")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Linkage_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_History_id_idx" ON "Linkage_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_History_lastUpdated_idx" ON "Linkage_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_History_versionId_idx" ON "Linkage_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Linkage_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Linkage_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_Refs_resourceId_targetId_code_idx" ON "Linkage_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Linkage_Refs_targetId_code_idx" ON "Linkage_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "List" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "__emptyReason" UUID[],
  "__emptyReasonText" TEXT[],
  "__emptyReasonSort" TEXT,
  "item" TEXT[],
  "notes" TEXT[],
  "source" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "title" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__itemIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "List_id_idx" ON "List" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_lastUpdated_idx" ON "List" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_projectId_lastUpdated_idx" ON "List" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_projectId_idx" ON "List" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List__source_idx" ON "List" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List__profile_idx" ON "List" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___version_idx" ON "List" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_compartments_idx" ON "List" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___sharedTokens_idx" ON "List" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___sharedTokensTextTrgm_idx" ON "List" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List____tag_idx" ON "List" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List____tagTextTrgm_idx" ON "List" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___code_idx" ON "List" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___codeTextTrgm_idx" ON "List" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_date_idx" ON "List" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_projectId_date_idx" ON "List" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___idnt_idx" ON "List" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___idntTextTrgm_idx" ON "List" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_patient_idx" ON "List" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_encounter_idx" ON "List" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___emptyReason_idx" ON "List" USING gin ("__emptyReason")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List___emptyReasonTextTrgm_idx" ON "List" USING gin (token_array_to_text("__emptyReasonText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_item_idx" ON "List" USING gin ("item")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_notes_idx" ON "List" USING gin ("notes")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_source_idx" ON "List" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_status_idx" ON "List" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_subject_idx" ON "List" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_title_idx" ON "List" ("title")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "List_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_History_id_idx" ON "List_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_History_lastUpdated_idx" ON "List_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "List_History_versionId_idx" ON "List_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "List_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "List_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "List_Refs_resourceId_targetId_code_idx" ON "List_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "List_Refs_targetId_code_idx" ON "List_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Location" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT[],
  "near" TEXT,
  "__operationalStatus" UUID[],
  "__operationalStatusText" TEXT[],
  "__operationalStatusSort" TEXT,
  "organization" TEXT,
  "partof" TEXT,
  "status" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "__physicalType" UUID[],
  "__physicalTypeText" TEXT[],
  "__physicalTypeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT,
  "__partofIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Location_id_idx" ON "Location" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_lastUpdated_idx" ON "Location" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_projectId_lastUpdated_idx" ON "Location" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_projectId_idx" ON "Location" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location__source_idx" ON "Location" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location__profile_idx" ON "Location" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___version_idx" ON "Location" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_compartments_idx" ON "Location" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___sharedTokens_idx" ON "Location" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___sharedTokensTextTrgm_idx" ON "Location" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location____tag_idx" ON "Location" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location____tagTextTrgm_idx" ON "Location" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_endpoint_idx" ON "Location" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___idnt_idx" ON "Location" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___idntTextTrgm_idx" ON "Location" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_name_idx" ON "Location" USING gin ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_near_idx" ON "Location" ("near")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___operationalStatus_idx" ON "Location" USING gin ("__operationalStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___operationalStatusTextTrgm_idx" ON "Location" USING gin (token_array_to_text("__operationalStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_organization_idx" ON "Location" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_partof_idx" ON "Location" ("partof")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_status_idx" ON "Location" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___type_idx" ON "Location" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___typeTextTrgm_idx" ON "Location" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___physicalType_idx" ON "Location" USING gin ("__physicalType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location___physicalTypeTextTrgm_idx" ON "Location" USING gin (token_array_to_text("__physicalTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Location_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_History_id_idx" ON "Location_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_History_lastUpdated_idx" ON "Location_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Location_History_versionId_idx" ON "Location_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Location_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Location_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Location_Refs_resourceId_targetId_code_idx" ON "Location_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Location_Refs_targetId_code_idx" ON "Location_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Measure" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Measure_id_idx" ON "Measure" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_lastUpdated_idx" ON "Measure" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_projectId_lastUpdated_idx" ON "Measure" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_projectId_idx" ON "Measure" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure__source_idx" ON "Measure" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure__profile_idx" ON "Measure" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___version_idx" ON "Measure" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_compartments_idx" ON "Measure" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___sharedTokens_idx" ON "Measure" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___sharedTokensTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure____tag_idx" ON "Measure" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure____tagTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_composedOf_idx" ON "Measure" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___context_idx" ON "Measure" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___contextTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_contextQuantity_idx" ON "Measure" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___contextType_idx" ON "Measure" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___contextTypeTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_date_idx" ON "Measure" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_projectId_date_idx" ON "Measure" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_dependsOn_idx" ON "Measure" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_derivedFrom_idx" ON "Measure" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_description_idx" ON "Measure" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_effective_idx" ON "Measure" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___idnt_idx" ON "Measure" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___idntTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___jurisdiction_idx" ON "Measure" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___jurisdictionTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_name_idx" ON "Measure" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_predecessor_idx" ON "Measure" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_publisher_idx" ON "Measure" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_status_idx" ON "Measure" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_successor_idx" ON "Measure" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_title_idx" ON "Measure" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___topic_idx" ON "Measure" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure___topicTextTrgm_idx" ON "Measure" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_url_idx" ON "Measure" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_version_idx" ON "Measure" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Measure_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_History_id_idx" ON "Measure_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_History_lastUpdated_idx" ON "Measure_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Measure_History_versionId_idx" ON "Measure_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Measure_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Measure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Measure_Refs_resourceId_targetId_code_idx" ON "Measure_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Measure_Refs_targetId_code_idx" ON "Measure_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MeasureReport" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "evaluatedResource" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "measure" TEXT,
  "patient" TEXT,
  "period" TIMESTAMPTZ,
  "reporter" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__evaluatedResourceIdentifierSort" TEXT,
  "__measureIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__reporterIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT,
  "period_range" TSTZRANGE
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_id_idx" ON "MeasureReport" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_lastUpdated_idx" ON "MeasureReport" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_projectId_lastUpdated_idx" ON "MeasureReport" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_projectId_idx" ON "MeasureReport" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport__source_idx" ON "MeasureReport" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport__profile_idx" ON "MeasureReport" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport___version_idx" ON "MeasureReport" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_compartments_idx" ON "MeasureReport" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport___sharedTokens_idx" ON "MeasureReport" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport___sharedTokensTextTrgm_idx" ON "MeasureReport" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport____tag_idx" ON "MeasureReport" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport____tagTextTrgm_idx" ON "MeasureReport" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_date_idx" ON "MeasureReport" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_projectId_date_idx" ON "MeasureReport" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_evaluatedResource_idx" ON "MeasureReport" USING gin ("evaluatedResource")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport___idnt_idx" ON "MeasureReport" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport___idntTextTrgm_idx" ON "MeasureReport" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_measure_idx" ON "MeasureReport" ("measure")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_patient_idx" ON "MeasureReport" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_period_idx" ON "MeasureReport" ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_reporter_idx" ON "MeasureReport" ("reporter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_status_idx" ON "MeasureReport" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_subject_idx" ON "MeasureReport" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_period_range_idx" ON "MeasureReport" ("period_range")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MeasureReport_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_History_id_idx" ON "MeasureReport_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_History_lastUpdated_idx" ON "MeasureReport_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_History_versionId_idx" ON "MeasureReport_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MeasureReport_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MeasureReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_Refs_resourceId_targetId_code_idx" ON "MeasureReport_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MeasureReport_Refs_targetId_code_idx" ON "MeasureReport_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Media" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "basedOn" TEXT[],
  "created" TIMESTAMPTZ,
  "device" TEXT,
  "encounter" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__modality" UUID[],
  "__modalityText" TEXT[],
  "__modalitySort" TEXT,
  "operator" TEXT,
  "patient" TEXT,
  "__site" UUID[],
  "__siteText" TEXT[],
  "__siteSort" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "__view" UUID[],
  "__viewText" TEXT[],
  "__viewSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__deviceIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__operatorIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Media_id_idx" ON "Media" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_lastUpdated_idx" ON "Media" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_projectId_lastUpdated_idx" ON "Media" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_projectId_idx" ON "Media" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media__source_idx" ON "Media" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media__profile_idx" ON "Media" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___version_idx" ON "Media" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_compartments_idx" ON "Media" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___sharedTokens_idx" ON "Media" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___sharedTokensTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media____tag_idx" ON "Media" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media____tagTextTrgm_idx" ON "Media" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_basedOn_idx" ON "Media" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_created_idx" ON "Media" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_device_idx" ON "Media" ("device")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_encounter_idx" ON "Media" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___idnt_idx" ON "Media" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___idntTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___modality_idx" ON "Media" USING gin ("__modality")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___modalityTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__modalityText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_operator_idx" ON "Media" ("operator")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_patient_idx" ON "Media" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___site_idx" ON "Media" USING gin ("__site")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___siteTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__siteText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_status_idx" ON "Media" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_subject_idx" ON "Media" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___type_idx" ON "Media" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___typeTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___view_idx" ON "Media" USING gin ("__view")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media___viewTextTrgm_idx" ON "Media" USING gin (token_array_to_text("__viewText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Media_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_History_id_idx" ON "Media_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_History_lastUpdated_idx" ON "Media_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Media_History_versionId_idx" ON "Media_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Media_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Media_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Media_Refs_resourceId_targetId_code_idx" ON "Media_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Media_Refs_targetId_code_idx" ON "Media_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Medication" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "expirationDate" TIMESTAMPTZ,
  "__form" UUID[],
  "__formText" TEXT[],
  "__formSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "ingredient" TEXT[],
  "__ingredientCode" UUID[],
  "__ingredientCodeText" TEXT[],
  "__ingredientCodeSort" TEXT,
  "lotNumber" TEXT,
  "manufacturer" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__ingredientIdentifierSort" TEXT,
  "__manufacturerIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Medication_id_idx" ON "Medication" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_lastUpdated_idx" ON "Medication" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_projectId_lastUpdated_idx" ON "Medication" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_projectId_idx" ON "Medication" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication__source_idx" ON "Medication" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication__profile_idx" ON "Medication" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___version_idx" ON "Medication" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_compartments_idx" ON "Medication" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___sharedTokens_idx" ON "Medication" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___sharedTokensTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication____tag_idx" ON "Medication" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication____tagTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___code_idx" ON "Medication" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___codeTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_expirationDate_idx" ON "Medication" ("expirationDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___form_idx" ON "Medication" USING gin ("__form")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___formTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("__formText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___idnt_idx" ON "Medication" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___idntTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_ingredient_idx" ON "Medication" USING gin ("ingredient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___ingredientCode_idx" ON "Medication" USING gin ("__ingredientCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication___ingredientCodeTextTrgm_idx" ON "Medication" USING gin (token_array_to_text("__ingredientCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_lotNumber_idx" ON "Medication" ("lotNumber")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_manufacturer_idx" ON "Medication" ("manufacturer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_status_idx" ON "Medication" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Medication_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_History_id_idx" ON "Medication_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_History_lastUpdated_idx" ON "Medication_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Medication_History_versionId_idx" ON "Medication_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Medication_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Medication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Medication_Refs_resourceId_targetId_code_idx" ON "Medication_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Medication_Refs_targetId_code_idx" ON "Medication_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationAdministration" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "context" TEXT,
  "device" TEXT[],
  "effectiveTime" TIMESTAMPTZ,
  "medication" TEXT,
  "performer" TEXT[],
  "__reasonGiven" UUID[],
  "__reasonGivenText" TEXT[],
  "__reasonGivenSort" TEXT,
  "__reasonNotGiven" UUID[],
  "__reasonNotGivenText" TEXT[],
  "__reasonNotGivenSort" TEXT,
  "request" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__contextIdentifierSort" TEXT,
  "__deviceIdentifierSort" TEXT,
  "__medicationIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_id_idx" ON "MedicationAdministration" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_lastUpdated_idx" ON "MedicationAdministration" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_projectId_lastUpdated_idx" ON "MedicationAdministration" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_projectId_idx" ON "MedicationAdministration" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration__source_idx" ON "MedicationAdministration" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration__profile_idx" ON "MedicationAdministration" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___version_idx" ON "MedicationAdministration" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_compartments_idx" ON "MedicationAdministration" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___sharedTokens_idx" ON "MedicationAdministration" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___sharedTokensTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration____tag_idx" ON "MedicationAdministration" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration____tagTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___code_idx" ON "MedicationAdministration" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___codeTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___idnt_idx" ON "MedicationAdministration" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___idntTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_patient_idx" ON "MedicationAdministration" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_context_idx" ON "MedicationAdministration" ("context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_device_idx" ON "MedicationAdministration" USING gin ("device")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_effectiveTime_idx" ON "MedicationAdministration" ("effectiveTime")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_medication_idx" ON "MedicationAdministration" ("medication")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_performer_idx" ON "MedicationAdministration" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___reasonGiven_idx" ON "MedicationAdministration" USING gin ("__reasonGiven")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___reasonGivenTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("__reasonGivenText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___reasonNotGiven_idx" ON "MedicationAdministration" USING gin ("__reasonNotGiven")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration___reasonNotGivenTextTrgm_idx" ON "MedicationAdministration" USING gin (token_array_to_text("__reasonNotGivenText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_request_idx" ON "MedicationAdministration" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_status_idx" ON "MedicationAdministration" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_subject_idx" ON "MedicationAdministration" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationAdministration_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_History_id_idx" ON "MedicationAdministration_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_History_lastUpdated_idx" ON "MedicationAdministration_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_History_versionId_idx" ON "MedicationAdministration_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationAdministration_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicationAdministration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_Refs_resourceId_targetId_code_idx" ON "MedicationAdministration_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationAdministration_Refs_targetId_code_idx" ON "MedicationAdministration_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationDispense" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "medication" TEXT,
  "status" TEXT,
  "context" TEXT,
  "destination" TEXT,
  "performer" TEXT[],
  "prescription" TEXT[],
  "receiver" TEXT[],
  "responsibleparty" TEXT[],
  "subject" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "whenhandedover" TIMESTAMPTZ,
  "whenprepared" TIMESTAMPTZ,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__medicationIdentifierSort" TEXT,
  "__contextIdentifierSort" TEXT,
  "__destinationIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__prescriptionIdentifierSort" TEXT,
  "__receiverIdentifierSort" TEXT,
  "__responsiblepartyIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_id_idx" ON "MedicationDispense" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_lastUpdated_idx" ON "MedicationDispense" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_projectId_lastUpdated_idx" ON "MedicationDispense" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_projectId_idx" ON "MedicationDispense" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense__source_idx" ON "MedicationDispense" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense__profile_idx" ON "MedicationDispense" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___version_idx" ON "MedicationDispense" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_compartments_idx" ON "MedicationDispense" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___sharedTokens_idx" ON "MedicationDispense" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___sharedTokensTextTrgm_idx" ON "MedicationDispense" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense____tag_idx" ON "MedicationDispense" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense____tagTextTrgm_idx" ON "MedicationDispense" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___code_idx" ON "MedicationDispense" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___codeTextTrgm_idx" ON "MedicationDispense" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___idnt_idx" ON "MedicationDispense" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___idntTextTrgm_idx" ON "MedicationDispense" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_patient_idx" ON "MedicationDispense" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_medication_idx" ON "MedicationDispense" ("medication")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_status_idx" ON "MedicationDispense" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_context_idx" ON "MedicationDispense" ("context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_destination_idx" ON "MedicationDispense" ("destination")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_performer_idx" ON "MedicationDispense" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_prescription_idx" ON "MedicationDispense" USING gin ("prescription")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_receiver_idx" ON "MedicationDispense" USING gin ("receiver")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_responsibleparty_idx" ON "MedicationDispense" USING gin ("responsibleparty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_subject_idx" ON "MedicationDispense" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___type_idx" ON "MedicationDispense" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense___typeTextTrgm_idx" ON "MedicationDispense" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_whenhandedover_idx" ON "MedicationDispense" ("whenhandedover")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_whenprepared_idx" ON "MedicationDispense" ("whenprepared")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationDispense_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_History_id_idx" ON "MedicationDispense_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_History_lastUpdated_idx" ON "MedicationDispense_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_History_versionId_idx" ON "MedicationDispense_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationDispense_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicationDispense_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_Refs_resourceId_targetId_code_idx" ON "MedicationDispense_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationDispense_Refs_targetId_code_idx" ON "MedicationDispense_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationKnowledge" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__classification" UUID[],
  "__classificationText" TEXT[],
  "__classificationSort" TEXT,
  "__classificationType" UUID[],
  "__classificationTypeText" TEXT[],
  "__classificationTypeSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__doseform" UUID[],
  "__doseformText" TEXT[],
  "__doseformSort" TEXT,
  "ingredient" TEXT[],
  "__ingredientCode" UUID[],
  "__ingredientCodeText" TEXT[],
  "__ingredientCodeSort" TEXT,
  "manufacturer" TEXT,
  "monitoringProgramName" TEXT[],
  "__monitoringProgramType" UUID[],
  "__monitoringProgramTypeText" TEXT[],
  "__monitoringProgramTypeSort" TEXT,
  "monograph" TEXT[],
  "__monographType" UUID[],
  "__monographTypeText" TEXT[],
  "__monographTypeSort" TEXT,
  "sourceCost" TEXT[],
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__ingredientIdentifierSort" TEXT,
  "__manufacturerIdentifierSort" TEXT,
  "__monographIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_id_idx" ON "MedicationKnowledge" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_lastUpdated_idx" ON "MedicationKnowledge" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_projectId_lastUpdated_idx" ON "MedicationKnowledge" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_projectId_idx" ON "MedicationKnowledge" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge__source_idx" ON "MedicationKnowledge" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge__profile_idx" ON "MedicationKnowledge" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___version_idx" ON "MedicationKnowledge" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_compartments_idx" ON "MedicationKnowledge" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___sharedTokens_idx" ON "MedicationKnowledge" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___sharedTokensTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge____tag_idx" ON "MedicationKnowledge" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge____tagTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___classification_idx" ON "MedicationKnowledge" USING gin ("__classification")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___classificationTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__classificationText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___classificationType_idx" ON "MedicationKnowledge" USING gin ("__classificationType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___classificationTypeTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__classificationTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___code_idx" ON "MedicationKnowledge" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___codeTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___doseform_idx" ON "MedicationKnowledge" USING gin ("__doseform")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___doseformTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__doseformText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_ingredient_idx" ON "MedicationKnowledge" USING gin ("ingredient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___ingredientCode_idx" ON "MedicationKnowledge" USING gin ("__ingredientCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___ingredientCodeTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__ingredientCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_manufacturer_idx" ON "MedicationKnowledge" ("manufacturer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_monitoringProgramName_idx" ON "MedicationKnowledge" USING gin ("monitoringProgramName")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___monitoringProgramType_idx" ON "MedicationKnowledge" USING gin ("__monitoringProgramType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___monitoringProgramTypeTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__monitoringProgramTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_monograph_idx" ON "MedicationKnowledge" USING gin ("monograph")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___monographType_idx" ON "MedicationKnowledge" USING gin ("__monographType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge___monographTypeTextTrgm_idx" ON "MedicationKnowledge" USING gin (token_array_to_text("__monographTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_sourceCost_idx" ON "MedicationKnowledge" USING gin ("sourceCost")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_status_idx" ON "MedicationKnowledge" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationKnowledge_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_History_id_idx" ON "MedicationKnowledge_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_History_lastUpdated_idx" ON "MedicationKnowledge_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_History_versionId_idx" ON "MedicationKnowledge_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationKnowledge_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicationKnowledge_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_Refs_resourceId_targetId_code_idx" ON "MedicationKnowledge_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationKnowledge_Refs_targetId_code_idx" ON "MedicationKnowledge_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "medication" TEXT,
  "status" TEXT,
  "authoredon" TIMESTAMPTZ,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "date" TIMESTAMPTZ[],
  "encounter" TEXT,
  "intendedDispenser" TEXT,
  "intendedPerformer" TEXT,
  "__intendedPerformertypeSort" TEXT,
  "intent" TEXT,
  "priority" TEXT,
  "requester" TEXT,
  "subject" TEXT,
  "priorityOrder" INTEGER,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__medicationIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__intendedDispenserIdentifierSort" TEXT,
  "__intendedPerformerIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_id_idx" ON "MedicationRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_lastUpdated_idx" ON "MedicationRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_projectId_lastUpdated_idx" ON "MedicationRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_projectId_idx" ON "MedicationRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest__source_idx" ON "MedicationRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest__profile_idx" ON "MedicationRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___version_idx" ON "MedicationRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_compartments_idx" ON "MedicationRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___sharedTokens_idx" ON "MedicationRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___sharedTokensTextTrgm_idx" ON "MedicationRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest____tag_idx" ON "MedicationRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest____tagTextTrgm_idx" ON "MedicationRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___code_idx" ON "MedicationRequest" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___codeTextTrgm_idx" ON "MedicationRequest" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___idnt_idx" ON "MedicationRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___idntTextTrgm_idx" ON "MedicationRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_patient_idx" ON "MedicationRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_medication_idx" ON "MedicationRequest" ("medication")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_status_idx" ON "MedicationRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_authoredon_idx" ON "MedicationRequest" ("authoredon")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___category_idx" ON "MedicationRequest" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest___categoryTextTrgm_idx" ON "MedicationRequest" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_date_idx" ON "MedicationRequest" USING gin ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_encounter_idx" ON "MedicationRequest" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_intendedDispenser_idx" ON "MedicationRequest" ("intendedDispenser")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_intendedPerformer_idx" ON "MedicationRequest" ("intendedPerformer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_intent_idx" ON "MedicationRequest" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_priority_idx" ON "MedicationRequest" ("priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_requester_idx" ON "MedicationRequest" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_subject_idx" ON "MedicationRequest" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_priorityOrder_idx" ON "MedicationRequest" ("priorityOrder")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_History_id_idx" ON "MedicationRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_History_lastUpdated_idx" ON "MedicationRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_History_versionId_idx" ON "MedicationRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicationRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_Refs_resourceId_targetId_code_idx" ON "MedicationRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationRequest_Refs_targetId_code_idx" ON "MedicationRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationStatement" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "medication" TEXT,
  "status" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "context" TEXT,
  "effective" TIMESTAMPTZ,
  "partOf" TEXT[],
  "source" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__medicationIdentifierSort" TEXT,
  "__contextIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_id_idx" ON "MedicationStatement" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_lastUpdated_idx" ON "MedicationStatement" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_projectId_lastUpdated_idx" ON "MedicationStatement" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_projectId_idx" ON "MedicationStatement" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement__source_idx" ON "MedicationStatement" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement__profile_idx" ON "MedicationStatement" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___version_idx" ON "MedicationStatement" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_compartments_idx" ON "MedicationStatement" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___sharedTokens_idx" ON "MedicationStatement" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___sharedTokensTextTrgm_idx" ON "MedicationStatement" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement____tag_idx" ON "MedicationStatement" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement____tagTextTrgm_idx" ON "MedicationStatement" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___code_idx" ON "MedicationStatement" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___codeTextTrgm_idx" ON "MedicationStatement" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___idnt_idx" ON "MedicationStatement" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___idntTextTrgm_idx" ON "MedicationStatement" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_patient_idx" ON "MedicationStatement" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_medication_idx" ON "MedicationStatement" ("medication")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_status_idx" ON "MedicationStatement" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___category_idx" ON "MedicationStatement" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement___categoryTextTrgm_idx" ON "MedicationStatement" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_context_idx" ON "MedicationStatement" ("context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_effective_idx" ON "MedicationStatement" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_partOf_idx" ON "MedicationStatement" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_source_idx" ON "MedicationStatement" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_subject_idx" ON "MedicationStatement" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationStatement_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_History_id_idx" ON "MedicationStatement_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_History_lastUpdated_idx" ON "MedicationStatement_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_History_versionId_idx" ON "MedicationStatement_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicationStatement_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicationStatement_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_Refs_resourceId_targetId_code_idx" ON "MedicationStatement_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicationStatement_Refs_targetId_code_idx" ON "MedicationStatement_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProduct" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT[],
  "__nameLanguage" UUID[],
  "__nameLanguageText" TEXT[],
  "__nameLanguageSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_id_idx" ON "MedicinalProduct" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_lastUpdated_idx" ON "MedicinalProduct" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_projectId_lastUpdated_idx" ON "MedicinalProduct" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_projectId_idx" ON "MedicinalProduct" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct__source_idx" ON "MedicinalProduct" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct__profile_idx" ON "MedicinalProduct" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___version_idx" ON "MedicinalProduct" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_compartments_idx" ON "MedicinalProduct" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___sharedTokens_idx" ON "MedicinalProduct" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___sharedTokensTextTrgm_idx" ON "MedicinalProduct" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct____tag_idx" ON "MedicinalProduct" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct____tagTextTrgm_idx" ON "MedicinalProduct" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___idnt_idx" ON "MedicinalProduct" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___idntTextTrgm_idx" ON "MedicinalProduct" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_name_idx" ON "MedicinalProduct" USING gin ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___nameLanguage_idx" ON "MedicinalProduct" USING gin ("__nameLanguage")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct___nameLanguageTextTrgm_idx" ON "MedicinalProduct" USING gin (token_array_to_text("__nameLanguageText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProduct_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_History_id_idx" ON "MedicinalProduct_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_History_lastUpdated_idx" ON "MedicinalProduct_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_History_versionId_idx" ON "MedicinalProduct_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProduct_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProduct_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_Refs_resourceId_targetId_code_idx" ON "MedicinalProduct_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProduct_Refs_targetId_code_idx" ON "MedicinalProduct_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__country" UUID[],
  "__countryText" TEXT[],
  "__countrySort" TEXT,
  "holder" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__status" UUID[],
  "__statusText" TEXT[],
  "__statusSort" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__holderIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPA_id_idx" ON "MedicinalProductAuthorization" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_lastUpdated_idx" ON "MedicinalProductAuthorization" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_projectId_lastUpdated_idx" ON "MedicinalProductAuthorization" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_projectId_idx" ON "MedicinalProductAuthorization" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA__source_idx" ON "MedicinalProductAuthorization" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA__profile_idx" ON "MedicinalProductAuthorization" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___version_idx" ON "MedicinalProductAuthorization" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_compartments_idx" ON "MedicinalProductAuthorization" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___sharedTokens_idx" ON "MedicinalProductAuthorization" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___sharedTokensTextTrgm_idx" ON "MedicinalProductAuthorization" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA____tag_idx" ON "MedicinalProductAuthorization" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA____tagTextTrgm_idx" ON "MedicinalProductAuthorization" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___country_idx" ON "MedicinalProductAuthorization" USING gin ("__country")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___countryTextTrgm_idx" ON "MedicinalProductAuthorization" USING gin (token_array_to_text("__countryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_holder_idx" ON "MedicinalProductAuthorization" ("holder")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___idnt_idx" ON "MedicinalProductAuthorization" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___idntTextTrgm_idx" ON "MedicinalProductAuthorization" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___status_idx" ON "MedicinalProductAuthorization" USING gin ("__status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA___statusTextTrgm_idx" ON "MedicinalProductAuthorization" USING gin (token_array_to_text("__statusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_subject_idx" ON "MedicinalProductAuthorization" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_History_id_idx" ON "MedicinalProductAuthorization_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_History_lastUpdated_idx" ON "MedicinalProductAuthorization_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPA_History_versionId_idx" ON "MedicinalProductAuthorization_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductAuthorization_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductAuthorization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPA_Refs_resourceId_targetId_code_idx" ON "MedicinalProductAuthorization_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPA_Refs_targetId_code_idx" ON "MedicinalProductAuthorization_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "subject" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPC_id_idx" ON "MedicinalProductContraindication" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_lastUpdated_idx" ON "MedicinalProductContraindication" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_projectId_lastUpdated_idx" ON "MedicinalProductContraindication" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_projectId_idx" ON "MedicinalProductContraindication" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC__source_idx" ON "MedicinalProductContraindication" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC__profile_idx" ON "MedicinalProductContraindication" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC___version_idx" ON "MedicinalProductContraindication" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_compartments_idx" ON "MedicinalProductContraindication" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC___sharedTokens_idx" ON "MedicinalProductContraindication" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC___sharedTokensTextTrgm_idx" ON "MedicinalProductContraindication" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC____tag_idx" ON "MedicinalProductContraindication" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC____tagTextTrgm_idx" ON "MedicinalProductContraindication" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_subject_idx" ON "MedicinalProductContraindication" USING gin ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_History_id_idx" ON "MedicinalProductContraindication_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_History_lastUpdated_idx" ON "MedicinalProductContraindication_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPC_History_versionId_idx" ON "MedicinalProductContraindication_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductContraindication_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductContraindication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPC_Refs_resourceId_targetId_code_idx" ON "MedicinalProductContraindication_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPC_Refs_targetId_code_idx" ON "MedicinalProductContraindication_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIndication" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "subject" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_id_idx" ON "MedicinalProductIndication" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_lastUpdated_idx" ON "MedicinalProductIndication" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_projectId_lastUpdated_idx" ON "MedicinalProductIndication" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_projectId_idx" ON "MedicinalProductIndication" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication__source_idx" ON "MedicinalProductIndication" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication__profile_idx" ON "MedicinalProductIndication" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication___version_idx" ON "MedicinalProductIndication" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_compartments_idx" ON "MedicinalProductIndication" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication___sharedTokens_idx" ON "MedicinalProductIndication" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication___sharedTokensTextTrgm_idx" ON "MedicinalProductIndication" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication____tag_idx" ON "MedicinalProductIndication" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication____tagTextTrgm_idx" ON "MedicinalProductIndication" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_subject_idx" ON "MedicinalProductIndication" USING gin ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIndication_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_History_id_idx" ON "MedicinalProductIndication_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_History_lastUpdated_idx" ON "MedicinalProductIndication_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_History_versionId_idx" ON "MedicinalProductIndication_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIndication_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductIndication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_Refs_resourceId_targetId_code_idx" ON "MedicinalProductIndication_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIndication_Refs_targetId_code_idx" ON "MedicinalProductIndication_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_id_idx" ON "MedicinalProductIngredient" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_lastUpdated_idx" ON "MedicinalProductIngredient" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_projectId_lastUpdated_idx" ON "MedicinalProductIngredient" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_projectId_idx" ON "MedicinalProductIngredient" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient__source_idx" ON "MedicinalProductIngredient" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient__profile_idx" ON "MedicinalProductIngredient" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient___version_idx" ON "MedicinalProductIngredient" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_compartments_idx" ON "MedicinalProductIngredient" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient___sharedTokens_idx" ON "MedicinalProductIngredient" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient___sharedTokensTextTrgm_idx" ON "MedicinalProductIngredient" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient____tag_idx" ON "MedicinalProductIngredient" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient____tagTextTrgm_idx" ON "MedicinalProductIngredient" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_History_id_idx" ON "MedicinalProductIngredient_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_History_lastUpdated_idx" ON "MedicinalProductIngredient_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_History_versionId_idx" ON "MedicinalProductIngredient_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductIngredient_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductIngredient_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_Refs_resourceId_targetId_code_idx" ON "MedicinalProductIngredient_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductIngredient_Refs_targetId_code_idx" ON "MedicinalProductIngredient_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "subject" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_id_idx" ON "MedicinalProductInteraction" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_lastUpdated_idx" ON "MedicinalProductInteraction" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_projectId_lastUpdated_idx" ON "MedicinalProductInteraction" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_projectId_idx" ON "MedicinalProductInteraction" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction__source_idx" ON "MedicinalProductInteraction" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction__profile_idx" ON "MedicinalProductInteraction" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction___version_idx" ON "MedicinalProductInteraction" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_compartments_idx" ON "MedicinalProductInteraction" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction___sharedTokens_idx" ON "MedicinalProductInteraction" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction___sharedTokensTextTrgm_idx" ON "MedicinalProductInteraction" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction____tag_idx" ON "MedicinalProductInteraction" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction____tagTextTrgm_idx" ON "MedicinalProductInteraction" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_subject_idx" ON "MedicinalProductInteraction" USING gin ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_History_id_idx" ON "MedicinalProductInteraction_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_History_lastUpdated_idx" ON "MedicinalProductInteraction_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_History_versionId_idx" ON "MedicinalProductInteraction_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductInteraction_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductInteraction_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_Refs_resourceId_targetId_code_idx" ON "MedicinalProductInteraction_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductInteraction_Refs_targetId_code_idx" ON "MedicinalProductInteraction_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_id_idx" ON "MedicinalProductManufactured" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_lastUpdated_idx" ON "MedicinalProductManufactured" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_projectId_lastUpdated_idx" ON "MedicinalProductManufactured" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_projectId_idx" ON "MedicinalProductManufactured" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured__source_idx" ON "MedicinalProductManufactured" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured__profile_idx" ON "MedicinalProductManufactured" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured___version_idx" ON "MedicinalProductManufactured" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_compartments_idx" ON "MedicinalProductManufactured" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured___sharedTokens_idx" ON "MedicinalProductManufactured" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured___sharedTokensTextTrgm_idx" ON "MedicinalProductManufactured" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured____tag_idx" ON "MedicinalProductManufactured" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured____tagTextTrgm_idx" ON "MedicinalProductManufactured" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_History_id_idx" ON "MedicinalProductManufactured_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_History_lastUpdated_idx" ON "MedicinalProductManufactured_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_History_versionId_idx" ON "MedicinalProductManufactured_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductManufactured_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductManufactured_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_Refs_resourceId_targetId_code_idx" ON "MedicinalProductManufactured_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductManufactured_Refs_targetId_code_idx" ON "MedicinalProductManufactured_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "subject" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_id_idx" ON "MedicinalProductPackaged" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_lastUpdated_idx" ON "MedicinalProductPackaged" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_projectId_lastUpdated_idx" ON "MedicinalProductPackaged" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_projectId_idx" ON "MedicinalProductPackaged" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged__source_idx" ON "MedicinalProductPackaged" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged__profile_idx" ON "MedicinalProductPackaged" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged___version_idx" ON "MedicinalProductPackaged" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_compartments_idx" ON "MedicinalProductPackaged" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged___sharedTokens_idx" ON "MedicinalProductPackaged" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged___sharedTokensTextTrgm_idx" ON "MedicinalProductPackaged" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged____tag_idx" ON "MedicinalProductPackaged" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged____tagTextTrgm_idx" ON "MedicinalProductPackaged" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged___idnt_idx" ON "MedicinalProductPackaged" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged___idntTextTrgm_idx" ON "MedicinalProductPackaged" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_subject_idx" ON "MedicinalProductPackaged" USING gin ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_History_id_idx" ON "MedicinalProductPackaged_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_History_lastUpdated_idx" ON "MedicinalProductPackaged_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_History_versionId_idx" ON "MedicinalProductPackaged_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPackaged_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductPackaged_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_Refs_resourceId_targetId_code_idx" ON "MedicinalProductPackaged_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MedicinalProductPackaged_Refs_targetId_code_idx" ON "MedicinalProductPackaged_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__route" UUID[],
  "__routeText" TEXT[],
  "__routeSort" TEXT,
  "__targetSpecies" UUID[],
  "__targetSpeciesText" TEXT[],
  "__targetSpeciesSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPP_id_idx" ON "MedicinalProductPharmaceutical" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_lastUpdated_idx" ON "MedicinalProductPharmaceutical" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_projectId_lastUpdated_idx" ON "MedicinalProductPharmaceutical" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_projectId_idx" ON "MedicinalProductPharmaceutical" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP__source_idx" ON "MedicinalProductPharmaceutical" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP__profile_idx" ON "MedicinalProductPharmaceutical" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___version_idx" ON "MedicinalProductPharmaceutical" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_compartments_idx" ON "MedicinalProductPharmaceutical" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___sharedTokens_idx" ON "MedicinalProductPharmaceutical" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___sharedTokensTextTrgm_idx" ON "MedicinalProductPharmaceutical" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP____tag_idx" ON "MedicinalProductPharmaceutical" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP____tagTextTrgm_idx" ON "MedicinalProductPharmaceutical" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___idnt_idx" ON "MedicinalProductPharmaceutical" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___idntTextTrgm_idx" ON "MedicinalProductPharmaceutical" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___route_idx" ON "MedicinalProductPharmaceutical" USING gin ("__route")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___routeTextTrgm_idx" ON "MedicinalProductPharmaceutical" USING gin (token_array_to_text("__routeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___targetSpecies_idx" ON "MedicinalProductPharmaceutical" USING gin ("__targetSpecies")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP___targetSpeciesTextTrgm_idx" ON "MedicinalProductPharmaceutical" USING gin (token_array_to_text("__targetSpeciesText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_History_id_idx" ON "MedicinalProductPharmaceutical_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_History_lastUpdated_idx" ON "MedicinalProductPharmaceutical_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPP_History_versionId_idx" ON "MedicinalProductPharmaceutical_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductPharmaceutical_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductPharmaceutical_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPP_Refs_resourceId_targetId_code_idx" ON "MedicinalProductPharmaceutical_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPP_Refs_targetId_code_idx" ON "MedicinalProductPharmaceutical_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "subject" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_id_idx" ON "MedicinalProductUndesirableEffect" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_lastUpdated_idx" ON "MedicinalProductUndesirableEffect" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_projectId_lastUpdated_idx" ON "MedicinalProductUndesirableEffect" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_projectId_idx" ON "MedicinalProductUndesirableEffect" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE__source_idx" ON "MedicinalProductUndesirableEffect" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE__profile_idx" ON "MedicinalProductUndesirableEffect" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE___version_idx" ON "MedicinalProductUndesirableEffect" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_compartments_idx" ON "MedicinalProductUndesirableEffect" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE___sharedTokens_idx" ON "MedicinalProductUndesirableEffect" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE___sharedTokensTextTrgm_idx" ON "MedicinalProductUndesirableEffect" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE____tag_idx" ON "MedicinalProductUndesirableEffect" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE____tagTextTrgm_idx" ON "MedicinalProductUndesirableEffect" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_subject_idx" ON "MedicinalProductUndesirableEffect" USING gin ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_History_id_idx" ON "MedicinalProductUndesirableEffect_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_History_lastUpdated_idx" ON "MedicinalProductUndesirableEffect_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_History_versionId_idx" ON "MedicinalProductUndesirableEffect_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MedicinalProductUndesirableEffect_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MedicinalProductUndesirableEffect_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_Refs_resourceId_targetId_code_idx" ON "MedicinalProductUndesirableEffect_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MPUE_Refs_targetId_code_idx" ON "MedicinalProductUndesirableEffect_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "category" TEXT,
  "__event" UUID[],
  "__eventText" TEXT[],
  "__eventSort" TEXT,
  "focus" TEXT[],
  "parent" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__parentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_id_idx" ON "MessageDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_lastUpdated_idx" ON "MessageDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_projectId_lastUpdated_idx" ON "MessageDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_projectId_idx" ON "MessageDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition__source_idx" ON "MessageDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition__profile_idx" ON "MessageDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___version_idx" ON "MessageDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_compartments_idx" ON "MessageDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___sharedTokens_idx" ON "MessageDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___sharedTokensTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition____tag_idx" ON "MessageDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition____tagTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___context_idx" ON "MessageDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___contextTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_contextQuantity_idx" ON "MessageDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___contextType_idx" ON "MessageDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___contextTypeTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_date_idx" ON "MessageDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_projectId_date_idx" ON "MessageDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_description_idx" ON "MessageDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___jurisdiction_idx" ON "MessageDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___jurisdictionTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_name_idx" ON "MessageDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_publisher_idx" ON "MessageDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_status_idx" ON "MessageDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_title_idx" ON "MessageDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_url_idx" ON "MessageDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_version_idx" ON "MessageDefinition" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___idnt_idx" ON "MessageDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___idntTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_category_idx" ON "MessageDefinition" ("category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___event_idx" ON "MessageDefinition" USING gin ("__event")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition___eventTextTrgm_idx" ON "MessageDefinition" USING gin (token_array_to_text("__eventText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_focus_idx" ON "MessageDefinition" USING gin ("focus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_parent_idx" ON "MessageDefinition" USING gin ("parent")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_History_id_idx" ON "MessageDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_History_lastUpdated_idx" ON "MessageDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_History_versionId_idx" ON "MessageDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MessageDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_Refs_resourceId_targetId_code_idx" ON "MessageDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageDefinition_Refs_targetId_code_idx" ON "MessageDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageHeader" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "author" TEXT,
  "code" TEXT,
  "destination" TEXT[],
  "destinationUri" TEXT[],
  "enterer" TEXT,
  "__event" UUID[],
  "__eventText" TEXT[],
  "__eventSort" TEXT,
  "focus" TEXT[],
  "receiver" TEXT[],
  "responseId" TEXT,
  "responsible" TEXT,
  "sender" TEXT,
  "source" TEXT,
  "sourceUri" TEXT,
  "target" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__entererIdentifierSort" TEXT,
  "__focusIdentifierSort" TEXT,
  "__receiverIdentifierSort" TEXT,
  "__responsibleIdentifierSort" TEXT,
  "__senderIdentifierSort" TEXT,
  "__targetIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_id_idx" ON "MessageHeader" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_lastUpdated_idx" ON "MessageHeader" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_projectId_lastUpdated_idx" ON "MessageHeader" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_projectId_idx" ON "MessageHeader" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader__source_idx" ON "MessageHeader" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader__profile_idx" ON "MessageHeader" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader___version_idx" ON "MessageHeader" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_compartments_idx" ON "MessageHeader" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader___sharedTokens_idx" ON "MessageHeader" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader___sharedTokensTextTrgm_idx" ON "MessageHeader" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader____tag_idx" ON "MessageHeader" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader____tagTextTrgm_idx" ON "MessageHeader" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_author_idx" ON "MessageHeader" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_code_idx" ON "MessageHeader" ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_destination_idx" ON "MessageHeader" USING gin ("destination")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_destinationUri_idx" ON "MessageHeader" USING gin ("destinationUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_enterer_idx" ON "MessageHeader" ("enterer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader___event_idx" ON "MessageHeader" USING gin ("__event")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader___eventTextTrgm_idx" ON "MessageHeader" USING gin (token_array_to_text("__eventText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_focus_idx" ON "MessageHeader" USING gin ("focus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_receiver_idx" ON "MessageHeader" USING gin ("receiver")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_responseId_idx" ON "MessageHeader" ("responseId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_responsible_idx" ON "MessageHeader" ("responsible")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_sender_idx" ON "MessageHeader" ("sender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_source_idx" ON "MessageHeader" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_sourceUri_idx" ON "MessageHeader" ("sourceUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_target_idx" ON "MessageHeader" USING gin ("target")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageHeader_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_History_id_idx" ON "MessageHeader_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_History_lastUpdated_idx" ON "MessageHeader_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_History_versionId_idx" ON "MessageHeader_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MessageHeader_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MessageHeader_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_Refs_resourceId_targetId_code_idx" ON "MessageHeader_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MessageHeader_Refs_targetId_code_idx" ON "MessageHeader_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MolecularSequence" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__chromosome" UUID[],
  "__chromosomeText" TEXT[],
  "__chromosomeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__referenceseqid" UUID[],
  "__referenceseqidText" TEXT[],
  "__referenceseqidSort" TEXT,
  "type" TEXT,
  "variantEnd" DOUBLE PRECISION[],
  "variantStart" DOUBLE PRECISION[],
  "windowEnd" DOUBLE PRECISION,
  "windowStart" DOUBLE PRECISION,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_id_idx" ON "MolecularSequence" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_lastUpdated_idx" ON "MolecularSequence" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_projectId_lastUpdated_idx" ON "MolecularSequence" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_projectId_idx" ON "MolecularSequence" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence__source_idx" ON "MolecularSequence" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence__profile_idx" ON "MolecularSequence" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___version_idx" ON "MolecularSequence" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_compartments_idx" ON "MolecularSequence" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___sharedTokens_idx" ON "MolecularSequence" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___sharedTokensTextTrgm_idx" ON "MolecularSequence" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence____tag_idx" ON "MolecularSequence" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence____tagTextTrgm_idx" ON "MolecularSequence" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___chromosome_idx" ON "MolecularSequence" USING gin ("__chromosome")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___chromosomeTextTrgm_idx" ON "MolecularSequence" USING gin (token_array_to_text("__chromosomeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___idnt_idx" ON "MolecularSequence" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___idntTextTrgm_idx" ON "MolecularSequence" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_patient_idx" ON "MolecularSequence" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___referenceseqid_idx" ON "MolecularSequence" USING gin ("__referenceseqid")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence___referenceseqidTextTrgm_idx" ON "MolecularSequence" USING gin (token_array_to_text("__referenceseqidText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_type_idx" ON "MolecularSequence" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_variantEnd_idx" ON "MolecularSequence" USING gin ("variantEnd")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_variantStart_idx" ON "MolecularSequence" USING gin ("variantStart")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_windowEnd_idx" ON "MolecularSequence" ("windowEnd")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_windowStart_idx" ON "MolecularSequence" ("windowStart")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MolecularSequence_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_History_id_idx" ON "MolecularSequence_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_History_lastUpdated_idx" ON "MolecularSequence_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_History_versionId_idx" ON "MolecularSequence_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "MolecularSequence_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "MolecularSequence_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_Refs_resourceId_targetId_code_idx" ON "MolecularSequence_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "MolecularSequence_Refs_targetId_code_idx" ON "MolecularSequence_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NamingSystem" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "contact" TEXT[],
  "idType" TEXT[],
  "kind" TEXT,
  "period" TIMESTAMPTZ[],
  "responsible" TEXT,
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "value" TEXT[],
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_id_idx" ON "NamingSystem" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_lastUpdated_idx" ON "NamingSystem" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_projectId_lastUpdated_idx" ON "NamingSystem" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_projectId_idx" ON "NamingSystem" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem__source_idx" ON "NamingSystem" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem__profile_idx" ON "NamingSystem" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___version_idx" ON "NamingSystem" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_compartments_idx" ON "NamingSystem" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___sharedTokens_idx" ON "NamingSystem" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___sharedTokensTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem____tag_idx" ON "NamingSystem" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem____tagTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___context_idx" ON "NamingSystem" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___contextTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_contextQuantity_idx" ON "NamingSystem" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___contextType_idx" ON "NamingSystem" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___contextTypeTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_date_idx" ON "NamingSystem" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_projectId_date_idx" ON "NamingSystem" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_description_idx" ON "NamingSystem" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___jurisdiction_idx" ON "NamingSystem" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___jurisdictionTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_name_idx" ON "NamingSystem" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_publisher_idx" ON "NamingSystem" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_status_idx" ON "NamingSystem" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_contact_idx" ON "NamingSystem" USING gin ("contact")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_idType_idx" ON "NamingSystem" USING gin ("idType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_kind_idx" ON "NamingSystem" ("kind")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_period_idx" ON "NamingSystem" USING gin ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_responsible_idx" ON "NamingSystem" ("responsible")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___telecom_idx" ON "NamingSystem" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___telecomTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___type_idx" ON "NamingSystem" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem___typeTextTrgm_idx" ON "NamingSystem" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_value_idx" ON "NamingSystem" USING gin ("value")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NamingSystem_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_History_id_idx" ON "NamingSystem_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_History_lastUpdated_idx" ON "NamingSystem_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_History_versionId_idx" ON "NamingSystem_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NamingSystem_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "NamingSystem_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_Refs_resourceId_targetId_code_idx" ON "NamingSystem_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NamingSystem_Refs_targetId_code_idx" ON "NamingSystem_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NutritionOrder" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "__additive" UUID[],
  "__additiveText" TEXT[],
  "__additiveSort" TEXT,
  "datetime" TIMESTAMPTZ,
  "__formula" UUID[],
  "__formulaText" TEXT[],
  "__formulaSort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "__oraldiet" UUID[],
  "__oraldietText" TEXT[],
  "__oraldietSort" TEXT,
  "provider" TEXT,
  "status" TEXT,
  "__supplement" UUID[],
  "__supplementText" TEXT[],
  "__supplementSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__providerIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_id_idx" ON "NutritionOrder" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_lastUpdated_idx" ON "NutritionOrder" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_projectId_lastUpdated_idx" ON "NutritionOrder" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_projectId_idx" ON "NutritionOrder" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder__source_idx" ON "NutritionOrder" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder__profile_idx" ON "NutritionOrder" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___version_idx" ON "NutritionOrder" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_compartments_idx" ON "NutritionOrder" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___sharedTokens_idx" ON "NutritionOrder" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___sharedTokensTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder____tag_idx" ON "NutritionOrder" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder____tagTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___idnt_idx" ON "NutritionOrder" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___idntTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_patient_idx" ON "NutritionOrder" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_encounter_idx" ON "NutritionOrder" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___additive_idx" ON "NutritionOrder" USING gin ("__additive")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___additiveTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__additiveText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_datetime_idx" ON "NutritionOrder" ("datetime")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___formula_idx" ON "NutritionOrder" USING gin ("__formula")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___formulaTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__formulaText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_instantiatesCanonical_idx" ON "NutritionOrder" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_instantiatesUri_idx" ON "NutritionOrder" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___oraldiet_idx" ON "NutritionOrder" USING gin ("__oraldiet")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___oraldietTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__oraldietText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_provider_idx" ON "NutritionOrder" ("provider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_status_idx" ON "NutritionOrder" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___supplement_idx" ON "NutritionOrder" USING gin ("__supplement")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder___supplementTextTrgm_idx" ON "NutritionOrder" USING gin (token_array_to_text("__supplementText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NutritionOrder_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_History_id_idx" ON "NutritionOrder_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_History_lastUpdated_idx" ON "NutritionOrder_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_History_versionId_idx" ON "NutritionOrder_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "NutritionOrder_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "NutritionOrder_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_Refs_resourceId_targetId_code_idx" ON "NutritionOrder_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "NutritionOrder_Refs_targetId_code_idx" ON "NutritionOrder_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Observation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "basedOn" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "__comboCode" UUID[],
  "__comboCodeText" TEXT[],
  "__comboCodeSort" TEXT,
  "__comboDataAbsentReason" UUID[],
  "__comboDataAbsentReasonText" TEXT[],
  "__comboDataAbsentReasonSort" TEXT,
  "__comboValueConcept" UUID[],
  "__comboValueConceptText" TEXT[],
  "__comboValueConceptSort" TEXT,
  "comboValueQuantity" DOUBLE PRECISION[],
  "__componentCode" UUID[],
  "__componentCodeText" TEXT[],
  "__componentCodeSort" TEXT,
  "__componentDataAbsentReasonSort" TEXT,
  "__componentValueConcept" UUID[],
  "__componentValueConceptText" TEXT[],
  "__componentValueConceptSort" TEXT,
  "componentValueQuantity" DOUBLE PRECISION[],
  "__dataAbsentReason" UUID[],
  "__dataAbsentReasonText" TEXT[],
  "__dataAbsentReasonSort" TEXT,
  "derivedFrom" TEXT[],
  "device" TEXT,
  "focus" TEXT[],
  "hasMember" TEXT[],
  "__method" UUID[],
  "__methodText" TEXT[],
  "__methodSort" TEXT,
  "partOf" TEXT[],
  "performer" TEXT[],
  "specimen" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "__valueConcept" UUID[],
  "__valueConceptText" TEXT[],
  "__valueConceptSort" TEXT,
  "valueDate" TIMESTAMPTZ,
  "valueQuantity" DOUBLE PRECISION,
  "valueString" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifier" UUID[],
  "__patientIdentifierText" TEXT[],
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__deviceIdentifierSort" TEXT,
  "__focusIdentifierSort" TEXT,
  "__hasMemberIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__performerIdentifier" UUID[],
  "__performerIdentifierText" TEXT[],
  "__performerIdentifierSort" TEXT,
  "__specimenIdentifierSort" TEXT,
  "__subjectIdentifier" UUID[],
  "__subjectIdentifierText" TEXT[],
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Observation_id_idx" ON "Observation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_lastUpdated_idx" ON "Observation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_projectId_lastUpdated_idx" ON "Observation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_projectId_idx" ON "Observation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation__source_idx" ON "Observation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation__profile_idx" ON "Observation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___version_idx" ON "Observation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_compartments_idx" ON "Observation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___sharedTokens_idx" ON "Observation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___sharedTokensTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation____tag_idx" ON "Observation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation____tagTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___code_idx" ON "Observation" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___codeTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_date_idx" ON "Observation" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_projectId_date_idx" ON "Observation" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___idnt_idx" ON "Observation" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___idntTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_patient_idx" ON "Observation" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_encounter_idx" ON "Observation" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_basedOn_idx" ON "Observation" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___category_idx" ON "Observation" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___categoryTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboCode_idx" ON "Observation" USING gin ("__comboCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboCodeTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__comboCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboDataAbsentReason_idx" ON "Observation" USING gin ("__comboDataAbsentReason")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboDataAbsentReasonTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__comboDataAbsentReasonText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboValueConcept_idx" ON "Observation" USING gin ("__comboValueConcept")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___comboValueConceptTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__comboValueConceptText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_comboValueQuantity_idx" ON "Observation" USING gin ("comboValueQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___componentCode_idx" ON "Observation" USING gin ("__componentCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___componentCodeTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__componentCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___componentValueConcept_idx" ON "Observation" USING gin ("__componentValueConcept")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___componentValueConceptTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__componentValueConceptText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_componentValueQuantity_idx" ON "Observation" USING gin ("componentValueQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___dataAbsentReason_idx" ON "Observation" USING gin ("__dataAbsentReason")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___dataAbsentReasonTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__dataAbsentReasonText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_derivedFrom_idx" ON "Observation" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_device_idx" ON "Observation" ("device")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_focus_idx" ON "Observation" USING gin ("focus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_hasMember_idx" ON "Observation" USING gin ("hasMember")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___method_idx" ON "Observation" USING gin ("__method")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___methodTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__methodText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_partOf_idx" ON "Observation" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_performer_idx" ON "Observation" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_specimen_idx" ON "Observation" ("specimen")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_status_idx" ON "Observation" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_subject_idx" ON "Observation" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___valueConcept_idx" ON "Observation" USING gin ("__valueConcept")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___valueConceptTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__valueConceptText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_valueDate_idx" ON "Observation" ("valueDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_valueQuantity_idx" ON "Observation" ("valueQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_valueString_idx" ON "Observation" ("valueString")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___patientIdnt_idx" ON "Observation" USING gin ("__patientIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___patientIdntTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__patientIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___performerIdnt_idx" ON "Observation" USING gin ("__performerIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___performerIdntTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__performerIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___subjectIdnt_idx" ON "Observation" USING gin ("__subjectIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation___subjectIdntTextTrgm_idx" ON "Observation" USING gin (token_array_to_text("__subjectIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Observation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_History_id_idx" ON "Observation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_History_lastUpdated_idx" ON "Observation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Observation_History_versionId_idx" ON "Observation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Observation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Observation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Observation_Refs_resourceId_targetId_code_idx" ON "Observation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Observation_Refs_targetId_code_idx" ON "Observation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ObservationDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "publisher" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__publisherIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_id_idx" ON "ObservationDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_lastUpdated_idx" ON "ObservationDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_projectId_lastUpdated_idx" ON "ObservationDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_projectId_idx" ON "ObservationDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition__source_idx" ON "ObservationDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition__profile_idx" ON "ObservationDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition___version_idx" ON "ObservationDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_compartments_idx" ON "ObservationDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition___sharedTokens_idx" ON "ObservationDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition___sharedTokensTextTrgm_idx" ON "ObservationDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition____tag_idx" ON "ObservationDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition____tagTextTrgm_idx" ON "ObservationDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition___code_idx" ON "ObservationDefinition" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition___codeTextTrgm_idx" ON "ObservationDefinition" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_publisher_idx" ON "ObservationDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ObservationDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_History_id_idx" ON "ObservationDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_History_lastUpdated_idx" ON "ObservationDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_History_versionId_idx" ON "ObservationDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ObservationDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ObservationDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_Refs_resourceId_targetId_code_idx" ON "ObservationDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ObservationDefinition_Refs_targetId_code_idx" ON "ObservationDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "base" TEXT,
  "code" TEXT,
  "inputProfile" TEXT,
  "instance" BOOLEAN,
  "kind" TEXT,
  "outputProfile" TEXT,
  "system" BOOLEAN,
  "type" BOOLEAN,
  "___compartmentIdentifierSort" TEXT,
  "__baseIdentifierSort" TEXT,
  "__inputProfileIdentifierSort" TEXT,
  "__outputProfileIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_id_idx" ON "OperationDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_lastUpdated_idx" ON "OperationDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_projectId_lastUpdated_idx" ON "OperationDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_projectId_idx" ON "OperationDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition__source_idx" ON "OperationDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition__profile_idx" ON "OperationDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___version_idx" ON "OperationDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_compartments_idx" ON "OperationDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___sharedTokens_idx" ON "OperationDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___sharedTokensTextTrgm_idx" ON "OperationDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition____tag_idx" ON "OperationDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition____tagTextTrgm_idx" ON "OperationDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___context_idx" ON "OperationDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___contextTextTrgm_idx" ON "OperationDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_contextQuantity_idx" ON "OperationDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___contextType_idx" ON "OperationDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___contextTypeTextTrgm_idx" ON "OperationDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_date_idx" ON "OperationDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_projectId_date_idx" ON "OperationDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_description_idx" ON "OperationDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___jurisdiction_idx" ON "OperationDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition___jurisdictionTextTrgm_idx" ON "OperationDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_name_idx" ON "OperationDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_publisher_idx" ON "OperationDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_status_idx" ON "OperationDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_title_idx" ON "OperationDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_url_idx" ON "OperationDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_version_idx" ON "OperationDefinition" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_base_idx" ON "OperationDefinition" ("base")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_code_idx" ON "OperationDefinition" ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_inputProfile_idx" ON "OperationDefinition" ("inputProfile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_instance_idx" ON "OperationDefinition" ("instance")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_kind_idx" ON "OperationDefinition" ("kind")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_outputProfile_idx" ON "OperationDefinition" ("outputProfile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_system_idx" ON "OperationDefinition" ("system")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_type_idx" ON "OperationDefinition" ("type")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_History_id_idx" ON "OperationDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_History_lastUpdated_idx" ON "OperationDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_History_versionId_idx" ON "OperationDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "OperationDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_Refs_resourceId_targetId_code_idx" ON "OperationDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationDefinition_Refs_targetId_code_idx" ON "OperationDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationOutcome" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_id_idx" ON "OperationOutcome" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_lastUpdated_idx" ON "OperationOutcome" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_projectId_lastUpdated_idx" ON "OperationOutcome" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_projectId_idx" ON "OperationOutcome" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome__source_idx" ON "OperationOutcome" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome__profile_idx" ON "OperationOutcome" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome___version_idx" ON "OperationOutcome" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_compartments_idx" ON "OperationOutcome" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome___sharedTokens_idx" ON "OperationOutcome" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome___sharedTokensTextTrgm_idx" ON "OperationOutcome" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome____tag_idx" ON "OperationOutcome" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome____tagTextTrgm_idx" ON "OperationOutcome" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationOutcome_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_History_id_idx" ON "OperationOutcome_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_History_lastUpdated_idx" ON "OperationOutcome_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_History_versionId_idx" ON "OperationOutcome_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OperationOutcome_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "OperationOutcome_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_Refs_resourceId_targetId_code_idx" ON "OperationOutcome_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OperationOutcome_Refs_targetId_code_idx" ON "OperationOutcome_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Organization" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT[],
  "partof" TEXT,
  "phonetic" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__partofIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Organization_id_idx" ON "Organization" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_lastUpdated_idx" ON "Organization" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_projectId_lastUpdated_idx" ON "Organization" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_projectId_idx" ON "Organization" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization__source_idx" ON "Organization" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization__profile_idx" ON "Organization" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___version_idx" ON "Organization" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_compartments_idx" ON "Organization" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___sharedTokens_idx" ON "Organization" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___sharedTokensTextTrgm_idx" ON "Organization" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization____tag_idx" ON "Organization" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization____tagTextTrgm_idx" ON "Organization" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_active_idx" ON "Organization" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_endpoint_idx" ON "Organization" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___idnt_idx" ON "Organization" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___idntTextTrgm_idx" ON "Organization" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_name_idx" ON "Organization" USING gin ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_partof_idx" ON "Organization" ("partof")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_phonetic_idx" ON "Organization" ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___type_idx" ON "Organization" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization___typeTextTrgm_idx" ON "Organization" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Organization_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_History_id_idx" ON "Organization_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_History_lastUpdated_idx" ON "Organization_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Organization_History_versionId_idx" ON "Organization_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Organization_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Organization_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Organization_Refs_resourceId_targetId_code_idx" ON "Organization_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Organization_Refs_targetId_code_idx" ON "Organization_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OrganizationAffiliation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "date" TIMESTAMPTZ,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT[],
  "network" TEXT[],
  "participatingOrganization" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "primaryOrganization" TEXT,
  "__role" UUID[],
  "__roleText" TEXT[],
  "__roleSort" TEXT,
  "service" TEXT[],
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__networkIdentifierSort" TEXT,
  "__participatingOrganizationIdentifierSort" TEXT,
  "__primaryOrganizationIdentifierSort" TEXT,
  "__serviceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_id_idx" ON "OrganizationAffiliation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_lastUpdated_idx" ON "OrganizationAffiliation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_projectId_lastUpdated_idx" ON "OrganizationAffiliation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_projectId_idx" ON "OrganizationAffiliation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation__source_idx" ON "OrganizationAffiliation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation__profile_idx" ON "OrganizationAffiliation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___version_idx" ON "OrganizationAffiliation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_compartments_idx" ON "OrganizationAffiliation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___sharedTokens_idx" ON "OrganizationAffiliation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___sharedTokensTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation____tag_idx" ON "OrganizationAffiliation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation____tagTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_active_idx" ON "OrganizationAffiliation" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_date_idx" ON "OrganizationAffiliation" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_projectId_date_idx" ON "OrganizationAffiliation" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___email_idx" ON "OrganizationAffiliation" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___emailTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_endpoint_idx" ON "OrganizationAffiliation" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___idnt_idx" ON "OrganizationAffiliation" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___idntTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_location_idx" ON "OrganizationAffiliation" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_network_idx" ON "OrganizationAffiliation" USING gin ("network")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_partOrg_idx" ON "OrganizationAffiliation" ("participatingOrganization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___phone_idx" ON "OrganizationAffiliation" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___phoneTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_primOrg_idx" ON "OrganizationAffiliation" ("primaryOrganization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___role_idx" ON "OrganizationAffiliation" USING gin ("__role")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___roleTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__roleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_service_idx" ON "OrganizationAffiliation" USING gin ("service")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___specialty_idx" ON "OrganizationAffiliation" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___specialtyTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___telecom_idx" ON "OrganizationAffiliation" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation___telecomTextTrgm_idx" ON "OrganizationAffiliation" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OrganizationAffiliation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_History_id_idx" ON "OrganizationAffiliation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_History_lastUpdated_idx" ON "OrganizationAffiliation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_History_versionId_idx" ON "OrganizationAffiliation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "OrganizationAffiliation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "OrganizationAffiliation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_Refs_resourceId_targetId_code_idx" ON "OrganizationAffiliation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "OrganizationAffiliation_Refs_targetId_code_idx" ON "OrganizationAffiliation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Parameters" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_id_idx" ON "Parameters" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_lastUpdated_idx" ON "Parameters" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_projectId_lastUpdated_idx" ON "Parameters" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_projectId_idx" ON "Parameters" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters__source_idx" ON "Parameters" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters__profile_idx" ON "Parameters" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters___version_idx" ON "Parameters" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_compartments_idx" ON "Parameters" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters___sharedTokens_idx" ON "Parameters" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters___sharedTokensTextTrgm_idx" ON "Parameters" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters____tag_idx" ON "Parameters" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters____tagTextTrgm_idx" ON "Parameters" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Parameters_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_History_id_idx" ON "Parameters_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_History_lastUpdated_idx" ON "Parameters_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_History_versionId_idx" ON "Parameters_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Parameters_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Parameters_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_Refs_resourceId_targetId_code_idx" ON "Parameters_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Parameters_Refs_targetId_code_idx" ON "Parameters_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Patient" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "birthdate" DATE,
  "deathDate" TIMESTAMPTZ,
  "deceased" BOOLEAN,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "gender" TEXT,
  "generalPractitioner" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__language" UUID[],
  "__languageText" TEXT[],
  "__languageSort" TEXT,
  "link" TEXT[],
  "organization" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "phonetic" TEXT[],
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "ethnicity" TEXT[],
  "genderIdentity" TEXT[],
  "race" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__generalPractitionerIdentifierSort" TEXT,
  "__linkIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Patient_id_idx" ON "Patient" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_lastUpdated_idx" ON "Patient" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_projectId_lastUpdated_idx" ON "Patient" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_projectId_idx" ON "Patient" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient__source_idx" ON "Patient" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient__profile_idx" ON "Patient" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___version_idx" ON "Patient" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_compartments_idx" ON "Patient" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___sharedTokens_idx" ON "Patient" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___sharedTokensTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient____tag_idx" ON "Patient" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient____tagTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_active_idx" ON "Patient" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_birthdate_idx" ON "Patient" ("birthdate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_deathDate_idx" ON "Patient" ("deathDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_deceased_idx" ON "Patient" ("deceased")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___email_idx" ON "Patient" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___emailTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_gender_idx" ON "Patient" ("gender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_generalPractitioner_idx" ON "Patient" USING gin ("generalPractitioner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___idnt_idx" ON "Patient" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___idntTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___language_idx" ON "Patient" USING gin ("__language")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___languageTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__languageText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_link_idx" ON "Patient" USING gin ("link")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_organization_idx" ON "Patient" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___phone_idx" ON "Patient" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___phoneTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_phonetic_idx" ON "Patient" USING gin ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___telecom_idx" ON "Patient" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient___telecomTextTrgm_idx" ON "Patient" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_ethnicity_idx" ON "Patient" USING gin ("ethnicity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_genderIdentity_idx" ON "Patient" USING gin ("genderIdentity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_race_idx" ON "Patient" USING gin ("race")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Patient_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_History_id_idx" ON "Patient_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_History_lastUpdated_idx" ON "Patient_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Patient_History_versionId_idx" ON "Patient_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Patient_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Patient_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Patient_Refs_resourceId_targetId_code_idx" ON "Patient_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Patient_Refs_targetId_code_idx" ON "Patient_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentNotice" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "created" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__paymentStatus" UUID[],
  "__paymentStatusText" TEXT[],
  "__paymentStatusSort" TEXT,
  "provider" TEXT,
  "request" TEXT,
  "response" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__providerIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT,
  "__responseIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_id_idx" ON "PaymentNotice" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_lastUpdated_idx" ON "PaymentNotice" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_projectId_lastUpdated_idx" ON "PaymentNotice" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_projectId_idx" ON "PaymentNotice" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice__source_idx" ON "PaymentNotice" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice__profile_idx" ON "PaymentNotice" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___version_idx" ON "PaymentNotice" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_compartments_idx" ON "PaymentNotice" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___sharedTokens_idx" ON "PaymentNotice" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___sharedTokensTextTrgm_idx" ON "PaymentNotice" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice____tag_idx" ON "PaymentNotice" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice____tagTextTrgm_idx" ON "PaymentNotice" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_created_idx" ON "PaymentNotice" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___idnt_idx" ON "PaymentNotice" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___idntTextTrgm_idx" ON "PaymentNotice" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___paymentStatus_idx" ON "PaymentNotice" USING gin ("__paymentStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice___paymentStatusTextTrgm_idx" ON "PaymentNotice" USING gin (token_array_to_text("__paymentStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_provider_idx" ON "PaymentNotice" ("provider")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_request_idx" ON "PaymentNotice" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_response_idx" ON "PaymentNotice" ("response")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_status_idx" ON "PaymentNotice" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentNotice_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_History_id_idx" ON "PaymentNotice_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_History_lastUpdated_idx" ON "PaymentNotice_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_History_versionId_idx" ON "PaymentNotice_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentNotice_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "PaymentNotice_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_Refs_resourceId_targetId_code_idx" ON "PaymentNotice_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentNotice_Refs_targetId_code_idx" ON "PaymentNotice_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentReconciliation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "created" TIMESTAMPTZ,
  "disposition" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "outcome" TEXT,
  "paymentIssuer" TEXT,
  "request" TEXT,
  "requestor" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__paymentIssuerIdentifierSort" TEXT,
  "__requestIdentifierSort" TEXT,
  "__requestorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_id_idx" ON "PaymentReconciliation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_lastUpdated_idx" ON "PaymentReconciliation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_projectId_lastUpdated_idx" ON "PaymentReconciliation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_projectId_idx" ON "PaymentReconciliation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation__source_idx" ON "PaymentReconciliation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation__profile_idx" ON "PaymentReconciliation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation___version_idx" ON "PaymentReconciliation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_compartments_idx" ON "PaymentReconciliation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation___sharedTokens_idx" ON "PaymentReconciliation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation___sharedTokensTextTrgm_idx" ON "PaymentReconciliation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation____tag_idx" ON "PaymentReconciliation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation____tagTextTrgm_idx" ON "PaymentReconciliation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_created_idx" ON "PaymentReconciliation" ("created")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_disposition_idx" ON "PaymentReconciliation" ("disposition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation___idnt_idx" ON "PaymentReconciliation" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation___idntTextTrgm_idx" ON "PaymentReconciliation" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_outcome_idx" ON "PaymentReconciliation" ("outcome")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_paymentIssuer_idx" ON "PaymentReconciliation" ("paymentIssuer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_request_idx" ON "PaymentReconciliation" ("request")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_requestor_idx" ON "PaymentReconciliation" ("requestor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_status_idx" ON "PaymentReconciliation" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentReconciliation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_History_id_idx" ON "PaymentReconciliation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_History_lastUpdated_idx" ON "PaymentReconciliation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_History_versionId_idx" ON "PaymentReconciliation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PaymentReconciliation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "PaymentReconciliation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_Refs_resourceId_targetId_code_idx" ON "PaymentReconciliation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PaymentReconciliation_Refs_targetId_code_idx" ON "PaymentReconciliation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Person" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "birthdate" DATE,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "gender" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "phonetic" TEXT[],
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "link" TEXT[],
  "organization" TEXT,
  "patient" TEXT[],
  "practitioner" TEXT[],
  "relatedperson" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__linkIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__practitionerIdentifierSort" TEXT,
  "__relatedpersonIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Person_id_idx" ON "Person" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_lastUpdated_idx" ON "Person" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_projectId_lastUpdated_idx" ON "Person" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_projectId_idx" ON "Person" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person__source_idx" ON "Person" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person__profile_idx" ON "Person" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___version_idx" ON "Person" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_compartments_idx" ON "Person" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___sharedTokens_idx" ON "Person" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___sharedTokensTextTrgm_idx" ON "Person" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person____tag_idx" ON "Person" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person____tagTextTrgm_idx" ON "Person" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_birthdate_idx" ON "Person" ("birthdate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___email_idx" ON "Person" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___emailTextTrgm_idx" ON "Person" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_gender_idx" ON "Person" ("gender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___phone_idx" ON "Person" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___phoneTextTrgm_idx" ON "Person" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_phonetic_idx" ON "Person" USING gin ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___telecom_idx" ON "Person" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___telecomTextTrgm_idx" ON "Person" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___idnt_idx" ON "Person" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person___idntTextTrgm_idx" ON "Person" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_link_idx" ON "Person" USING gin ("link")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_organization_idx" ON "Person" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_patient_idx" ON "Person" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_practitioner_idx" ON "Person" USING gin ("practitioner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_relatedperson_idx" ON "Person" USING gin ("relatedperson")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Person_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_History_id_idx" ON "Person_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_History_lastUpdated_idx" ON "Person_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Person_History_versionId_idx" ON "Person_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Person_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Person_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Person_Refs_resourceId_targetId_code_idx" ON "Person_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Person_Refs_targetId_code_idx" ON "Person_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PlanDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "definition" TEXT[],
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__definitionIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_id_idx" ON "PlanDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_lastUpdated_idx" ON "PlanDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_projectId_lastUpdated_idx" ON "PlanDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_projectId_idx" ON "PlanDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition__source_idx" ON "PlanDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition__profile_idx" ON "PlanDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___version_idx" ON "PlanDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_compartments_idx" ON "PlanDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___sharedTokens_idx" ON "PlanDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___sharedTokensTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition____tag_idx" ON "PlanDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition____tagTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_composedOf_idx" ON "PlanDefinition" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___context_idx" ON "PlanDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___contextTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_contextQuantity_idx" ON "PlanDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___contextType_idx" ON "PlanDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___contextTypeTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_date_idx" ON "PlanDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_projectId_date_idx" ON "PlanDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_definition_idx" ON "PlanDefinition" USING gin ("definition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_dependsOn_idx" ON "PlanDefinition" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_derivedFrom_idx" ON "PlanDefinition" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_description_idx" ON "PlanDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_effective_idx" ON "PlanDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___idnt_idx" ON "PlanDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___idntTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___jurisdiction_idx" ON "PlanDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___jurisdictionTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_name_idx" ON "PlanDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_predecessor_idx" ON "PlanDefinition" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_publisher_idx" ON "PlanDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_status_idx" ON "PlanDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_successor_idx" ON "PlanDefinition" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_title_idx" ON "PlanDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___topic_idx" ON "PlanDefinition" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___topicTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___type_idx" ON "PlanDefinition" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition___typeTextTrgm_idx" ON "PlanDefinition" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_url_idx" ON "PlanDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_version_idx" ON "PlanDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PlanDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_History_id_idx" ON "PlanDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_History_lastUpdated_idx" ON "PlanDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_History_versionId_idx" ON "PlanDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PlanDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "PlanDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_Refs_resourceId_targetId_code_idx" ON "PlanDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PlanDefinition_Refs_targetId_code_idx" ON "PlanDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Practitioner" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "gender" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "phonetic" TEXT[],
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "active" BOOLEAN,
  "__communication" UUID[],
  "__communicationText" TEXT[],
  "__communicationSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__qualificationCode" UUID[],
  "__qualificationCodeText" TEXT[],
  "__qualificationCodeSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_id_idx" ON "Practitioner" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_lastUpdated_idx" ON "Practitioner" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_projectId_lastUpdated_idx" ON "Practitioner" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_projectId_idx" ON "Practitioner" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner__source_idx" ON "Practitioner" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner__profile_idx" ON "Practitioner" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___version_idx" ON "Practitioner" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_compartments_idx" ON "Practitioner" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___sharedTokens_idx" ON "Practitioner" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___sharedTokensTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner____tag_idx" ON "Practitioner" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner____tagTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___email_idx" ON "Practitioner" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___emailTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_gender_idx" ON "Practitioner" ("gender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___phone_idx" ON "Practitioner" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___phoneTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_phonetic_idx" ON "Practitioner" USING gin ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___telecom_idx" ON "Practitioner" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___telecomTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_active_idx" ON "Practitioner" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___communication_idx" ON "Practitioner" USING gin ("__communication")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___communicationTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__communicationText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___idnt_idx" ON "Practitioner" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___idntTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___qualificationCode_idx" ON "Practitioner" USING gin ("__qualificationCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner___qualificationCodeTextTrgm_idx" ON "Practitioner" USING gin (token_array_to_text("__qualificationCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Practitioner_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_History_id_idx" ON "Practitioner_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_History_lastUpdated_idx" ON "Practitioner_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_History_versionId_idx" ON "Practitioner_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Practitioner_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Practitioner_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_Refs_resourceId_targetId_code_idx" ON "Practitioner_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Practitioner_Refs_targetId_code_idx" ON "Practitioner_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PractitionerRole" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "active" BOOLEAN,
  "date" TIMESTAMPTZ,
  "endpoint" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "location" TEXT[],
  "organization" TEXT,
  "practitioner" TEXT,
  "__role" UUID[],
  "__roleText" TEXT[],
  "__roleSort" TEXT,
  "service" TEXT[],
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__endpointIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__organizationIdentifierSort" TEXT,
  "__practitionerIdentifierSort" TEXT,
  "__serviceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_id_idx" ON "PractitionerRole" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_lastUpdated_idx" ON "PractitionerRole" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_projectId_lastUpdated_idx" ON "PractitionerRole" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_projectId_idx" ON "PractitionerRole" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole__source_idx" ON "PractitionerRole" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole__profile_idx" ON "PractitionerRole" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___version_idx" ON "PractitionerRole" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_compartments_idx" ON "PractitionerRole" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___sharedTokens_idx" ON "PractitionerRole" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___sharedTokensTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole____tag_idx" ON "PractitionerRole" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole____tagTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___email_idx" ON "PractitionerRole" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___emailTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___phone_idx" ON "PractitionerRole" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___phoneTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___telecom_idx" ON "PractitionerRole" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___telecomTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_active_idx" ON "PractitionerRole" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_date_idx" ON "PractitionerRole" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_projectId_date_idx" ON "PractitionerRole" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_endpoint_idx" ON "PractitionerRole" USING gin ("endpoint")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___idnt_idx" ON "PractitionerRole" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___idntTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_location_idx" ON "PractitionerRole" USING gin ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_organization_idx" ON "PractitionerRole" ("organization")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_practitioner_idx" ON "PractitionerRole" ("practitioner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___role_idx" ON "PractitionerRole" USING gin ("__role")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___roleTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__roleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_service_idx" ON "PractitionerRole" USING gin ("service")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___specialty_idx" ON "PractitionerRole" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole___specialtyTextTrgm_idx" ON "PractitionerRole" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PractitionerRole_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_History_id_idx" ON "PractitionerRole_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_History_lastUpdated_idx" ON "PractitionerRole_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_History_versionId_idx" ON "PractitionerRole_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PractitionerRole_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "PractitionerRole_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_Refs_resourceId_targetId_code_idx" ON "PractitionerRole_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PractitionerRole_Refs_targetId_code_idx" ON "PractitionerRole_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Procedure" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "basedOn" TEXT[],
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "location" TEXT,
  "partOf" TEXT[],
  "performer" TEXT[],
  "__reasonCode" UUID[],
  "__reasonCodeText" TEXT[],
  "__reasonCodeSort" TEXT,
  "reasonReference" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__reasonReferenceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_id_idx" ON "Procedure" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_lastUpdated_idx" ON "Procedure" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_projectId_lastUpdated_idx" ON "Procedure" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_projectId_idx" ON "Procedure" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure__source_idx" ON "Procedure" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure__profile_idx" ON "Procedure" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___version_idx" ON "Procedure" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_compartments_idx" ON "Procedure" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___sharedTokens_idx" ON "Procedure" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___sharedTokensTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure____tag_idx" ON "Procedure" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure____tagTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___code_idx" ON "Procedure" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___codeTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_date_idx" ON "Procedure" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_projectId_date_idx" ON "Procedure" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___idnt_idx" ON "Procedure" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___idntTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_patient_idx" ON "Procedure" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_encounter_idx" ON "Procedure" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_basedOn_idx" ON "Procedure" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___category_idx" ON "Procedure" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___categoryTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_instantiatesCanonical_idx" ON "Procedure" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_instantiatesUri_idx" ON "Procedure" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_location_idx" ON "Procedure" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_partOf_idx" ON "Procedure" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_performer_idx" ON "Procedure" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___reasonCode_idx" ON "Procedure" USING gin ("__reasonCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure___reasonCodeTextTrgm_idx" ON "Procedure" USING gin (token_array_to_text("__reasonCodeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_reasonReference_idx" ON "Procedure" USING gin ("reasonReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_status_idx" ON "Procedure" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_subject_idx" ON "Procedure" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Procedure_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_History_id_idx" ON "Procedure_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_History_lastUpdated_idx" ON "Procedure_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_History_versionId_idx" ON "Procedure_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Procedure_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Procedure_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_Refs_resourceId_targetId_code_idx" ON "Procedure_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Procedure_Refs_targetId_code_idx" ON "Procedure_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Provenance" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "agent" TEXT[],
  "__agentRole" UUID[],
  "__agentRoleText" TEXT[],
  "__agentRoleSort" TEXT,
  "__agentType" UUID[],
  "__agentTypeText" TEXT[],
  "__agentTypeSort" TEXT,
  "entity" TEXT[],
  "location" TEXT,
  "patient" TEXT[],
  "recorded" TIMESTAMPTZ,
  "__signatureType" UUID[],
  "__signatureTypeText" TEXT[],
  "__signatureTypeSort" TEXT,
  "target" TEXT[],
  "when" TIMESTAMPTZ,
  "___compartmentIdentifierSort" TEXT,
  "__agentIdentifierSort" TEXT,
  "__entityIdentifierSort" TEXT,
  "__locationIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__targetIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_id_idx" ON "Provenance" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_lastUpdated_idx" ON "Provenance" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_projectId_lastUpdated_idx" ON "Provenance" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_projectId_idx" ON "Provenance" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance__source_idx" ON "Provenance" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance__profile_idx" ON "Provenance" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___version_idx" ON "Provenance" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_compartments_idx" ON "Provenance" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___sharedTokens_idx" ON "Provenance" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___sharedTokensTextTrgm_idx" ON "Provenance" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance____tag_idx" ON "Provenance" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance____tagTextTrgm_idx" ON "Provenance" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_agent_idx" ON "Provenance" USING gin ("agent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___agentRole_idx" ON "Provenance" USING gin ("__agentRole")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___agentRoleTextTrgm_idx" ON "Provenance" USING gin (token_array_to_text("__agentRoleText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___agentType_idx" ON "Provenance" USING gin ("__agentType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___agentTypeTextTrgm_idx" ON "Provenance" USING gin (token_array_to_text("__agentTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_entity_idx" ON "Provenance" USING gin ("entity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_location_idx" ON "Provenance" ("location")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_patient_idx" ON "Provenance" USING gin ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_recorded_idx" ON "Provenance" ("recorded")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___signatureType_idx" ON "Provenance" USING gin ("__signatureType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance___signatureTypeTextTrgm_idx" ON "Provenance" USING gin (token_array_to_text("__signatureTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_target_idx" ON "Provenance" USING gin ("target")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_when_idx" ON "Provenance" ("when")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Provenance_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_History_id_idx" ON "Provenance_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_History_lastUpdated_idx" ON "Provenance_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_History_versionId_idx" ON "Provenance_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Provenance_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Provenance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_Refs_resourceId_targetId_code_idx" ON "Provenance_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Provenance_Refs_targetId_code_idx" ON "Provenance_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Questionnaire" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "definition" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "subjectType" TEXT[],
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_id_idx" ON "Questionnaire" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_lastUpdated_idx" ON "Questionnaire" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_projectId_lastUpdated_idx" ON "Questionnaire" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_projectId_idx" ON "Questionnaire" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire__source_idx" ON "Questionnaire" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire__profile_idx" ON "Questionnaire" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___version_idx" ON "Questionnaire" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_compartments_idx" ON "Questionnaire" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___sharedTokens_idx" ON "Questionnaire" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___sharedTokensTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire____tag_idx" ON "Questionnaire" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire____tagTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___code_idx" ON "Questionnaire" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___codeTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___context_idx" ON "Questionnaire" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___contextTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_contextQuantity_idx" ON "Questionnaire" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___contextType_idx" ON "Questionnaire" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___contextTypeTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_date_idx" ON "Questionnaire" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_projectId_date_idx" ON "Questionnaire" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_definition_idx" ON "Questionnaire" USING gin ("definition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_description_idx" ON "Questionnaire" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_effective_idx" ON "Questionnaire" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___idnt_idx" ON "Questionnaire" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___idntTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___jurisdiction_idx" ON "Questionnaire" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire___jurisdictionTextTrgm_idx" ON "Questionnaire" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_name_idx" ON "Questionnaire" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_publisher_idx" ON "Questionnaire" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_status_idx" ON "Questionnaire" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_subjectType_idx" ON "Questionnaire" USING gin ("subjectType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_title_idx" ON "Questionnaire" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_url_idx" ON "Questionnaire" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_version_idx" ON "Questionnaire" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Questionnaire_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_History_id_idx" ON "Questionnaire_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_History_lastUpdated_idx" ON "Questionnaire_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_History_versionId_idx" ON "Questionnaire_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Questionnaire_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Questionnaire_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_Refs_resourceId_targetId_code_idx" ON "Questionnaire_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Questionnaire_Refs_targetId_code_idx" ON "Questionnaire_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "QuestionnaireResponse" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "author" TEXT,
  "authored" TIMESTAMPTZ,
  "basedOn" TEXT[],
  "encounter" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "partOf" TEXT[],
  "patient" TEXT,
  "questionnaire" TEXT,
  "source" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__questionnaireIdentifierSort" TEXT,
  "__sourceIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_id_idx" ON "QuestionnaireResponse" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_lastUpdated_idx" ON "QuestionnaireResponse" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_projectId_lastUpdated_idx" ON "QuestionnaireResponse" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_projectId_idx" ON "QuestionnaireResponse" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse__source_idx" ON "QuestionnaireResponse" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse__profile_idx" ON "QuestionnaireResponse" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse___version_idx" ON "QuestionnaireResponse" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_compartments_idx" ON "QuestionnaireResponse" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse___sharedTokens_idx" ON "QuestionnaireResponse" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse___sharedTokensTextTrgm_idx" ON "QuestionnaireResponse" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse____tag_idx" ON "QuestionnaireResponse" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse____tagTextTrgm_idx" ON "QuestionnaireResponse" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_author_idx" ON "QuestionnaireResponse" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_authored_idx" ON "QuestionnaireResponse" ("authored")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_basedOn_idx" ON "QuestionnaireResponse" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_encounter_idx" ON "QuestionnaireResponse" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse___idnt_idx" ON "QuestionnaireResponse" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse___idntTextTrgm_idx" ON "QuestionnaireResponse" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_partOf_idx" ON "QuestionnaireResponse" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_patient_idx" ON "QuestionnaireResponse" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_questionnaire_idx" ON "QuestionnaireResponse" ("questionnaire")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_source_idx" ON "QuestionnaireResponse" ("source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_status_idx" ON "QuestionnaireResponse" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_subject_idx" ON "QuestionnaireResponse" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "QuestionnaireResponse_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_History_id_idx" ON "QuestionnaireResponse_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_History_lastUpdated_idx" ON "QuestionnaireResponse_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_History_versionId_idx" ON "QuestionnaireResponse_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "QuestionnaireResponse_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "QuestionnaireResponse_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_Refs_resourceId_targetId_code_idx" ON "QuestionnaireResponse_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "QuestionnaireResponse_Refs_targetId_code_idx" ON "QuestionnaireResponse_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RelatedPerson" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "birthdate" DATE,
  "__email" UUID[],
  "__emailText" TEXT[],
  "__emailSort" TEXT,
  "gender" TEXT,
  "__phone" UUID[],
  "__phoneText" TEXT[],
  "__phoneSort" TEXT,
  "phonetic" TEXT[],
  "__telecom" UUID[],
  "__telecomText" TEXT[],
  "__telecomSort" TEXT,
  "active" BOOLEAN,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "__relationship" UUID[],
  "__relationshipText" TEXT[],
  "__relationshipSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_id_idx" ON "RelatedPerson" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_lastUpdated_idx" ON "RelatedPerson" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_projectId_lastUpdated_idx" ON "RelatedPerson" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_projectId_idx" ON "RelatedPerson" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson__source_idx" ON "RelatedPerson" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson__profile_idx" ON "RelatedPerson" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___version_idx" ON "RelatedPerson" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_compartments_idx" ON "RelatedPerson" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___sharedTokens_idx" ON "RelatedPerson" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___sharedTokensTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson____tag_idx" ON "RelatedPerson" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson____tagTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_birthdate_idx" ON "RelatedPerson" ("birthdate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___email_idx" ON "RelatedPerson" USING gin ("__email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___emailTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__emailText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_gender_idx" ON "RelatedPerson" ("gender")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___phone_idx" ON "RelatedPerson" USING gin ("__phone")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___phoneTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__phoneText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_phonetic_idx" ON "RelatedPerson" USING gin ("phonetic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___telecom_idx" ON "RelatedPerson" USING gin ("__telecom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___telecomTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__telecomText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_active_idx" ON "RelatedPerson" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___idnt_idx" ON "RelatedPerson" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___idntTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_patient_idx" ON "RelatedPerson" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___relationship_idx" ON "RelatedPerson" USING gin ("__relationship")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson___relationshipTextTrgm_idx" ON "RelatedPerson" USING gin (token_array_to_text("__relationshipText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RelatedPerson_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_History_id_idx" ON "RelatedPerson_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_History_lastUpdated_idx" ON "RelatedPerson_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_History_versionId_idx" ON "RelatedPerson_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RelatedPerson_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "RelatedPerson_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_Refs_resourceId_targetId_code_idx" ON "RelatedPerson_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RelatedPerson_Refs_targetId_code_idx" ON "RelatedPerson_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RequestGroup" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "author" TEXT,
  "authored" TIMESTAMPTZ,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "encounter" TEXT,
  "__groupIdentifier" UUID[],
  "__groupIdentifierText" TEXT[],
  "__groupIdentifierSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "intent" TEXT,
  "participant" TEXT[],
  "patient" TEXT,
  "priority" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "priorityOrder" INTEGER,
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__participantIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_id_idx" ON "RequestGroup" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_lastUpdated_idx" ON "RequestGroup" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_projectId_lastUpdated_idx" ON "RequestGroup" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_projectId_idx" ON "RequestGroup" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup__source_idx" ON "RequestGroup" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup__profile_idx" ON "RequestGroup" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___version_idx" ON "RequestGroup" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_compartments_idx" ON "RequestGroup" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___sharedTokens_idx" ON "RequestGroup" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___sharedTokensTextTrgm_idx" ON "RequestGroup" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup____tag_idx" ON "RequestGroup" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup____tagTextTrgm_idx" ON "RequestGroup" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_author_idx" ON "RequestGroup" ("author")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_authored_idx" ON "RequestGroup" ("authored")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___code_idx" ON "RequestGroup" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___codeTextTrgm_idx" ON "RequestGroup" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_encounter_idx" ON "RequestGroup" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___groupIdnt_idx" ON "RequestGroup" USING gin ("__groupIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___groupIdntTextTrgm_idx" ON "RequestGroup" USING gin (token_array_to_text("__groupIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___idnt_idx" ON "RequestGroup" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup___idntTextTrgm_idx" ON "RequestGroup" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_instantiatesCanonical_idx" ON "RequestGroup" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_instantiatesUri_idx" ON "RequestGroup" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_intent_idx" ON "RequestGroup" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_participant_idx" ON "RequestGroup" USING gin ("participant")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_patient_idx" ON "RequestGroup" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_priority_idx" ON "RequestGroup" ("priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_status_idx" ON "RequestGroup" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_subject_idx" ON "RequestGroup" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_priorityOrder_idx" ON "RequestGroup" ("priorityOrder")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RequestGroup_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_History_id_idx" ON "RequestGroup_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_History_lastUpdated_idx" ON "RequestGroup_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_History_versionId_idx" ON "RequestGroup_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RequestGroup_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "RequestGroup_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_Refs_resourceId_targetId_code_idx" ON "RequestGroup_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RequestGroup_Refs_targetId_code_idx" ON "RequestGroup_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_id_idx" ON "ResearchDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_lastUpdated_idx" ON "ResearchDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_projectId_lastUpdated_idx" ON "ResearchDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_projectId_idx" ON "ResearchDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition__source_idx" ON "ResearchDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition__profile_idx" ON "ResearchDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___version_idx" ON "ResearchDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_compartments_idx" ON "ResearchDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___sharedTokens_idx" ON "ResearchDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___sharedTokensTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition____tag_idx" ON "ResearchDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition____tagTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_composedOf_idx" ON "ResearchDefinition" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___context_idx" ON "ResearchDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___contextTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_contextQuantity_idx" ON "ResearchDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___contextType_idx" ON "ResearchDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___contextTypeTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_date_idx" ON "ResearchDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_projectId_date_idx" ON "ResearchDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_dependsOn_idx" ON "ResearchDefinition" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_derivedFrom_idx" ON "ResearchDefinition" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_description_idx" ON "ResearchDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_effective_idx" ON "ResearchDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___idnt_idx" ON "ResearchDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___idntTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___jurisdiction_idx" ON "ResearchDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___jurisdictionTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_name_idx" ON "ResearchDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_predecessor_idx" ON "ResearchDefinition" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_publisher_idx" ON "ResearchDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_status_idx" ON "ResearchDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_successor_idx" ON "ResearchDefinition" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_title_idx" ON "ResearchDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___topic_idx" ON "ResearchDefinition" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition___topicTextTrgm_idx" ON "ResearchDefinition" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_url_idx" ON "ResearchDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_version_idx" ON "ResearchDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_History_id_idx" ON "ResearchDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_History_lastUpdated_idx" ON "ResearchDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_History_versionId_idx" ON "ResearchDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ResearchDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_Refs_resourceId_targetId_code_idx" ON "ResearchDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchDefinition_Refs_targetId_code_idx" ON "ResearchDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchElementDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "composedOf" TEXT[],
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "dependsOn" TEXT[],
  "derivedFrom" TEXT[],
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "predecessor" TEXT[],
  "publisher" TEXT,
  "status" TEXT,
  "successor" TEXT[],
  "title" TEXT,
  "__topic" UUID[],
  "__topicText" TEXT[],
  "__topicSort" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__composedOfIdentifierSort" TEXT,
  "__dependsOnIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT,
  "__predecessorIdentifierSort" TEXT,
  "__successorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_id_idx" ON "ResearchElementDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_lastUpdated_idx" ON "ResearchElementDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_projectId_lastUpdated_idx" ON "ResearchElementDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_projectId_idx" ON "ResearchElementDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition__source_idx" ON "ResearchElementDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition__profile_idx" ON "ResearchElementDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___version_idx" ON "ResearchElementDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_compartments_idx" ON "ResearchElementDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___sharedTokens_idx" ON "ResearchElementDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___sharedTokensTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition____tag_idx" ON "ResearchElementDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition____tagTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_composedOf_idx" ON "ResearchElementDefinition" USING gin ("composedOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___context_idx" ON "ResearchElementDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___contextTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_contextQuantity_idx" ON "ResearchElementDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___contextType_idx" ON "ResearchElementDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___contextTypeTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_date_idx" ON "ResearchElementDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_projectId_date_idx" ON "ResearchElementDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_dependsOn_idx" ON "ResearchElementDefinition" USING gin ("dependsOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_derivedFrom_idx" ON "ResearchElementDefinition" USING gin ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_description_idx" ON "ResearchElementDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_effective_idx" ON "ResearchElementDefinition" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___idnt_idx" ON "ResearchElementDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___idntTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___jurisdiction_idx" ON "ResearchElementDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___jurisdictionTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_name_idx" ON "ResearchElementDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_predecessor_idx" ON "ResearchElementDefinition" USING gin ("predecessor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_publisher_idx" ON "ResearchElementDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_status_idx" ON "ResearchElementDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_successor_idx" ON "ResearchElementDefinition" USING gin ("successor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_title_idx" ON "ResearchElementDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___topic_idx" ON "ResearchElementDefinition" USING gin ("__topic")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition___topicTextTrgm_idx" ON "ResearchElementDefinition" USING gin (token_array_to_text("__topicText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_url_idx" ON "ResearchElementDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_version_idx" ON "ResearchElementDefinition" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchElementDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_History_id_idx" ON "ResearchElementDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_History_lastUpdated_idx" ON "ResearchElementDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_History_versionId_idx" ON "ResearchElementDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchElementDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ResearchElementDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_Refs_resourceId_targetId_code_idx" ON "ResearchElementDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchElementDefinition_Refs_targetId_code_idx" ON "ResearchElementDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchStudy" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__categorySort" TEXT,
  "date" TIMESTAMPTZ,
  "__focusSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__keyword" UUID[],
  "__keywordText" TEXT[],
  "__keywordSort" TEXT,
  "__locationSort" TEXT,
  "partof" TEXT[],
  "principalinvestigator" TEXT,
  "protocol" TEXT[],
  "site" TEXT[],
  "sponsor" TEXT,
  "status" TEXT,
  "title" TEXT,
  "__classifierSort" TEXT,
  "__condition" UUID[],
  "__conditionText" TEXT[],
  "__conditionSort" TEXT,
  "description" TEXT,
  "eligibility" TEXT,
  "name" TEXT,
  "objectiveDescription" TEXT[],
  "__objectiveTypeSort" TEXT,
  "partOf" TEXT[],
  "__phase" UUID[],
  "__phaseText" TEXT[],
  "__phaseSort" TEXT,
  "recruitmentActual" DOUBLE PRECISION,
  "recruitmentTarget" DOUBLE PRECISION,
  "__regionSort" TEXT,
  "__studyDesign" UUID[],
  "__studyDesignText" TEXT[],
  "__studyDesignSort" TEXT,
  "outcomeMeasureReference" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__partofIdentifierSort" TEXT,
  "__principalinvestigatorIdentifierSort" TEXT,
  "__protocolIdentifierSort" TEXT,
  "__siteIdentifierSort" TEXT,
  "__sponsorIdentifierSort" TEXT,
  "__eligibilityIdentifier" UUID[],
  "__eligibilityIdentifierText" TEXT[],
  "__eligibilityIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__outcomeMeasureReferenceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_id_idx" ON "ResearchStudy" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_lastUpdated_idx" ON "ResearchStudy" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_projectId_lastUpdated_idx" ON "ResearchStudy" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_projectId_idx" ON "ResearchStudy" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy__source_idx" ON "ResearchStudy" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy__profile_idx" ON "ResearchStudy" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___version_idx" ON "ResearchStudy" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_compartments_idx" ON "ResearchStudy" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___sharedTokens_idx" ON "ResearchStudy" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___sharedTokensTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy____tag_idx" ON "ResearchStudy" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy____tagTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_date_idx" ON "ResearchStudy" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_projectId_date_idx" ON "ResearchStudy" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___idnt_idx" ON "ResearchStudy" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___idntTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___keyword_idx" ON "ResearchStudy" USING gin ("__keyword")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___keywordTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__keywordText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_partof_idx" ON "ResearchStudy" USING gin ("partof")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_principalinvestigator_idx" ON "ResearchStudy" ("principalinvestigator")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_protocol_idx" ON "ResearchStudy" USING gin ("protocol")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_site_idx" ON "ResearchStudy" USING gin ("site")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_sponsor_idx" ON "ResearchStudy" ("sponsor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_status_idx" ON "ResearchStudy" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_title_idx" ON "ResearchStudy" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___condition_idx" ON "ResearchStudy" USING gin ("__condition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___conditionTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__conditionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_description_idx" ON "ResearchStudy" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_eligibility_idx" ON "ResearchStudy" ("eligibility")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_name_idx" ON "ResearchStudy" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_objectiveDescription_idx" ON "ResearchStudy" USING gin ("objectiveDescription")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_partOf_idx" ON "ResearchStudy" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___phase_idx" ON "ResearchStudy" USING gin ("__phase")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___phaseTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__phaseText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_recruitmentActual_idx" ON "ResearchStudy" ("recruitmentActual")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_recruitmentTarget_idx" ON "ResearchStudy" ("recruitmentTarget")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___studyDesign_idx" ON "ResearchStudy" USING gin ("__studyDesign")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___studyDesignTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__studyDesignText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_outcomeMeasureReference_idx" ON "ResearchStudy" USING gin ("outcomeMeasureReference")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___eligibilityIdnt_idx" ON "ResearchStudy" USING gin ("__eligibilityIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy___eligibilityIdntTextTrgm_idx" ON "ResearchStudy" USING gin (token_array_to_text("__eligibilityIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchStudy_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_History_id_idx" ON "ResearchStudy_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_History_lastUpdated_idx" ON "ResearchStudy_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_History_versionId_idx" ON "ResearchStudy_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchStudy_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ResearchStudy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_Refs_resourceId_targetId_code_idx" ON "ResearchStudy_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchStudy_Refs_targetId_code_idx" ON "ResearchStudy_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchSubject" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "individual" TEXT,
  "patient" TEXT,
  "status" TEXT,
  "study" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__individualIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__studyIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_id_idx" ON "ResearchSubject" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_lastUpdated_idx" ON "ResearchSubject" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_projectId_lastUpdated_idx" ON "ResearchSubject" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_projectId_idx" ON "ResearchSubject" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject__source_idx" ON "ResearchSubject" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject__profile_idx" ON "ResearchSubject" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject___version_idx" ON "ResearchSubject" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_compartments_idx" ON "ResearchSubject" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject___sharedTokens_idx" ON "ResearchSubject" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject___sharedTokensTextTrgm_idx" ON "ResearchSubject" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject____tag_idx" ON "ResearchSubject" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject____tagTextTrgm_idx" ON "ResearchSubject" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_date_idx" ON "ResearchSubject" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_projectId_date_idx" ON "ResearchSubject" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject___idnt_idx" ON "ResearchSubject" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject___idntTextTrgm_idx" ON "ResearchSubject" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_individual_idx" ON "ResearchSubject" ("individual")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_patient_idx" ON "ResearchSubject" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_status_idx" ON "ResearchSubject" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_study_idx" ON "ResearchSubject" ("study")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchSubject_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_History_id_idx" ON "ResearchSubject_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_History_lastUpdated_idx" ON "ResearchSubject_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_History_versionId_idx" ON "ResearchSubject_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ResearchSubject_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ResearchSubject_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_Refs_resourceId_targetId_code_idx" ON "ResearchSubject_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ResearchSubject_Refs_targetId_code_idx" ON "ResearchSubject_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskAssessment" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "condition" TEXT,
  "__method" UUID[],
  "__methodText" TEXT[],
  "__methodSort" TEXT,
  "performer" TEXT,
  "probability" DOUBLE PRECISION[],
  "__risk" UUID[],
  "__riskText" TEXT[],
  "__riskSort" TEXT,
  "subject" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__conditionIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_id_idx" ON "RiskAssessment" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_lastUpdated_idx" ON "RiskAssessment" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_projectId_lastUpdated_idx" ON "RiskAssessment" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_projectId_idx" ON "RiskAssessment" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment__source_idx" ON "RiskAssessment" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment__profile_idx" ON "RiskAssessment" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___version_idx" ON "RiskAssessment" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_compartments_idx" ON "RiskAssessment" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___sharedTokens_idx" ON "RiskAssessment" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___sharedTokensTextTrgm_idx" ON "RiskAssessment" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment____tag_idx" ON "RiskAssessment" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment____tagTextTrgm_idx" ON "RiskAssessment" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_date_idx" ON "RiskAssessment" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_projectId_date_idx" ON "RiskAssessment" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___idnt_idx" ON "RiskAssessment" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___idntTextTrgm_idx" ON "RiskAssessment" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_patient_idx" ON "RiskAssessment" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_encounter_idx" ON "RiskAssessment" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_condition_idx" ON "RiskAssessment" ("condition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___method_idx" ON "RiskAssessment" USING gin ("__method")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___methodTextTrgm_idx" ON "RiskAssessment" USING gin (token_array_to_text("__methodText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_performer_idx" ON "RiskAssessment" ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_probability_idx" ON "RiskAssessment" USING gin ("probability")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___risk_idx" ON "RiskAssessment" USING gin ("__risk")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment___riskTextTrgm_idx" ON "RiskAssessment" USING gin (token_array_to_text("__riskText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_subject_idx" ON "RiskAssessment" ("subject")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskAssessment_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_History_id_idx" ON "RiskAssessment_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_History_lastUpdated_idx" ON "RiskAssessment_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_History_versionId_idx" ON "RiskAssessment_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskAssessment_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "RiskAssessment_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_Refs_resourceId_targetId_code_idx" ON "RiskAssessment_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskAssessment_Refs_targetId_code_idx" ON "RiskAssessment_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "effective" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_id_idx" ON "RiskEvidenceSynthesis" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_lastUpdated_idx" ON "RiskEvidenceSynthesis" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_projectId_lastUpdated_idx" ON "RiskEvidenceSynthesis" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_projectId_idx" ON "RiskEvidenceSynthesis" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis__source_idx" ON "RiskEvidenceSynthesis" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis__profile_idx" ON "RiskEvidenceSynthesis" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___version_idx" ON "RiskEvidenceSynthesis" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_compartments_idx" ON "RiskEvidenceSynthesis" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___sharedTokens_idx" ON "RiskEvidenceSynthesis" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___sharedTokensTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis____tag_idx" ON "RiskEvidenceSynthesis" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis____tagTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___context_idx" ON "RiskEvidenceSynthesis" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___contextTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_contextQuantity_idx" ON "RiskEvidenceSynthesis" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___contextType_idx" ON "RiskEvidenceSynthesis" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___contextTypeTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_date_idx" ON "RiskEvidenceSynthesis" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_projectId_date_idx" ON "RiskEvidenceSynthesis" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_description_idx" ON "RiskEvidenceSynthesis" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_effective_idx" ON "RiskEvidenceSynthesis" ("effective")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___idnt_idx" ON "RiskEvidenceSynthesis" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___idntTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___jurisdiction_idx" ON "RiskEvidenceSynthesis" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis___jurisdictionTextTrgm_idx" ON "RiskEvidenceSynthesis" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_name_idx" ON "RiskEvidenceSynthesis" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_publisher_idx" ON "RiskEvidenceSynthesis" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_status_idx" ON "RiskEvidenceSynthesis" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_title_idx" ON "RiskEvidenceSynthesis" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_url_idx" ON "RiskEvidenceSynthesis" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_version_idx" ON "RiskEvidenceSynthesis" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_History_id_idx" ON "RiskEvidenceSynthesis_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_History_lastUpdated_idx" ON "RiskEvidenceSynthesis_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_History_versionId_idx" ON "RiskEvidenceSynthesis_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "RiskEvidenceSynthesis_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "RiskEvidenceSynthesis_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_Refs_resourceId_targetId_code_idx" ON "RiskEvidenceSynthesis_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "RiskEvidenceSynthesis_Refs_targetId_code_idx" ON "RiskEvidenceSynthesis_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Schedule" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "actor" TEXT[],
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__serviceCategory" UUID[],
  "__serviceCategoryText" TEXT[],
  "__serviceCategorySort" TEXT,
  "__serviceType" UUID[],
  "__serviceTypeText" TEXT[],
  "__serviceTypeSort" TEXT,
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__actorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_id_idx" ON "Schedule" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_lastUpdated_idx" ON "Schedule" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_projectId_lastUpdated_idx" ON "Schedule" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_projectId_idx" ON "Schedule" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule__source_idx" ON "Schedule" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule__profile_idx" ON "Schedule" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___version_idx" ON "Schedule" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_compartments_idx" ON "Schedule" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___sharedTokens_idx" ON "Schedule" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___sharedTokensTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule____tag_idx" ON "Schedule" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule____tagTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_active_idx" ON "Schedule" ("active")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_actor_idx" ON "Schedule" USING gin ("actor")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_date_idx" ON "Schedule" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_projectId_date_idx" ON "Schedule" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___idnt_idx" ON "Schedule" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___idntTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___serviceCategory_idx" ON "Schedule" USING gin ("__serviceCategory")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___serviceCategoryTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("__serviceCategoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___serviceType_idx" ON "Schedule" USING gin ("__serviceType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___serviceTypeTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("__serviceTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___specialty_idx" ON "Schedule" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule___specialtyTextTrgm_idx" ON "Schedule" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Schedule_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_History_id_idx" ON "Schedule_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_History_lastUpdated_idx" ON "Schedule_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_History_versionId_idx" ON "Schedule_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Schedule_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Schedule_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_Refs_resourceId_targetId_code_idx" ON "Schedule_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Schedule_Refs_targetId_code_idx" ON "Schedule_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SearchParameter" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "url" TEXT,
  "version" TEXT,
  "base" TEXT[],
  "code" TEXT,
  "component" TEXT[],
  "derivedFrom" TEXT,
  "target" TEXT[],
  "type" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__componentIdentifierSort" TEXT,
  "__derivedFromIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_id_idx" ON "SearchParameter" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_lastUpdated_idx" ON "SearchParameter" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_projectId_lastUpdated_idx" ON "SearchParameter" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_projectId_idx" ON "SearchParameter" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter__source_idx" ON "SearchParameter" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter__profile_idx" ON "SearchParameter" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___version_idx" ON "SearchParameter" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_compartments_idx" ON "SearchParameter" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___sharedTokens_idx" ON "SearchParameter" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___sharedTokensTextTrgm_idx" ON "SearchParameter" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter____tag_idx" ON "SearchParameter" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter____tagTextTrgm_idx" ON "SearchParameter" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___context_idx" ON "SearchParameter" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___contextTextTrgm_idx" ON "SearchParameter" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_contextQuantity_idx" ON "SearchParameter" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___contextType_idx" ON "SearchParameter" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___contextTypeTextTrgm_idx" ON "SearchParameter" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_date_idx" ON "SearchParameter" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_projectId_date_idx" ON "SearchParameter" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_description_idx" ON "SearchParameter" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___jurisdiction_idx" ON "SearchParameter" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter___jurisdictionTextTrgm_idx" ON "SearchParameter" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_name_idx" ON "SearchParameter" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_publisher_idx" ON "SearchParameter" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_status_idx" ON "SearchParameter" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_url_idx" ON "SearchParameter" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_version_idx" ON "SearchParameter" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_base_idx" ON "SearchParameter" USING gin ("base")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_code_idx" ON "SearchParameter" ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_component_idx" ON "SearchParameter" USING gin ("component")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_derivedFrom_idx" ON "SearchParameter" ("derivedFrom")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_target_idx" ON "SearchParameter" USING gin ("target")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_type_idx" ON "SearchParameter" ("type")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SearchParameter_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_History_id_idx" ON "SearchParameter_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_History_lastUpdated_idx" ON "SearchParameter_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_History_versionId_idx" ON "SearchParameter_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SearchParameter_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SearchParameter_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_Refs_resourceId_targetId_code_idx" ON "SearchParameter_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SearchParameter_Refs_targetId_code_idx" ON "SearchParameter_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ServiceRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "authored" TIMESTAMPTZ,
  "basedOn" TEXT[],
  "__bodySiteSort" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "instantiatesCanonical" TEXT[],
  "instantiatesUri" TEXT[],
  "intent" TEXT,
  "occurrence" TIMESTAMPTZ,
  "orderDetail" TEXT[],
  "performer" TEXT[],
  "__performerType" UUID[],
  "__performerTypeText" TEXT[],
  "__performerTypeSort" TEXT,
  "priority" TEXT,
  "replaces" TEXT[],
  "requester" TEXT,
  "__requisition" UUID[],
  "__requisitionText" TEXT[],
  "__requisitionSort" TEXT,
  "specimen" TEXT[],
  "status" TEXT,
  "subject" TEXT,
  "priorityOrder" INTEGER,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__instantiatesCanonicalIdentifierSort" TEXT,
  "__performerIdentifierSort" TEXT,
  "__replacesIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__specimenIdentifierSort" TEXT,
  "__subjectIdentifier" UUID[],
  "__subjectIdentifierText" TEXT[],
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_id_idx" ON "ServiceRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_lastUpdated_idx" ON "ServiceRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_projectId_lastUpdated_idx" ON "ServiceRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_projectId_idx" ON "ServiceRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest__source_idx" ON "ServiceRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest__profile_idx" ON "ServiceRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___version_idx" ON "ServiceRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_compartments_idx" ON "ServiceRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___sharedTokens_idx" ON "ServiceRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___sharedTokensTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest____tag_idx" ON "ServiceRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest____tagTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___code_idx" ON "ServiceRequest" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___codeTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___idnt_idx" ON "ServiceRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___idntTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_patient_idx" ON "ServiceRequest" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_encounter_idx" ON "ServiceRequest" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_authored_idx" ON "ServiceRequest" ("authored")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_basedOn_idx" ON "ServiceRequest" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___category_idx" ON "ServiceRequest" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___categoryTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_instantiatesCanonical_idx" ON "ServiceRequest" USING gin ("instantiatesCanonical")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_instantiatesUri_idx" ON "ServiceRequest" USING gin ("instantiatesUri")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_intent_idx" ON "ServiceRequest" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_occurrence_idx" ON "ServiceRequest" ("occurrence")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_orderDetail_idx" ON "ServiceRequest" USING gin ("orderDetail")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_performer_idx" ON "ServiceRequest" USING gin ("performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___performerType_idx" ON "ServiceRequest" USING gin ("__performerType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___performerTypeTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__performerTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_priority_idx" ON "ServiceRequest" ("priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_replaces_idx" ON "ServiceRequest" USING gin ("replaces")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_requester_idx" ON "ServiceRequest" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___requisition_idx" ON "ServiceRequest" USING gin ("__requisition")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___requisitionTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__requisitionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_specimen_idx" ON "ServiceRequest" USING gin ("specimen")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_status_idx" ON "ServiceRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_subject_idx" ON "ServiceRequest" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_priorityOrder_idx" ON "ServiceRequest" ("priorityOrder")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___subjectIdnt_idx" ON "ServiceRequest" USING gin ("__subjectIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest___subjectIdntTextTrgm_idx" ON "ServiceRequest" USING gin (token_array_to_text("__subjectIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ServiceRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_History_id_idx" ON "ServiceRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_History_lastUpdated_idx" ON "ServiceRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_History_versionId_idx" ON "ServiceRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ServiceRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ServiceRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_Refs_resourceId_targetId_code_idx" ON "ServiceRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ServiceRequest_Refs_targetId_code_idx" ON "ServiceRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Slot" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__appointmentType" UUID[],
  "__appointmentTypeText" TEXT[],
  "__appointmentTypeSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "schedule" TEXT,
  "__serviceCategory" UUID[],
  "__serviceCategoryText" TEXT[],
  "__serviceCategorySort" TEXT,
  "__serviceType" UUID[],
  "__serviceTypeText" TEXT[],
  "__serviceTypeSort" TEXT,
  "__specialty" UUID[],
  "__specialtyText" TEXT[],
  "__specialtySort" TEXT,
  "start" TIMESTAMPTZ,
  "status" TEXT,
  "end" TIMESTAMPTZ,
  "___compartmentIdentifierSort" TEXT,
  "__scheduleIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Slot_id_idx" ON "Slot" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_lastUpdated_idx" ON "Slot" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_projectId_lastUpdated_idx" ON "Slot" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_projectId_idx" ON "Slot" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot__source_idx" ON "Slot" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot__profile_idx" ON "Slot" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___version_idx" ON "Slot" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_compartments_idx" ON "Slot" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___sharedTokens_idx" ON "Slot" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___sharedTokensTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot____tag_idx" ON "Slot" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot____tagTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___appointmentType_idx" ON "Slot" USING gin ("__appointmentType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___appointmentTypeTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__appointmentTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___idnt_idx" ON "Slot" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___idntTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_schedule_idx" ON "Slot" ("schedule")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___serviceCategory_idx" ON "Slot" USING gin ("__serviceCategory")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___serviceCategoryTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__serviceCategoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___serviceType_idx" ON "Slot" USING gin ("__serviceType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___serviceTypeTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__serviceTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___specialty_idx" ON "Slot" USING gin ("__specialty")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot___specialtyTextTrgm_idx" ON "Slot" USING gin (token_array_to_text("__specialtyText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_start_idx" ON "Slot" ("start")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_status_idx" ON "Slot" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_end_idx" ON "Slot" ("end")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Slot_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_History_id_idx" ON "Slot_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_History_lastUpdated_idx" ON "Slot_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Slot_History_versionId_idx" ON "Slot_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Slot_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Slot_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Slot_Refs_resourceId_targetId_code_idx" ON "Slot_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Slot_Refs_targetId_code_idx" ON "Slot_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Specimen" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__accession" UUID[],
  "__accessionText" TEXT[],
  "__accessionSort" TEXT,
  "__bodysite" UUID[],
  "__bodysiteText" TEXT[],
  "__bodysiteSort" TEXT,
  "collected" TIMESTAMPTZ,
  "collector" TEXT,
  "__container" UUID[],
  "__containerText" TEXT[],
  "__containerSort" TEXT,
  "__containerId" UUID[],
  "__containerIdText" TEXT[],
  "__containerIdSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "parent" TEXT[],
  "patient" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__collectorIdentifierSort" TEXT,
  "__parentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_id_idx" ON "Specimen" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_lastUpdated_idx" ON "Specimen" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_projectId_lastUpdated_idx" ON "Specimen" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_projectId_idx" ON "Specimen" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen__source_idx" ON "Specimen" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen__profile_idx" ON "Specimen" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___version_idx" ON "Specimen" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_compartments_idx" ON "Specimen" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___sharedTokens_idx" ON "Specimen" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___sharedTokensTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen____tag_idx" ON "Specimen" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen____tagTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___accession_idx" ON "Specimen" USING gin ("__accession")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___accessionTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__accessionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___bodysite_idx" ON "Specimen" USING gin ("__bodysite")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___bodysiteTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__bodysiteText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_collected_idx" ON "Specimen" ("collected")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_collector_idx" ON "Specimen" ("collector")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___container_idx" ON "Specimen" USING gin ("__container")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___containerTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__containerText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___containerId_idx" ON "Specimen" USING gin ("__containerId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___containerIdTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__containerIdText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___idnt_idx" ON "Specimen" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___idntTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_parent_idx" ON "Specimen" USING gin ("parent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_patient_idx" ON "Specimen" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_status_idx" ON "Specimen" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_subject_idx" ON "Specimen" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___type_idx" ON "Specimen" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen___typeTextTrgm_idx" ON "Specimen" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Specimen_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_History_id_idx" ON "Specimen_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_History_lastUpdated_idx" ON "Specimen_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_History_versionId_idx" ON "Specimen_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Specimen_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Specimen_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_Refs_resourceId_targetId_code_idx" ON "Specimen_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Specimen_Refs_targetId_code_idx" ON "Specimen_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SpecimenDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__container" UUID[],
  "__containerText" TEXT[],
  "__containerSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__type" UUID[],
  "__typeText" TEXT[],
  "__typeSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_id_idx" ON "SpecimenDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_lastUpdated_idx" ON "SpecimenDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_projectId_lastUpdated_idx" ON "SpecimenDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_projectId_idx" ON "SpecimenDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition__source_idx" ON "SpecimenDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition__profile_idx" ON "SpecimenDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___version_idx" ON "SpecimenDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_compartments_idx" ON "SpecimenDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___sharedTokens_idx" ON "SpecimenDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___sharedTokensTextTrgm_idx" ON "SpecimenDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition____tag_idx" ON "SpecimenDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition____tagTextTrgm_idx" ON "SpecimenDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___container_idx" ON "SpecimenDefinition" USING gin ("__container")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___containerTextTrgm_idx" ON "SpecimenDefinition" USING gin (token_array_to_text("__containerText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___idnt_idx" ON "SpecimenDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___idntTextTrgm_idx" ON "SpecimenDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___type_idx" ON "SpecimenDefinition" USING gin ("__type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition___typeTextTrgm_idx" ON "SpecimenDefinition" USING gin (token_array_to_text("__typeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SpecimenDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_History_id_idx" ON "SpecimenDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_History_lastUpdated_idx" ON "SpecimenDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_History_versionId_idx" ON "SpecimenDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SpecimenDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SpecimenDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_Refs_resourceId_targetId_code_idx" ON "SpecimenDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SpecimenDefinition_Refs_targetId_code_idx" ON "SpecimenDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureDefinition" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "abstract" BOOLEAN,
  "base" TEXT,
  "basePath" TEXT[],
  "derivation" TEXT,
  "experimental" BOOLEAN,
  "extContext" TEXT[],
  "__keyword" UUID[],
  "__keywordText" TEXT[],
  "__keywordSort" TEXT,
  "kind" TEXT,
  "path" TEXT[],
  "type" TEXT,
  "valueset" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__baseIdentifierSort" TEXT,
  "__valuesetIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_id_idx" ON "StructureDefinition" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_lastUpdated_idx" ON "StructureDefinition" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_projectId_lastUpdated_idx" ON "StructureDefinition" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_projectId_idx" ON "StructureDefinition" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition__source_idx" ON "StructureDefinition" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition__profile_idx" ON "StructureDefinition" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___version_idx" ON "StructureDefinition" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_compartments_idx" ON "StructureDefinition" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___sharedTokens_idx" ON "StructureDefinition" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___sharedTokensTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition____tag_idx" ON "StructureDefinition" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition____tagTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___context_idx" ON "StructureDefinition" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___contextTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_contextQuantity_idx" ON "StructureDefinition" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___contextType_idx" ON "StructureDefinition" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___contextTypeTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_date_idx" ON "StructureDefinition" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_projectId_date_idx" ON "StructureDefinition" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_description_idx" ON "StructureDefinition" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___jurisdiction_idx" ON "StructureDefinition" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___jurisdictionTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_name_idx" ON "StructureDefinition" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_publisher_idx" ON "StructureDefinition" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_status_idx" ON "StructureDefinition" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_title_idx" ON "StructureDefinition" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_url_idx" ON "StructureDefinition" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_version_idx" ON "StructureDefinition" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___idnt_idx" ON "StructureDefinition" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___idntTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_abstract_idx" ON "StructureDefinition" ("abstract")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_base_idx" ON "StructureDefinition" ("base")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_basePath_idx" ON "StructureDefinition" USING gin ("basePath")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_derivation_idx" ON "StructureDefinition" ("derivation")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_experimental_idx" ON "StructureDefinition" ("experimental")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_extContext_idx" ON "StructureDefinition" USING gin ("extContext")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___keyword_idx" ON "StructureDefinition" USING gin ("__keyword")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition___keywordTextTrgm_idx" ON "StructureDefinition" USING gin (token_array_to_text("__keywordText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_kind_idx" ON "StructureDefinition" ("kind")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_path_idx" ON "StructureDefinition" USING gin ("path")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_type_idx" ON "StructureDefinition" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_valueset_idx" ON "StructureDefinition" USING gin ("valueset")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureDefinition_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_History_id_idx" ON "StructureDefinition_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_History_lastUpdated_idx" ON "StructureDefinition_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_History_versionId_idx" ON "StructureDefinition_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureDefinition_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "StructureDefinition_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_Refs_resourceId_targetId_code_idx" ON "StructureDefinition_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureDefinition_Refs_targetId_code_idx" ON "StructureDefinition_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureMap" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_id_idx" ON "StructureMap" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_lastUpdated_idx" ON "StructureMap" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_projectId_lastUpdated_idx" ON "StructureMap" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_projectId_idx" ON "StructureMap" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap__source_idx" ON "StructureMap" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap__profile_idx" ON "StructureMap" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___version_idx" ON "StructureMap" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_compartments_idx" ON "StructureMap" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___sharedTokens_idx" ON "StructureMap" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___sharedTokensTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap____tag_idx" ON "StructureMap" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap____tagTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___context_idx" ON "StructureMap" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___contextTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_contextQuantity_idx" ON "StructureMap" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___contextType_idx" ON "StructureMap" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___contextTypeTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_date_idx" ON "StructureMap" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_projectId_date_idx" ON "StructureMap" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_description_idx" ON "StructureMap" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___jurisdiction_idx" ON "StructureMap" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___jurisdictionTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_name_idx" ON "StructureMap" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_publisher_idx" ON "StructureMap" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_status_idx" ON "StructureMap" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_title_idx" ON "StructureMap" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_url_idx" ON "StructureMap" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_version_idx" ON "StructureMap" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___idnt_idx" ON "StructureMap" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap___idntTextTrgm_idx" ON "StructureMap" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureMap_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_History_id_idx" ON "StructureMap_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_History_lastUpdated_idx" ON "StructureMap_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_History_versionId_idx" ON "StructureMap_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "StructureMap_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "StructureMap_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_Refs_resourceId_targetId_code_idx" ON "StructureMap_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "StructureMap_Refs_targetId_code_idx" ON "StructureMap_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Subscription" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__contact" UUID[],
  "__contactText" TEXT[],
  "__contactSort" TEXT,
  "criteria" TEXT,
  "payload" TEXT,
  "status" TEXT,
  "type" TEXT,
  "url" TEXT,
  "author" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__authorIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_id_idx" ON "Subscription" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_lastUpdated_idx" ON "Subscription" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_projectId_lastUpdated_idx" ON "Subscription" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_projectId_idx" ON "Subscription" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription__source_idx" ON "Subscription" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription__profile_idx" ON "Subscription" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription___version_idx" ON "Subscription" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_compartments_idx" ON "Subscription" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription___sharedTokens_idx" ON "Subscription" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription___sharedTokensTextTrgm_idx" ON "Subscription" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription____tag_idx" ON "Subscription" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription____tagTextTrgm_idx" ON "Subscription" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription___contact_idx" ON "Subscription" USING gin ("__contact")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription___contactTextTrgm_idx" ON "Subscription" USING gin (token_array_to_text("__contactText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_criteria_idx" ON "Subscription" ("criteria")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_payload_idx" ON "Subscription" ("payload")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_status_idx" ON "Subscription" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_type_idx" ON "Subscription" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_url_idx" ON "Subscription" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_author_idx" ON "Subscription" ("author")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Subscription_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_History_id_idx" ON "Subscription_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_History_lastUpdated_idx" ON "Subscription_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_History_versionId_idx" ON "Subscription_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Subscription_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Subscription_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_Refs_resourceId_targetId_code_idx" ON "Subscription_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Subscription_Refs_targetId_code_idx" ON "Subscription_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubscriptionStatus" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_id_idx" ON "SubscriptionStatus" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_lastUpdated_idx" ON "SubscriptionStatus" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_projectId_lastUpdated_idx" ON "SubscriptionStatus" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_projectId_idx" ON "SubscriptionStatus" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus__source_idx" ON "SubscriptionStatus" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus__profile_idx" ON "SubscriptionStatus" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus___version_idx" ON "SubscriptionStatus" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_compartments_idx" ON "SubscriptionStatus" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus___sharedTokens_idx" ON "SubscriptionStatus" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus___sharedTokensTextTrgm_idx" ON "SubscriptionStatus" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus____tag_idx" ON "SubscriptionStatus" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus____tagTextTrgm_idx" ON "SubscriptionStatus" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubscriptionStatus_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_History_id_idx" ON "SubscriptionStatus_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_History_lastUpdated_idx" ON "SubscriptionStatus_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_History_versionId_idx" ON "SubscriptionStatus_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubscriptionStatus_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubscriptionStatus_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_Refs_resourceId_targetId_code_idx" ON "SubscriptionStatus_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubscriptionStatus_Refs_targetId_code_idx" ON "SubscriptionStatus_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Substance" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "__containerIdentifier" UUID[],
  "__containerIdentifierText" TEXT[],
  "__containerIdentifierSort" TEXT,
  "expiry" TIMESTAMPTZ[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "quantity" DOUBLE PRECISION[],
  "status" TEXT,
  "substanceReference" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__substanceReferenceIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Substance_id_idx" ON "Substance" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_lastUpdated_idx" ON "Substance" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_projectId_lastUpdated_idx" ON "Substance" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_projectId_idx" ON "Substance" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance__source_idx" ON "Substance" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance__profile_idx" ON "Substance" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___version_idx" ON "Substance" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_compartments_idx" ON "Substance" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___sharedTokens_idx" ON "Substance" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___sharedTokensTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance____tag_idx" ON "Substance" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance____tagTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___category_idx" ON "Substance" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___categoryTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___code_idx" ON "Substance" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___codeTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___containerIdnt_idx" ON "Substance" USING gin ("__containerIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___containerIdntTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("__containerIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_expiry_idx" ON "Substance" USING gin ("expiry")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___idnt_idx" ON "Substance" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance___idntTextTrgm_idx" ON "Substance" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_quantity_idx" ON "Substance" USING gin ("quantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_status_idx" ON "Substance" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_substanceReference_idx" ON "Substance" USING gin ("substanceReference")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Substance_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_History_id_idx" ON "Substance_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_History_lastUpdated_idx" ON "Substance_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Substance_History_versionId_idx" ON "Substance_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Substance_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Substance_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Substance_Refs_resourceId_targetId_code_idx" ON "Substance_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Substance_Refs_targetId_code_idx" ON "Substance_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_id_idx" ON "SubstanceNucleicAcid" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_lastUpdated_idx" ON "SubstanceNucleicAcid" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_projectId_lastUpdated_idx" ON "SubstanceNucleicAcid" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_projectId_idx" ON "SubstanceNucleicAcid" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid__source_idx" ON "SubstanceNucleicAcid" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid__profile_idx" ON "SubstanceNucleicAcid" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid___version_idx" ON "SubstanceNucleicAcid" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_compartments_idx" ON "SubstanceNucleicAcid" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid___sharedTokens_idx" ON "SubstanceNucleicAcid" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid___sharedTokensTextTrgm_idx" ON "SubstanceNucleicAcid" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid____tag_idx" ON "SubstanceNucleicAcid" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid____tagTextTrgm_idx" ON "SubstanceNucleicAcid" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_History_id_idx" ON "SubstanceNucleicAcid_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_History_lastUpdated_idx" ON "SubstanceNucleicAcid_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_History_versionId_idx" ON "SubstanceNucleicAcid_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceNucleicAcid_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstanceNucleicAcid_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_Refs_resourceId_targetId_code_idx" ON "SubstanceNucleicAcid_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceNucleicAcid_Refs_targetId_code_idx" ON "SubstanceNucleicAcid_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstancePolymer" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_id_idx" ON "SubstancePolymer" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_lastUpdated_idx" ON "SubstancePolymer" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_projectId_lastUpdated_idx" ON "SubstancePolymer" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_projectId_idx" ON "SubstancePolymer" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer__source_idx" ON "SubstancePolymer" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer__profile_idx" ON "SubstancePolymer" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer___version_idx" ON "SubstancePolymer" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_compartments_idx" ON "SubstancePolymer" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer___sharedTokens_idx" ON "SubstancePolymer" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer___sharedTokensTextTrgm_idx" ON "SubstancePolymer" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer____tag_idx" ON "SubstancePolymer" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer____tagTextTrgm_idx" ON "SubstancePolymer" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstancePolymer_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_History_id_idx" ON "SubstancePolymer_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_History_lastUpdated_idx" ON "SubstancePolymer_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_History_versionId_idx" ON "SubstancePolymer_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstancePolymer_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstancePolymer_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_Refs_resourceId_targetId_code_idx" ON "SubstancePolymer_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstancePolymer_Refs_targetId_code_idx" ON "SubstancePolymer_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceProtein" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_id_idx" ON "SubstanceProtein" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_lastUpdated_idx" ON "SubstanceProtein" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_projectId_lastUpdated_idx" ON "SubstanceProtein" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_projectId_idx" ON "SubstanceProtein" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein__source_idx" ON "SubstanceProtein" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein__profile_idx" ON "SubstanceProtein" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein___version_idx" ON "SubstanceProtein" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_compartments_idx" ON "SubstanceProtein" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein___sharedTokens_idx" ON "SubstanceProtein" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein___sharedTokensTextTrgm_idx" ON "SubstanceProtein" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein____tag_idx" ON "SubstanceProtein" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein____tagTextTrgm_idx" ON "SubstanceProtein" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceProtein_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_History_id_idx" ON "SubstanceProtein_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_History_lastUpdated_idx" ON "SubstanceProtein_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_History_versionId_idx" ON "SubstanceProtein_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceProtein_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstanceProtein_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_Refs_resourceId_targetId_code_idx" ON "SubstanceProtein_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceProtein_Refs_targetId_code_idx" ON "SubstanceProtein_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_id_idx" ON "SubstanceReferenceInformation" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_lastUpdated_idx" ON "SubstanceReferenceInformation" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_projectId_lastUpdated_idx" ON "SubstanceReferenceInformation" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_projectId_idx" ON "SubstanceReferenceInformation" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation__source_idx" ON "SubstanceReferenceInformation" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation__profile_idx" ON "SubstanceReferenceInformation" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation___version_idx" ON "SubstanceReferenceInformation" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_compartments_idx" ON "SubstanceReferenceInformation" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation___sharedTokens_idx" ON "SubstanceReferenceInformation" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation___sharedTokensTextTrgm_idx" ON "SubstanceReferenceInformation" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation____tag_idx" ON "SubstanceReferenceInformation" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation____tagTextTrgm_idx" ON "SubstanceReferenceInformation" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_History_id_idx" ON "SubstanceReferenceInformation_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_History_lastUpdated_idx" ON "SubstanceReferenceInformation_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_History_versionId_idx" ON "SubstanceReferenceInformation_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceReferenceInformation_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstanceReferenceInformation_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_Refs_resourceId_targetId_code_idx" ON "SubstanceReferenceInformation_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceReferenceInformation_Refs_targetId_code_idx" ON "SubstanceReferenceInformation_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_id_idx" ON "SubstanceSourceMaterial" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_lastUpdated_idx" ON "SubstanceSourceMaterial" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_projectId_lastUpdated_idx" ON "SubstanceSourceMaterial" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_projectId_idx" ON "SubstanceSourceMaterial" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial__source_idx" ON "SubstanceSourceMaterial" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial__profile_idx" ON "SubstanceSourceMaterial" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial___version_idx" ON "SubstanceSourceMaterial" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_compartments_idx" ON "SubstanceSourceMaterial" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial___sharedTokens_idx" ON "SubstanceSourceMaterial" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial___sharedTokensTextTrgm_idx" ON "SubstanceSourceMaterial" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial____tag_idx" ON "SubstanceSourceMaterial" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial____tagTextTrgm_idx" ON "SubstanceSourceMaterial" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_History_id_idx" ON "SubstanceSourceMaterial_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_History_lastUpdated_idx" ON "SubstanceSourceMaterial_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_History_versionId_idx" ON "SubstanceSourceMaterial_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSourceMaterial_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstanceSourceMaterial_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_Refs_resourceId_targetId_code_idx" ON "SubstanceSourceMaterial_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSourceMaterial_Refs_targetId_code_idx" ON "SubstanceSourceMaterial_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSpecification" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_id_idx" ON "SubstanceSpecification" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_lastUpdated_idx" ON "SubstanceSpecification" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_projectId_lastUpdated_idx" ON "SubstanceSpecification" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_projectId_idx" ON "SubstanceSpecification" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification__source_idx" ON "SubstanceSpecification" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification__profile_idx" ON "SubstanceSpecification" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification___version_idx" ON "SubstanceSpecification" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_compartments_idx" ON "SubstanceSpecification" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification___sharedTokens_idx" ON "SubstanceSpecification" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification___sharedTokensTextTrgm_idx" ON "SubstanceSpecification" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification____tag_idx" ON "SubstanceSpecification" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification____tagTextTrgm_idx" ON "SubstanceSpecification" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification___code_idx" ON "SubstanceSpecification" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification___codeTextTrgm_idx" ON "SubstanceSpecification" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSpecification_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_History_id_idx" ON "SubstanceSpecification_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_History_lastUpdated_idx" ON "SubstanceSpecification_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_History_versionId_idx" ON "SubstanceSpecification_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SubstanceSpecification_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SubstanceSpecification_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_Refs_resourceId_targetId_code_idx" ON "SubstanceSpecification_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SubstanceSpecification_Refs_targetId_code_idx" ON "SubstanceSpecification_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyDelivery" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "receiver" TEXT[],
  "status" TEXT,
  "supplier" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__receiverIdentifierSort" TEXT,
  "__supplierIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_id_idx" ON "SupplyDelivery" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_lastUpdated_idx" ON "SupplyDelivery" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_projectId_lastUpdated_idx" ON "SupplyDelivery" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_projectId_idx" ON "SupplyDelivery" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery__source_idx" ON "SupplyDelivery" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery__profile_idx" ON "SupplyDelivery" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery___version_idx" ON "SupplyDelivery" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_compartments_idx" ON "SupplyDelivery" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery___sharedTokens_idx" ON "SupplyDelivery" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery___sharedTokensTextTrgm_idx" ON "SupplyDelivery" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery____tag_idx" ON "SupplyDelivery" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery____tagTextTrgm_idx" ON "SupplyDelivery" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery___idnt_idx" ON "SupplyDelivery" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery___idntTextTrgm_idx" ON "SupplyDelivery" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_patient_idx" ON "SupplyDelivery" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_receiver_idx" ON "SupplyDelivery" USING gin ("receiver")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_status_idx" ON "SupplyDelivery" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_supplier_idx" ON "SupplyDelivery" ("supplier")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyDelivery_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_History_id_idx" ON "SupplyDelivery_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_History_lastUpdated_idx" ON "SupplyDelivery_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_History_versionId_idx" ON "SupplyDelivery_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyDelivery_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SupplyDelivery_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_Refs_resourceId_targetId_code_idx" ON "SupplyDelivery_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyDelivery_Refs_targetId_code_idx" ON "SupplyDelivery_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "date" TIMESTAMPTZ,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "requester" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "supplier" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT,
  "__supplierIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_id_idx" ON "SupplyRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_lastUpdated_idx" ON "SupplyRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_projectId_lastUpdated_idx" ON "SupplyRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_projectId_idx" ON "SupplyRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest__source_idx" ON "SupplyRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest__profile_idx" ON "SupplyRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___version_idx" ON "SupplyRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_compartments_idx" ON "SupplyRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___sharedTokens_idx" ON "SupplyRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___sharedTokensTextTrgm_idx" ON "SupplyRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest____tag_idx" ON "SupplyRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest____tagTextTrgm_idx" ON "SupplyRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_date_idx" ON "SupplyRequest" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_projectId_date_idx" ON "SupplyRequest" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___idnt_idx" ON "SupplyRequest" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___idntTextTrgm_idx" ON "SupplyRequest" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___category_idx" ON "SupplyRequest" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest___categoryTextTrgm_idx" ON "SupplyRequest" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_requester_idx" ON "SupplyRequest" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_status_idx" ON "SupplyRequest" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_subject_idx" ON "SupplyRequest" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_supplier_idx" ON "SupplyRequest" USING gin ("supplier")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_History_id_idx" ON "SupplyRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_History_lastUpdated_idx" ON "SupplyRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_History_versionId_idx" ON "SupplyRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SupplyRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SupplyRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_Refs_resourceId_targetId_code_idx" ON "SupplyRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SupplyRequest_Refs_targetId_code_idx" ON "SupplyRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Task" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "authoredOn" TIMESTAMPTZ,
  "basedOn" TEXT[],
  "__businessStatus" UUID[],
  "__businessStatusText" TEXT[],
  "__businessStatusSort" TEXT,
  "__code" UUID[],
  "__codeText" TEXT[],
  "__codeSort" TEXT,
  "encounter" TEXT,
  "focus" TEXT,
  "__groupIdentifier" UUID[],
  "__groupIdentifierText" TEXT[],
  "__groupIdentifierSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "intent" TEXT,
  "modified" TIMESTAMPTZ,
  "owner" TEXT,
  "partOf" TEXT[],
  "patient" TEXT,
  "__performer" UUID[],
  "__performerText" TEXT[],
  "__performerSort" TEXT,
  "period" TIMESTAMPTZ,
  "priority" TEXT,
  "requester" TEXT,
  "status" TEXT,
  "subject" TEXT,
  "dueDate" TIMESTAMPTZ,
  "priorityOrder" INTEGER,
  "___compartmentIdentifierSort" TEXT,
  "__basedOnIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__focusIdentifierSort" TEXT,
  "__ownerIdentifierSort" TEXT,
  "__partOfIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__requesterIdentifierSort" TEXT,
  "__subjectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Task_id_idx" ON "Task" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_lastUpdated_idx" ON "Task" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_projectId_lastUpdated_idx" ON "Task" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_projectId_idx" ON "Task" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task__source_idx" ON "Task" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task__profile_idx" ON "Task" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___version_idx" ON "Task" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_compartments_idx" ON "Task" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___sharedTokens_idx" ON "Task" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___sharedTokensTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task____tag_idx" ON "Task" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task____tagTextTrgm_idx" ON "Task" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_authoredOn_idx" ON "Task" ("authoredOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_basedOn_idx" ON "Task" USING gin ("basedOn")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___businessStatus_idx" ON "Task" USING gin ("__businessStatus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___businessStatusTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__businessStatusText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___code_idx" ON "Task" USING gin ("__code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___codeTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__codeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_encounter_idx" ON "Task" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_focus_idx" ON "Task" ("focus")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___groupIdnt_idx" ON "Task" USING gin ("__groupIdentifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___groupIdntTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__groupIdentifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___idnt_idx" ON "Task" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___idntTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_intent_idx" ON "Task" ("intent")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_modified_idx" ON "Task" ("modified")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_owner_idx" ON "Task" ("owner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_partOf_idx" ON "Task" USING gin ("partOf")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_patient_idx" ON "Task" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___performer_idx" ON "Task" USING gin ("__performer")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task___performerTextTrgm_idx" ON "Task" USING gin (token_array_to_text("__performerText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_period_idx" ON "Task" ("period")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_priority_idx" ON "Task" ("priority")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_requester_idx" ON "Task" ("requester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_status_idx" ON "Task" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_subject_idx" ON "Task" ("subject")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_dueDate_idx" ON "Task" ("dueDate")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_priorityOrder_idx" ON "Task" ("priorityOrder")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Task_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_History_id_idx" ON "Task_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_History_lastUpdated_idx" ON "Task_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Task_History_versionId_idx" ON "Task_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Task_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Task_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Task_Refs_resourceId_targetId_code_idx" ON "Task_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Task_Refs_targetId_code_idx" ON "Task_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TerminologyCapabilities" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_id_idx" ON "TerminologyCapabilities" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_lastUpdated_idx" ON "TerminologyCapabilities" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_projectId_lastUpdated_idx" ON "TerminologyCapabilities" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_projectId_idx" ON "TerminologyCapabilities" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities__source_idx" ON "TerminologyCapabilities" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities__profile_idx" ON "TerminologyCapabilities" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___version_idx" ON "TerminologyCapabilities" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_compartments_idx" ON "TerminologyCapabilities" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___sharedTokens_idx" ON "TerminologyCapabilities" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___sharedTokensTextTrgm_idx" ON "TerminologyCapabilities" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities____tag_idx" ON "TerminologyCapabilities" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities____tagTextTrgm_idx" ON "TerminologyCapabilities" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___context_idx" ON "TerminologyCapabilities" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___contextTextTrgm_idx" ON "TerminologyCapabilities" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_contextQuantity_idx" ON "TerminologyCapabilities" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___contextType_idx" ON "TerminologyCapabilities" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___contextTypeTextTrgm_idx" ON "TerminologyCapabilities" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_date_idx" ON "TerminologyCapabilities" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_projectId_date_idx" ON "TerminologyCapabilities" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_description_idx" ON "TerminologyCapabilities" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___jurisdiction_idx" ON "TerminologyCapabilities" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities___jurisdictionTextTrgm_idx" ON "TerminologyCapabilities" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_name_idx" ON "TerminologyCapabilities" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_publisher_idx" ON "TerminologyCapabilities" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_status_idx" ON "TerminologyCapabilities" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_title_idx" ON "TerminologyCapabilities" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_url_idx" ON "TerminologyCapabilities" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_version_idx" ON "TerminologyCapabilities" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TerminologyCapabilities_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_History_id_idx" ON "TerminologyCapabilities_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_History_lastUpdated_idx" ON "TerminologyCapabilities_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_History_versionId_idx" ON "TerminologyCapabilities_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TerminologyCapabilities_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "TerminologyCapabilities_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_Refs_resourceId_targetId_code_idx" ON "TerminologyCapabilities_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TerminologyCapabilities_Refs_targetId_code_idx" ON "TerminologyCapabilities_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestReport" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "issued" TIMESTAMPTZ,
  "participant" TEXT[],
  "result" TEXT,
  "tester" TEXT,
  "testscript" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__testscriptIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_id_idx" ON "TestReport" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_lastUpdated_idx" ON "TestReport" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_projectId_lastUpdated_idx" ON "TestReport" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_projectId_idx" ON "TestReport" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport__source_idx" ON "TestReport" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport__profile_idx" ON "TestReport" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport___version_idx" ON "TestReport" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_compartments_idx" ON "TestReport" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport___sharedTokens_idx" ON "TestReport" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport___sharedTokensTextTrgm_idx" ON "TestReport" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport____tag_idx" ON "TestReport" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport____tagTextTrgm_idx" ON "TestReport" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport___idnt_idx" ON "TestReport" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport___idntTextTrgm_idx" ON "TestReport" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_issued_idx" ON "TestReport" ("issued")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_participant_idx" ON "TestReport" USING gin ("participant")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_result_idx" ON "TestReport" ("result")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_tester_idx" ON "TestReport" ("tester")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_testscript_idx" ON "TestReport" ("testscript")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestReport_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_History_id_idx" ON "TestReport_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_History_lastUpdated_idx" ON "TestReport_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_History_versionId_idx" ON "TestReport_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestReport_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "TestReport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_Refs_resourceId_targetId_code_idx" ON "TestReport_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestReport_Refs_targetId_code_idx" ON "TestReport_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestScript" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "testscriptCapability" TEXT[],
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_id_idx" ON "TestScript" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_lastUpdated_idx" ON "TestScript" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_projectId_lastUpdated_idx" ON "TestScript" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_projectId_idx" ON "TestScript" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript__source_idx" ON "TestScript" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript__profile_idx" ON "TestScript" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___version_idx" ON "TestScript" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_compartments_idx" ON "TestScript" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___sharedTokens_idx" ON "TestScript" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___sharedTokensTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript____tag_idx" ON "TestScript" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript____tagTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___context_idx" ON "TestScript" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___contextTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_contextQuantity_idx" ON "TestScript" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___contextType_idx" ON "TestScript" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___contextTypeTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_date_idx" ON "TestScript" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_projectId_date_idx" ON "TestScript" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_description_idx" ON "TestScript" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___idnt_idx" ON "TestScript" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___idntTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___jurisdiction_idx" ON "TestScript" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript___jurisdictionTextTrgm_idx" ON "TestScript" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_name_idx" ON "TestScript" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_publisher_idx" ON "TestScript" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_status_idx" ON "TestScript" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_testscriptCapability_idx" ON "TestScript" USING gin ("testscriptCapability")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_title_idx" ON "TestScript" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_url_idx" ON "TestScript" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_version_idx" ON "TestScript" ("version")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestScript_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_History_id_idx" ON "TestScript_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_History_lastUpdated_idx" ON "TestScript_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_History_versionId_idx" ON "TestScript_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "TestScript_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "TestScript_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_Refs_resourceId_targetId_code_idx" ON "TestScript_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "TestScript_Refs_targetId_code_idx" ON "TestScript_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ValueSet" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__context" UUID[],
  "__contextText" TEXT[],
  "__contextSort" TEXT,
  "contextQuantity" DOUBLE PRECISION[],
  "__contextType" UUID[],
  "__contextTypeText" TEXT[],
  "__contextTypeSort" TEXT,
  "date" TIMESTAMPTZ,
  "description" TEXT,
  "__jurisdiction" UUID[],
  "__jurisdictionText" TEXT[],
  "__jurisdictionSort" TEXT,
  "name" TEXT,
  "publisher" TEXT,
  "status" TEXT,
  "title" TEXT,
  "url" TEXT,
  "version" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "code" TEXT[],
  "expansion" TEXT,
  "reference" TEXT[],
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_id_idx" ON "ValueSet" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_lastUpdated_idx" ON "ValueSet" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_projectId_lastUpdated_idx" ON "ValueSet" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_projectId_idx" ON "ValueSet" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet__source_idx" ON "ValueSet" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet__profile_idx" ON "ValueSet" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___version_idx" ON "ValueSet" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_compartments_idx" ON "ValueSet" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___sharedTokens_idx" ON "ValueSet" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___sharedTokensTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet____tag_idx" ON "ValueSet" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet____tagTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___context_idx" ON "ValueSet" USING gin ("__context")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___contextTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("__contextText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_contextQuantity_idx" ON "ValueSet" USING gin ("contextQuantity")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___contextType_idx" ON "ValueSet" USING gin ("__contextType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___contextTypeTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("__contextTypeText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_date_idx" ON "ValueSet" ("date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_projectId_date_idx" ON "ValueSet" ("projectId", "date")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_description_idx" ON "ValueSet" ("description")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___jurisdiction_idx" ON "ValueSet" USING gin ("__jurisdiction")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___jurisdictionTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("__jurisdictionText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_name_idx" ON "ValueSet" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_publisher_idx" ON "ValueSet" ("publisher")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_status_idx" ON "ValueSet" ("status")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_title_idx" ON "ValueSet" ("title")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_url_idx" ON "ValueSet" ("url")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_version_idx" ON "ValueSet" ("version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___idnt_idx" ON "ValueSet" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet___idntTextTrgm_idx" ON "ValueSet" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_code_idx" ON "ValueSet" USING gin ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_expansion_idx" ON "ValueSet" ("expansion")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_reference_idx" ON "ValueSet" USING gin ("reference")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ValueSet_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_History_id_idx" ON "ValueSet_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_History_lastUpdated_idx" ON "ValueSet_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_History_versionId_idx" ON "ValueSet_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ValueSet_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ValueSet_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_Refs_resourceId_targetId_code_idx" ON "ValueSet_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ValueSet_Refs_targetId_code_idx" ON "ValueSet_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VerificationResult" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "target" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__targetIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_id_idx" ON "VerificationResult" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_lastUpdated_idx" ON "VerificationResult" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_projectId_lastUpdated_idx" ON "VerificationResult" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_projectId_idx" ON "VerificationResult" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult__source_idx" ON "VerificationResult" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult__profile_idx" ON "VerificationResult" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult___version_idx" ON "VerificationResult" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_compartments_idx" ON "VerificationResult" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult___sharedTokens_idx" ON "VerificationResult" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult___sharedTokensTextTrgm_idx" ON "VerificationResult" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult____tag_idx" ON "VerificationResult" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult____tagTextTrgm_idx" ON "VerificationResult" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_target_idx" ON "VerificationResult" USING gin ("target")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VerificationResult_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_History_id_idx" ON "VerificationResult_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_History_lastUpdated_idx" ON "VerificationResult_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_History_versionId_idx" ON "VerificationResult_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VerificationResult_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "VerificationResult_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_Refs_resourceId_targetId_code_idx" ON "VerificationResult_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VerificationResult_Refs_targetId_code_idx" ON "VerificationResult_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VisionPrescription" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "patient" TEXT,
  "encounter" TEXT,
  "datewritten" TIMESTAMPTZ,
  "prescriber" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__patientIdentifierSort" TEXT,
  "__encounterIdentifierSort" TEXT,
  "__prescriberIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_id_idx" ON "VisionPrescription" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_lastUpdated_idx" ON "VisionPrescription" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_projectId_lastUpdated_idx" ON "VisionPrescription" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_projectId_idx" ON "VisionPrescription" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription__source_idx" ON "VisionPrescription" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription__profile_idx" ON "VisionPrescription" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription___version_idx" ON "VisionPrescription" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_compartments_idx" ON "VisionPrescription" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription___sharedTokens_idx" ON "VisionPrescription" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription___sharedTokensTextTrgm_idx" ON "VisionPrescription" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription____tag_idx" ON "VisionPrescription" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription____tagTextTrgm_idx" ON "VisionPrescription" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription___idnt_idx" ON "VisionPrescription" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription___idntTextTrgm_idx" ON "VisionPrescription" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_patient_idx" ON "VisionPrescription" ("patient")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_encounter_idx" ON "VisionPrescription" ("encounter")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_datewritten_idx" ON "VisionPrescription" ("datewritten")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_prescriber_idx" ON "VisionPrescription" ("prescriber")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_status_idx" ON "VisionPrescription" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VisionPrescription_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_History_id_idx" ON "VisionPrescription_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_History_lastUpdated_idx" ON "VisionPrescription_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_History_versionId_idx" ON "VisionPrescription_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "VisionPrescription_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "VisionPrescription_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_Refs_resourceId_targetId_code_idx" ON "VisionPrescription_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "VisionPrescription_Refs_targetId_code_idx" ON "VisionPrescription_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Project" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "owner" TEXT,
  "googleClientId" TEXT[],
  "recaptchaSiteKey" TEXT[],
  "___compartmentIdentifierSort" TEXT,
  "__ownerIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Project_id_idx" ON "Project" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_lastUpdated_idx" ON "Project" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_projectId_lastUpdated_idx" ON "Project" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_projectId_idx" ON "Project" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project__source_idx" ON "Project" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project__profile_idx" ON "Project" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project___version_idx" ON "Project" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_compartments_idx" ON "Project" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project___sharedTokens_idx" ON "Project" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project___sharedTokensTextTrgm_idx" ON "Project" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project____tag_idx" ON "Project" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project____tagTextTrgm_idx" ON "Project" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project___idnt_idx" ON "Project" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project___idntTextTrgm_idx" ON "Project" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_name_idx" ON "Project" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_owner_idx" ON "Project" ("owner")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_googleClientId_idx" ON "Project" USING gin ("googleClientId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_recaptchaSiteKey_idx" ON "Project" USING gin ("recaptchaSiteKey")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Project_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_History_id_idx" ON "Project_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_History_lastUpdated_idx" ON "Project_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Project_History_versionId_idx" ON "Project_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Project_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Project_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Project_Refs_resourceId_targetId_code_idx" ON "Project_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Project_Refs_targetId_code_idx" ON "Project_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClientApplication" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "name" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_id_idx" ON "ClientApplication" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_lastUpdated_idx" ON "ClientApplication" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_projectId_lastUpdated_idx" ON "ClientApplication" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_projectId_idx" ON "ClientApplication" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication__source_idx" ON "ClientApplication" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication__profile_idx" ON "ClientApplication" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication___version_idx" ON "ClientApplication" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_compartments_idx" ON "ClientApplication" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication___sharedTokens_idx" ON "ClientApplication" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication___sharedTokensTextTrgm_idx" ON "ClientApplication" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication____tag_idx" ON "ClientApplication" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication____tagTextTrgm_idx" ON "ClientApplication" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_name_idx" ON "ClientApplication" ("name")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClientApplication_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_History_id_idx" ON "ClientApplication_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_History_lastUpdated_idx" ON "ClientApplication_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_History_versionId_idx" ON "ClientApplication_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ClientApplication_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ClientApplication_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_Refs_resourceId_targetId_code_idx" ON "ClientApplication_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ClientApplication_Refs_targetId_code_idx" ON "ClientApplication_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "User" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "email" TEXT,
  "externalId" TEXT,
  "project" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__projectIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "User_id_idx" ON "User" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_lastUpdated_idx" ON "User" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_projectId_lastUpdated_idx" ON "User" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_projectId_idx" ON "User" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User__source_idx" ON "User" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User__profile_idx" ON "User" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User___version_idx" ON "User" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_compartments_idx" ON "User" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User___sharedTokens_idx" ON "User" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User___sharedTokensTextTrgm_idx" ON "User" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User____tag_idx" ON "User" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User____tagTextTrgm_idx" ON "User" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User___idnt_idx" ON "User" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User___idntTextTrgm_idx" ON "User" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_email_idx" ON "User" ("email")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_externalId_idx" ON "User" ("externalId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_project_idx" ON "User" ("project")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "User_project_email_idx" ON "User" ("project", "email")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "User_project_externalId_idx" ON "User" ("project", "externalId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "User_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_History_id_idx" ON "User_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_History_lastUpdated_idx" ON "User_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "User_History_versionId_idx" ON "User_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "User_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "User_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "User_Refs_resourceId_targetId_code_idx" ON "User_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "User_Refs_targetId_code_idx" ON "User_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ProjectMembership" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "project" TEXT,
  "user" TEXT,
  "profile" TEXT,
  "profileType" TEXT,
  "userName" TEXT,
  "externalId" TEXT,
  "accessPolicy" TEXT[],
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__projectIdentifierSort" TEXT,
  "__userIdentifierSort" TEXT,
  "__profileIdentifierSort" TEXT,
  "__accessPolicyIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_id_idx" ON "ProjectMembership" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_lastUpdated_idx" ON "ProjectMembership" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_projectId_lastUpdated_idx" ON "ProjectMembership" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_projectId_idx" ON "ProjectMembership" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership__source_idx" ON "ProjectMembership" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership__profile_idx" ON "ProjectMembership" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership___version_idx" ON "ProjectMembership" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_compartments_idx" ON "ProjectMembership" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership___sharedTokens_idx" ON "ProjectMembership" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership___sharedTokensTextTrgm_idx" ON "ProjectMembership" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership____tag_idx" ON "ProjectMembership" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership____tagTextTrgm_idx" ON "ProjectMembership" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_project_idx" ON "ProjectMembership" ("project")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_user_idx" ON "ProjectMembership" ("user")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_profile_idx" ON "ProjectMembership" ("profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_profileType_idx" ON "ProjectMembership" ("profileType")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_userName_idx" ON "ProjectMembership" ("userName")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_externalId_idx" ON "ProjectMembership" ("externalId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_accessPolicy_idx" ON "ProjectMembership" USING gin ("accessPolicy")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership___idnt_idx" ON "ProjectMembership" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership___idntTextTrgm_idx" ON "ProjectMembership" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_project_externalId_idx" ON "ProjectMembership" ("project", "externalId")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_project_userName_idx" ON "ProjectMembership" ("project", "userName")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ProjectMembership_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_History_id_idx" ON "ProjectMembership_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_History_lastUpdated_idx" ON "ProjectMembership_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_History_versionId_idx" ON "ProjectMembership_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ProjectMembership_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "ProjectMembership_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_Refs_resourceId_targetId_code_idx" ON "ProjectMembership_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ProjectMembership_Refs_targetId_code_idx" ON "ProjectMembership_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bot" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "__category" UUID[],
  "__categoryText" TEXT[],
  "__categorySort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bot_id_idx" ON "Bot" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_lastUpdated_idx" ON "Bot" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_projectId_lastUpdated_idx" ON "Bot" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_projectId_idx" ON "Bot" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot__source_idx" ON "Bot" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot__profile_idx" ON "Bot" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___version_idx" ON "Bot" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_compartments_idx" ON "Bot" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___sharedTokens_idx" ON "Bot" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___sharedTokensTextTrgm_idx" ON "Bot" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot____tag_idx" ON "Bot" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot____tagTextTrgm_idx" ON "Bot" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___idnt_idx" ON "Bot" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___idntTextTrgm_idx" ON "Bot" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_name_idx" ON "Bot" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___category_idx" ON "Bot" USING gin ("__category")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot___categoryTextTrgm_idx" ON "Bot" USING gin (token_array_to_text("__categoryText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bot_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_History_id_idx" ON "Bot_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_History_lastUpdated_idx" ON "Bot_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bot_History_versionId_idx" ON "Bot_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Bot_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Bot_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Bot_Refs_resourceId_targetId_code_idx" ON "Bot_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Bot_Refs_targetId_code_idx" ON "Bot_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Login" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "user" TEXT,
  "code" TEXT,
  "cookie" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__userIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Login_id_idx" ON "Login" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_lastUpdated_idx" ON "Login" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_projectId_lastUpdated_idx" ON "Login" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_projectId_idx" ON "Login" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login__source_idx" ON "Login" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login__profile_idx" ON "Login" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login___version_idx" ON "Login" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_compartments_idx" ON "Login" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login___sharedTokens_idx" ON "Login" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login___sharedTokensTextTrgm_idx" ON "Login" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login____tag_idx" ON "Login" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login____tagTextTrgm_idx" ON "Login" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_user_idx" ON "Login" ("user")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_code_idx" ON "Login" ("code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_cookie_idx" ON "Login" ("cookie")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Login_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_History_id_idx" ON "Login_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_History_lastUpdated_idx" ON "Login_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Login_History_versionId_idx" ON "Login_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Login_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Login_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Login_Refs_resourceId_targetId_code_idx" ON "Login_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Login_Refs_targetId_code_idx" ON "Login_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PasswordChangeRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "user" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__userIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_id_idx" ON "PasswordChangeRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_lastUpdated_idx" ON "PasswordChangeRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_projectId_lastUpdated_idx" ON "PasswordChangeRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_projectId_idx" ON "PasswordChangeRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest__source_idx" ON "PasswordChangeRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest__profile_idx" ON "PasswordChangeRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest___version_idx" ON "PasswordChangeRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_compartments_idx" ON "PasswordChangeRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest___sharedTokens_idx" ON "PasswordChangeRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest___sharedTokensTextTrgm_idx" ON "PasswordChangeRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest____tag_idx" ON "PasswordChangeRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest____tagTextTrgm_idx" ON "PasswordChangeRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_user_idx" ON "PasswordChangeRequest" ("user")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PasswordChangeRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_History_id_idx" ON "PasswordChangeRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_History_lastUpdated_idx" ON "PasswordChangeRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_History_versionId_idx" ON "PasswordChangeRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "PasswordChangeRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "PasswordChangeRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_Refs_resourceId_targetId_code_idx" ON "PasswordChangeRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "PasswordChangeRequest_Refs_targetId_code_idx" ON "PasswordChangeRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserSecurityRequest" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "user" TEXT,
  "___compartmentIdentifierSort" TEXT,
  "__userIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_id_idx" ON "UserSecurityRequest" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_lastUpdated_idx" ON "UserSecurityRequest" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_projectId_lastUpdated_idx" ON "UserSecurityRequest" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_projectId_idx" ON "UserSecurityRequest" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest__source_idx" ON "UserSecurityRequest" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest__profile_idx" ON "UserSecurityRequest" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest___version_idx" ON "UserSecurityRequest" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_compartments_idx" ON "UserSecurityRequest" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest___sharedTokens_idx" ON "UserSecurityRequest" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest___sharedTokensTextTrgm_idx" ON "UserSecurityRequest" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest____tag_idx" ON "UserSecurityRequest" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest____tagTextTrgm_idx" ON "UserSecurityRequest" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_user_idx" ON "UserSecurityRequest" ("user")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserSecurityRequest_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_History_id_idx" ON "UserSecurityRequest_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_History_lastUpdated_idx" ON "UserSecurityRequest_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_History_versionId_idx" ON "UserSecurityRequest_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserSecurityRequest_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "UserSecurityRequest_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_Refs_resourceId_targetId_code_idx" ON "UserSecurityRequest_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserSecurityRequest_Refs_targetId_code_idx" ON "UserSecurityRequest_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "JsonWebKey" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "active" BOOLEAN,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_id_idx" ON "JsonWebKey" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_lastUpdated_idx" ON "JsonWebKey" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_projectId_lastUpdated_idx" ON "JsonWebKey" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_projectId_idx" ON "JsonWebKey" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey__source_idx" ON "JsonWebKey" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey__profile_idx" ON "JsonWebKey" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey___version_idx" ON "JsonWebKey" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_compartments_idx" ON "JsonWebKey" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey___sharedTokens_idx" ON "JsonWebKey" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey___sharedTokensTextTrgm_idx" ON "JsonWebKey" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey____tag_idx" ON "JsonWebKey" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey____tagTextTrgm_idx" ON "JsonWebKey" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_active_idx" ON "JsonWebKey" ("active")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "JsonWebKey_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_History_id_idx" ON "JsonWebKey_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_History_lastUpdated_idx" ON "JsonWebKey_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_History_versionId_idx" ON "JsonWebKey_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "JsonWebKey_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "JsonWebKey_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_Refs_resourceId_targetId_code_idx" ON "JsonWebKey_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "JsonWebKey_Refs_targetId_code_idx" ON "JsonWebKey_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AccessPolicy" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "name" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_id_idx" ON "AccessPolicy" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_lastUpdated_idx" ON "AccessPolicy" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_projectId_lastUpdated_idx" ON "AccessPolicy" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_projectId_idx" ON "AccessPolicy" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy__source_idx" ON "AccessPolicy" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy__profile_idx" ON "AccessPolicy" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy___version_idx" ON "AccessPolicy" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_compartments_idx" ON "AccessPolicy" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy___sharedTokens_idx" ON "AccessPolicy" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy___sharedTokensTextTrgm_idx" ON "AccessPolicy" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy____tag_idx" ON "AccessPolicy" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy____tagTextTrgm_idx" ON "AccessPolicy" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_name_idx" ON "AccessPolicy" ("name")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AccessPolicy_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_History_id_idx" ON "AccessPolicy_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_History_lastUpdated_idx" ON "AccessPolicy_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_History_versionId_idx" ON "AccessPolicy_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AccessPolicy_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AccessPolicy_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_Refs_resourceId_targetId_code_idx" ON "AccessPolicy_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AccessPolicy_Refs_targetId_code_idx" ON "AccessPolicy_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserConfiguration" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "name" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_id_idx" ON "UserConfiguration" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_lastUpdated_idx" ON "UserConfiguration" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_projectId_lastUpdated_idx" ON "UserConfiguration" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_projectId_idx" ON "UserConfiguration" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration__source_idx" ON "UserConfiguration" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration__profile_idx" ON "UserConfiguration" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration___version_idx" ON "UserConfiguration" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_compartments_idx" ON "UserConfiguration" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration___sharedTokens_idx" ON "UserConfiguration" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration___sharedTokensTextTrgm_idx" ON "UserConfiguration" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration____tag_idx" ON "UserConfiguration" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration____tagTextTrgm_idx" ON "UserConfiguration" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_name_idx" ON "UserConfiguration" ("name")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserConfiguration_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_History_id_idx" ON "UserConfiguration_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_History_lastUpdated_idx" ON "UserConfiguration_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_History_versionId_idx" ON "UserConfiguration_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "UserConfiguration_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "UserConfiguration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_Refs_resourceId_targetId_code_idx" ON "UserConfiguration_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "UserConfiguration_Refs_targetId_code_idx" ON "UserConfiguration_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BulkDataExport" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_id_idx" ON "BulkDataExport" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_lastUpdated_idx" ON "BulkDataExport" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_projectId_lastUpdated_idx" ON "BulkDataExport" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_projectId_idx" ON "BulkDataExport" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport__source_idx" ON "BulkDataExport" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport__profile_idx" ON "BulkDataExport" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport___version_idx" ON "BulkDataExport" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_compartments_idx" ON "BulkDataExport" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport___sharedTokens_idx" ON "BulkDataExport" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport___sharedTokensTextTrgm_idx" ON "BulkDataExport" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport____tag_idx" ON "BulkDataExport" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport____tagTextTrgm_idx" ON "BulkDataExport" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_status_idx" ON "BulkDataExport" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BulkDataExport_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_History_id_idx" ON "BulkDataExport_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_History_lastUpdated_idx" ON "BulkDataExport_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_History_versionId_idx" ON "BulkDataExport_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "BulkDataExport_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "BulkDataExport_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_Refs_resourceId_targetId_code_idx" ON "BulkDataExport_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "BulkDataExport_Refs_targetId_code_idx" ON "BulkDataExport_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SmartAppLaunch" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_id_idx" ON "SmartAppLaunch" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_lastUpdated_idx" ON "SmartAppLaunch" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_projectId_lastUpdated_idx" ON "SmartAppLaunch" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_projectId_idx" ON "SmartAppLaunch" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch__source_idx" ON "SmartAppLaunch" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch__profile_idx" ON "SmartAppLaunch" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch___version_idx" ON "SmartAppLaunch" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_compartments_idx" ON "SmartAppLaunch" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch___sharedTokens_idx" ON "SmartAppLaunch" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch___sharedTokensTextTrgm_idx" ON "SmartAppLaunch" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch____tag_idx" ON "SmartAppLaunch" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch____tagTextTrgm_idx" ON "SmartAppLaunch" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SmartAppLaunch_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_History_id_idx" ON "SmartAppLaunch_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_History_lastUpdated_idx" ON "SmartAppLaunch_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_History_versionId_idx" ON "SmartAppLaunch_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "SmartAppLaunch_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "SmartAppLaunch_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_Refs_resourceId_targetId_code_idx" ON "SmartAppLaunch_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "SmartAppLaunch_Refs_targetId_code_idx" ON "SmartAppLaunch_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DomainConfiguration" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "domain" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_id_idx" ON "DomainConfiguration" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_lastUpdated_idx" ON "DomainConfiguration" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_projectId_lastUpdated_idx" ON "DomainConfiguration" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_projectId_idx" ON "DomainConfiguration" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration__source_idx" ON "DomainConfiguration" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration__profile_idx" ON "DomainConfiguration" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration___version_idx" ON "DomainConfiguration" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_compartments_idx" ON "DomainConfiguration" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration___sharedTokens_idx" ON "DomainConfiguration" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration___sharedTokensTextTrgm_idx" ON "DomainConfiguration" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration____tag_idx" ON "DomainConfiguration" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration____tagTextTrgm_idx" ON "DomainConfiguration" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_domain_idx" ON "DomainConfiguration" ("domain")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DomainConfiguration_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_History_id_idx" ON "DomainConfiguration_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_History_lastUpdated_idx" ON "DomainConfiguration_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_History_versionId_idx" ON "DomainConfiguration_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DomainConfiguration_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "DomainConfiguration_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_Refs_resourceId_targetId_code_idx" ON "DomainConfiguration_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "DomainConfiguration_Refs_targetId_code_idx" ON "DomainConfiguration_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AsyncJob" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "type" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_id_idx" ON "AsyncJob" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_lastUpdated_idx" ON "AsyncJob" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_projectId_lastUpdated_idx" ON "AsyncJob" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_projectId_idx" ON "AsyncJob" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob__source_idx" ON "AsyncJob" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob__profile_idx" ON "AsyncJob" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob___version_idx" ON "AsyncJob" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_compartments_idx" ON "AsyncJob" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob___sharedTokens_idx" ON "AsyncJob" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob___sharedTokensTextTrgm_idx" ON "AsyncJob" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob____tag_idx" ON "AsyncJob" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob____tagTextTrgm_idx" ON "AsyncJob" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_type_idx" ON "AsyncJob" ("type")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_status_idx" ON "AsyncJob" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AsyncJob_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_History_id_idx" ON "AsyncJob_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_History_lastUpdated_idx" ON "AsyncJob_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_History_versionId_idx" ON "AsyncJob_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "AsyncJob_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "AsyncJob_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_Refs_resourceId_targetId_code_idx" ON "AsyncJob_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "AsyncJob_Refs_targetId_code_idx" ON "AsyncJob_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Agent" (
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ,
  "deleted" BOOLEAN,
  "projectId" UUID,
  "__version" INTEGER,
  "_source" TEXT,
  "_profile" TEXT[],
  "compartments" UUID[],
  "__sharedTokens" UUID[],
  "__sharedTokensText" TEXT[],
  "___securitySort" TEXT,
  "___tag" UUID[],
  "___tagText" TEXT[],
  "___tagSort" TEXT,
  "__identifier" UUID[],
  "__identifierText" TEXT[],
  "__identifierSort" TEXT,
  "name" TEXT,
  "status" TEXT,
  "___compartmentIdentifierSort" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Agent_id_idx" ON "Agent" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_lastUpdated_idx" ON "Agent" ("lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_projectId_lastUpdated_idx" ON "Agent" ("projectId", "lastUpdated")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_projectId_idx" ON "Agent" ("projectId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent__source_idx" ON "Agent" ("_source")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent__profile_idx" ON "Agent" USING gin ("_profile")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent___version_idx" ON "Agent" ("__version")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_compartments_idx" ON "Agent" USING gin ("compartments")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent___sharedTokens_idx" ON "Agent" USING gin ("__sharedTokens")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent___sharedTokensTextTrgm_idx" ON "Agent" USING gin (token_array_to_text("__sharedTokensText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent____tag_idx" ON "Agent" USING gin ("___tag")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent____tagTextTrgm_idx" ON "Agent" USING gin (token_array_to_text("___tagText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent___idnt_idx" ON "Agent" USING gin ("__identifier")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent___idntTextTrgm_idx" ON "Agent" USING gin (token_array_to_text("__identifierText") gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_name_idx" ON "Agent" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_status_idx" ON "Agent" ("status")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Agent_History" (
  "versionId" UUID,
  "id" UUID,
  "content" TEXT,
  "lastUpdated" TIMESTAMPTZ
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_History_id_idx" ON "Agent_History" ("id")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_History_lastUpdated_idx" ON "Agent_History" ("lastUpdated")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Agent_History_versionId_idx" ON "Agent_History" ("versionId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Agent_References" (
  "resourceId" UUID,
  "targetId" UUID,
  "code" TEXT
)`);
  await fns.query(client, results, `ALTER TABLE IF EXISTS "Agent_References" ADD PRIMARY KEY ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Agent_Refs_resourceId_targetId_code_idx" ON "Agent_References" ("resourceId", "targetId", "code")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Agent_Refs_targetId_code_idx" ON "Agent_References" ("targetId", "code") INCLUDE ("resourceId")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Address" (
  "resourceId" UUID,
  "address" TEXT,
  "city" TEXT,
  "country" TEXT,
  "postalCode" TEXT,
  "state" TEXT,
  "use" TEXT
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_resourceId_idx" ON "Address" ("resourceId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_address_idx" ON "Address" ("address")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_city_idx" ON "Address" ("city")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_country_idx" ON "Address" ("country")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_postalCode_idx" ON "Address" ("postalCode")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_state_idx" ON "Address" ("state")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_use_idx" ON "Address" ("use")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_address_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, address))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_postalCode_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, "postalCode"))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_city_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, city))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_use_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, use))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_country_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, country))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Address_state_idx_tsv" ON "Address" USING gin (to_tsvector('simple'::regconfig, state))`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "ContactPoint" (
  "resourceId" UUID,
  "system" TEXT,
  "value" TEXT
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ContactPoint_resourceId_idx" ON "ContactPoint" ("resourceId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ContactPoint_system_idx" ON "ContactPoint" ("system")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "ContactPoint_value_idx" ON "ContactPoint" ("value")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Identifier" (
  "resourceId" UUID,
  "system" TEXT,
  "value" TEXT
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Identifier_resourceId_idx" ON "Identifier" ("resourceId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Identifier_system_idx" ON "Identifier" ("system")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Identifier_value_idx" ON "Identifier" ("value")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "HumanName" (
  "resourceId" UUID,
  "name" TEXT,
  "given" TEXT,
  "family" TEXT
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_resourceId_idx" ON "HumanName" ("resourceId")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_name_idx" ON "HumanName" ("name")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_given_idx" ON "HumanName" ("given")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_family_idx" ON "HumanName" ("family")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_nameTrgm_idx" ON "HumanName" USING gin (name gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_givenTrgm_idx" ON "HumanName" USING gin (given gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_familyTrgm_idx" ON "HumanName" USING gin (family gin_trgm_ops)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_name_idx_tsv" ON "HumanName" USING gin (to_tsvector('simple'::regconfig, name))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_given_idx_tsv" ON "HumanName" USING gin (to_tsvector('simple'::regconfig, given))`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "HumanName_family_idx_tsv" ON "HumanName" USING gin (to_tsvector('simple'::regconfig, family))`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Coding" (
  "id" BIGINT,
  "system" UUID,
  "code" TEXT,
  "display" TEXT,
  "isSynonym" BOOLEAN,
  "synonymOf" BIGINT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coding_id_idx" ON "Coding" ("id")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coding_system_code_idx" ON "Coding" ("system", "code") INCLUDE ("id")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coding_system_code_primary_idx" ON "Coding" ("system", "code") INCLUDE ("id") WHERE ("synonymOf" IS NULL)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coding_system_code_display_idx" ON "Coding" ("system", "code", "display")`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coding_system_displayTrgm_idx" ON "Coding" USING gin ("system", display gin_trgm_ops)`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "Coding_Property" (
  "coding" BIGINT,
  "property" BIGINT,
  "target" BIGINT,
  "value" TEXT
)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coding_Property_target_property_coding_idx" ON "Coding_Property" ("target", "property", "coding") WHERE (target IS NOT NULL)`);
  await fns.query(client, results, `CREATE INDEX CONCURRENTLY IF NOT EXISTS "Coding_Property_coding_property__idx" ON "Coding_Property" ("coding", "property")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "Coding_Property_property_value_coding_target_full_idx" ON "Coding_Property" ("property", "value", "coding", "target")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "CodeSystem_Property" (
  "id" BIGINT,
  "system" UUID,
  "code" TEXT,
  "type" TEXT,
  "uri" TEXT,
  "description" TEXT
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_Property_id_idx" ON "CodeSystem_Property" ("id")`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "CodeSystem_Property_system_code_idx" ON "CodeSystem_Property" ("system", "code") INCLUDE ("id")`);
  await fns.query(client, results, `CREATE TABLE IF NOT EXISTS "DatabaseMigration" (
  "id" INTEGER,
  "version" INTEGER,
  "dataVersion" INTEGER,
  "firstBoot" BOOLEAN
)`);
  await fns.query(client, results, `CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS "DatabaseMigration_id_idx" ON "DatabaseMigration" ("id")`);
}
